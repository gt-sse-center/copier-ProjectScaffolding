# serializer version: 1
# name: test_All[01-False_None_None_None]
  dict({
    'post_generation_actions.html': '''
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <meta http-equiv="X-UA-Compatible" content="ie=edge">
          <title>this_is_the_project_name Post Generation Actions</title>
        </head>
        <style>
          body {
            font-family: "Open Sans", sans-serif;
          }
      
          details {
            width: 100%;
            overflow: hidden; /* Keep this line to prevent an odd blue outline around the element in Safari. */
          }
      
          details summary {
            display: block;
          }
      
          details summary::-webkit-details-marker {
            display: none;
          }
      
          details summary span {
            position: relative;
            display: flex;
            align-items: center;
            padding-left: 1rem;
            background: #444;
            color: #fff;
            height: 4rem;
          }
      
          details summary span:hover {
            cursor: pointer;
          }
      
          details summary span::before {
            content: "â–º";
            font-size: 1rem;
            display: flex;
            align-items: center;
            margin-right: 0.5rem;
            transition: rotate 200ms 400ms ease-out;
          }
      
          details[open] summary span::before {
            rotate: 90deg;
            transition: rotate 200ms ease-out;
          }
      
          details summary span input {
            margin-right: 0.75rem;
          }
      
          div.details-content {
            box-sizing: border-box;
            width: 100%;
            max-height: 0;
            overflow: hidden;
            padding: 0 10px;
            border: 2px solid transparent;
            transition: max-height 400ms ease-out, border 0ms 400ms linear;
            background-color: rgba(0, 0, 0, 0.05);
            margin-bottom: 1rem;
          }
      
          details[open] + div.details-content {
            max-height: 800px; /* Set a max-height value enough to show all the content */
            border-color: #888;
            transition: max-height 400ms ease-out, border 0ms linear;
          }
      
          code {
            background-color: rgba(0, 0, 0, 0.10);
          }
      
        </style>
        <body>
          <h1>this_is_the_project_name Post Generation Actions</h1>
          <p>The following steps must be completed in the order listed now that your project has been generated.</p>
      
          
          
          <!-- [BEGIN] After Repository Tool Instruction -->
                  <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-development.md">Update DEVELOPMENT.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>DEVELOPMENT.md</code>.</p>
      
              </div>
      <!-- [END] After Repository Tool Instruction -->
      
          <details>
              <summary>
                  <span role="term"><input type="checkbox" id="delete-this-file">Delete this file</span>
              </summary>
          </details>
          <div role="definition" class="details-content">
              <p>After you have completed all the steps, you can delete this file.</p>
              <p>Now your project is ready to go!</p>
          </div>
      
          <script>
            document.querySelectorAll("details summary span input[type=checkbox]").forEach(
              function(checkbox) {
                var key = `${ location.href }-${ checkbox.id }`;
      
                if(window.localStorage.getItem(key) === "true")
                  checkbox.checked = true;
      
                this.addEventListener(
                  "change",
                  function() {
                    window.localStorage.setItem(key, checkbox.checked ? "true" : "false");
                  },
                );
              }
            );
          </script>
      
          <!-- TODO(copier-ProjectScaffolding): Decorate code elements with a "copy code" button that copies to the clipboard -->
        </body>
      </html>
  
    ''',
  })
# ---
# name: test_All[02-False_None_None_PythonExecutionEnvironment]
  dict({
    'Bootstrap.cmd': '''
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  This script downloads and invokes BoostrapImpl.cmd from the PythonBootstrapper
      @REM |  repository (https://github.com/davidbrownell/PythonBootstrapper).
      @REM |
      @REM |  Arguments:
      @REM |
      @REM |      --debug                         Display additional debugging information.
      @REM |
      @REM |      --force                         Ensure that a new python environment is installed, even if it already exists.
      @REM |
      @REM |      --python-version <version>      Specify the python version to install; the default python version is installed if not specified.
      @REM |
      @REM |      --bootstrap-branch <branch>     Specify the branch of the PythonBootstrapper repository to use when downloading BootstrapImpl; "main" is used if not specified.
      @REM |
      @REM ----------------------------------------------------------------------
      @setlocal EnableDelayedExpansion
      @pushd %~dp0
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Parse and Process Arguments
      @REM |
      @REM ----------------------------------------------------------------------
      @set _BOOTSTRAP_BRANCH=main
      @set _COMMAND_LINE_ARGS=
      
      :ParseArgs
      @if '%1' EQU '' @goto :ParseArgs_End
      
      @set ARG=%1
      @set ARG=%ARG:"=%
      
      @if "%ARG%" NEQ "--bootstrap-branch" @goto :ParseArgs_BootstrapBranchEnd
      
      @REM Extract the bootstrap branch
      @shift /1
      
      @set ARG=%1
      @set ARG=%ARG:"=%
      
      @set _BOOTSTRAP_BRANCH=%ARG%
      @goto :ParseArgs_Next
      
      :ParseArgs_BootstrapBranchEnd
      @set _COMMAND_LINE_ARGS=%_COMMAND_LINE_ARGS% %1
      
      :ParseArgs_Next
      @shift /1
      @goto :ParseArgs
      
      :ParseArgs_End
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Download BootstrapImpl.cmd
      @REM |
      @REM ----------------------------------------------------------------------
      @echo Downloading Bootstrap code...
      
      @set _BOOTSTRAPIMPL_URL=https://raw.githubusercontent.com/davidbrownell/PythonBootstrapper/%_BOOTSTRAP_BRANCH%/src/BootstrapImpl.cmd
      
      @call :_CreateTempFileName
      
      @curl --header "Cache-Control: no-cache, no-store" --header "Pragma: no-cache" --location %_BOOTSTRAPIMPL_URL% --output BootstrapImpl.cmd --no-progress-meter --fail-with-body > "%_BOOTSTRAP_TEMP_FILENAME%" 2>&1
      @set _ERRORLEVEL=%ERRORLEVEL%
      
      @if %_ERRORLEVEL% NEQ 0 (
          @echo [1ADownloading Bootstrap code...[31m[1mFAILED[0m ^(%_BOOTSTRAPIMPL_URL%^).
          @echo.
      
          @type "%_BOOTSTRAP_TEMP_FILENAME%"
          @goto :Exit
      )
      
      @call :_DeleteTempFile
      @echo [1ADownloading Bootstrap code...[32m[1mDONE[0m.
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Invoke BootstrapImpl.cmd
      @REM |
      @REM ----------------------------------------------------------------------
      @call BootstrapImpl.cmd %_COMMAND_LINE_ARGS%
      @set _ERRORLEVEL=%ERRORLEVEL%
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Exit
      @REM |
      @REM ----------------------------------------------------------------------
      :Exit
      @if exist BootstrapImpl.cmd del BootstrapImpl.cmd
      @call :_DeleteTempFile
      
      @popd
      
      @endlocal & @exit /B %_ERRORLEVEL%
      
      @REM ----------------------------------------------------------------------
      @REM ----------------------------------------------------------------------
      @REM ----------------------------------------------------------------------
      :_CreateTempFileName
      @set _BOOTSTRAP_TEMP_FILENAME=%CD%\Bootstrap-!RANDOM!-!Time:~6,5!
      @goto :EOF
      
      @REM ----------------------------------------------------------------------
      :_DeleteTempFile
      @if "%_BOOTSTRAP_TEMP_FILENAME%" NEQ "" (
          @if exist "%_BOOTSTRAP_TEMP_FILENAME%" (
              @del "%_BOOTSTRAP_TEMP_FILENAME%"
          )
      )
      @goto :EOF
  
    ''',
    'Bootstrap.sh': '''
      #!/usr/bin/env bash
      # ----------------------------------------------------------------------
      # |
      # |  This script downloads and invokes BootstrapImpl.sh from the PythonBootstrapper
      # |  repository (https://github.com/davidbrownell/PythonBootstrapper).
      # |
      # |  Arguments:
      # |
      # |      --debug                         Display additional debugging information.
      # |
      # |      --force                         Ensure that a new python environment is installed, even if it already exists.
      # |
      # |      --python-version <version>      Specify the python version to install; the default python version is installed if not specified.
      # |
      # |      --bootstrap-branch <branch>     Specify the branch of the PythonBootstrapper repository to use when downloading BootstrapImpl; "main" is used if not specified.
      # |
      # ----------------------------------------------------------------------
      set +v # Continue on errors
      
      this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
      pushd "${this_dir}" > /dev/null || exit
      
      # ----------------------------------------------------------------------
      # |
      # |  Parse and Process Arguments
      # |
      # ----------------------------------------------------------------------
      bootstrap_branch=main
      command_line_args=()
      
      while [[ $# -gt 0 ]]; do
          if [[ "$1" == "--bootstrap-branch" ]]; then
              bootstrap_branch=$2
              shift
          else
              command_line_args+=("$1")
          fi
      
          shift
      done
      
      # ----------------------------------------------------------------------
      # |
      # |  Download BootstrapImpl.sh
      # |
      # ----------------------------------------------------------------------
      echo "Downloading Bootstrap code..."
      
      bootstrap_url=https://raw.githubusercontent.com/davidbrownell/PythonBootstrapper/${bootstrap_branch}/src/BootstrapImpl.sh
      
      temp_script_name=$(mktemp Bootstrap.XXXXXX)
      
      curl --header "Cache-Control: no-cache, no-store" --header "Pragma: no-cache" --location ${bootstrap_url} --output BootstrapImpl.sh --no-progress-meter --fail-with-body > "${temp_script_name}" 2>&1
      error=$?
      
      if [[ ${error} != 0 ]]; then
          echo "[1ADownloading Bootstrap code...[31m[1mFAILED[0m (${bootstrap_url})."
          echo ""
      
          cat "${temp_script_name}"
          rm "${temp_script_name}"
      
          exit ${error}
      fi
      
      chmod u+x BootstrapImpl.sh
      echo "[1ADownloading Bootstrap code...[32m[1mDONE[0m."
      
      # ----------------------------------------------------------------------
      # |
      # |  Invoke BootstrapImpl.sh
      # |
      # ----------------------------------------------------------------------
      ./BootstrapImpl.sh "${command_line_args[@]}"
      error=$?
      
      # ----------------------------------------------------------------------
      # |
      # |  Exit
      # |
      # ----------------------------------------------------------------------
      rm "BootstrapImpl.sh"
      rm "${temp_script_name}"
      
      exit ${error}
  
    ''',
    'BootstrapEpilog.py': '''
      # pylint: disable=missing-module-docstring
      
      import subprocess
      import sys
      
      from pathlib import Path
      
      
      # Parse the arguments
      no_cache = False
      
      display_flags: list[str] = []
      
      # First arg is the script name, second arg is the name of the shell script to write to
      for arg in sys.argv[2:]:
          if arg == "--no-cache":
              no_cache = True
          else:
              raise Exception("'{}' is not a recognized argument.".format(arg))
      
      subprocess.run(
          "pip install --disable-pip-version-check {} --requirement requirements.txt".format(
              "--no-cache-dir" if no_cache else "",
          ),
          check=True,
          shell=True,
          cwd=Path(__file__).parent,
      )
  
    ''',
    'post_generation_actions.html': '''
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <meta http-equiv="X-UA-Compatible" content="ie=edge">
          <title>this_is_the_project_name Post Generation Actions</title>
        </head>
        <style>
          body {
            font-family: "Open Sans", sans-serif;
          }
      
          details {
            width: 100%;
            overflow: hidden; /* Keep this line to prevent an odd blue outline around the element in Safari. */
          }
      
          details summary {
            display: block;
          }
      
          details summary::-webkit-details-marker {
            display: none;
          }
      
          details summary span {
            position: relative;
            display: flex;
            align-items: center;
            padding-left: 1rem;
            background: #444;
            color: #fff;
            height: 4rem;
          }
      
          details summary span:hover {
            cursor: pointer;
          }
      
          details summary span::before {
            content: "â–º";
            font-size: 1rem;
            display: flex;
            align-items: center;
            margin-right: 0.5rem;
            transition: rotate 200ms 400ms ease-out;
          }
      
          details[open] summary span::before {
            rotate: 90deg;
            transition: rotate 200ms ease-out;
          }
      
          details summary span input {
            margin-right: 0.75rem;
          }
      
          div.details-content {
            box-sizing: border-box;
            width: 100%;
            max-height: 0;
            overflow: hidden;
            padding: 0 10px;
            border: 2px solid transparent;
            transition: max-height 400ms ease-out, border 0ms 400ms linear;
            background-color: rgba(0, 0, 0, 0.05);
            margin-bottom: 1rem;
          }
      
          details[open] + div.details-content {
            max-height: 800px; /* Set a max-height value enough to show all the content */
            border-color: #888;
            transition: max-height 400ms ease-out, border 0ms linear;
          }
      
          code {
            background-color: rgba(0, 0, 0, 0.10);
          }
      
        </style>
        <body>
          <h1>this_is_the_project_name Post Generation Actions</h1>
          <p>The following steps must be completed in the order listed now that your project has been generated.</p>
      
          
          
          <!-- [BEGIN] After Repository Tool Instruction -->
                  <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-requirements.txt">Update requirements.txt</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Python package dependencies can be added to <code>requirements.txt</code>. These packages will be automatically installed when the environment is <a href="https://github.com/davidbrownell/PythonBootstrapper" target="_blank">bootstrapped</a>.</p>
      <p>Please visit <a href="https://pip.pypa.io/en/stable/reference/requirements-file-format/" target="_blank">this link</a> for more information on requirements files and how they can be used.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-development.md">Update DEVELOPMENT.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>DEVELOPMENT.md</code>.</p>
      
              </div>
      <!-- [END] After Repository Tool Instruction -->
      
          <details>
              <summary>
                  <span role="term"><input type="checkbox" id="delete-this-file">Delete this file</span>
              </summary>
          </details>
          <div role="definition" class="details-content">
              <p>After you have completed all the steps, you can delete this file.</p>
              <p>Now your project is ready to go!</p>
          </div>
      
          <script>
            document.querySelectorAll("details summary span input[type=checkbox]").forEach(
              function(checkbox) {
                var key = `${ location.href }-${ checkbox.id }`;
      
                if(window.localStorage.getItem(key) === "true")
                  checkbox.checked = true;
      
                this.addEventListener(
                  "change",
                  function() {
                    window.localStorage.setItem(key, checkbox.checked ? "true" : "false");
                  },
                );
              }
            );
          </script>
      
          <!-- TODO(copier-ProjectScaffolding): Decorate code elements with a "copy code" button that copies to the clipboard -->
        </body>
      </html>
  
    ''',
    'requirements.txt': '''
      # TODO: Add your custom package requirements here
  
    ''',
  })
# ---
# name: test_All[03-False_None_None_PythonPackage]
  dict({
    'ActivateEpilog.py': '''
      import json
      import os
      import sys
      
      from pathlib import Path
      
      with (Path(os.environ["PYTHON_BOOTSTRAPPER_GENERATED_DIR"]) / "bootstrap_flags.json").open() as f:
          flags = json.load(f)
      
      if flags:
          sys.stdout.write("\nBootstrapped with {}.\n".format(", ".join(f"'{flag}'" for flag in flags)))
  
    ''',
    'Bootstrap.cmd': '''
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  This script downloads and invokes BoostrapImpl.cmd from the PythonBootstrapper
      @REM |  repository (https://github.com/davidbrownell/PythonBootstrapper).
      @REM |
      @REM |  Arguments:
      @REM |
      @REM |      --debug                         Display additional debugging information.
      @REM |
      @REM |      --force                         Ensure that a new python environment is installed, even if it already exists.
      @REM |
      @REM |      --python-version <version>      Specify the python version to install; the default python version is installed if not specified.
      @REM |
      @REM |      --bootstrap-branch <branch>     Specify the branch of the PythonBootstrapper repository to use when downloading BootstrapImpl; "main" is used if not specified.
      @REM |
      @REM ----------------------------------------------------------------------
      @setlocal EnableDelayedExpansion
      @pushd %~dp0
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Parse and Process Arguments
      @REM |
      @REM ----------------------------------------------------------------------
      @set _BOOTSTRAP_BRANCH=main
      @set _COMMAND_LINE_ARGS=
      
      :ParseArgs
      @if '%1' EQU '' @goto :ParseArgs_End
      
      @set ARG=%1
      @set ARG=%ARG:"=%
      
      @if "%ARG%" NEQ "--bootstrap-branch" @goto :ParseArgs_BootstrapBranchEnd
      
      @REM Extract the bootstrap branch
      @shift /1
      
      @set ARG=%1
      @set ARG=%ARG:"=%
      
      @set _BOOTSTRAP_BRANCH=%ARG%
      @goto :ParseArgs_Next
      
      :ParseArgs_BootstrapBranchEnd
      @set _COMMAND_LINE_ARGS=%_COMMAND_LINE_ARGS% %1
      
      :ParseArgs_Next
      @shift /1
      @goto :ParseArgs
      
      :ParseArgs_End
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Download BootstrapImpl.cmd
      @REM |
      @REM ----------------------------------------------------------------------
      @echo Downloading Bootstrap code...
      
      @set _BOOTSTRAPIMPL_URL=https://raw.githubusercontent.com/davidbrownell/PythonBootstrapper/%_BOOTSTRAP_BRANCH%/src/BootstrapImpl.cmd
      
      @call :_CreateTempFileName
      
      @curl --header "Cache-Control: no-cache, no-store" --header "Pragma: no-cache" --location %_BOOTSTRAPIMPL_URL% --output BootstrapImpl.cmd --no-progress-meter --fail-with-body > "%_BOOTSTRAP_TEMP_FILENAME%" 2>&1
      @set _ERRORLEVEL=%ERRORLEVEL%
      
      @if %_ERRORLEVEL% NEQ 0 (
          @echo [1ADownloading Bootstrap code...[31m[1mFAILED[0m ^(%_BOOTSTRAPIMPL_URL%^).
          @echo.
      
          @type "%_BOOTSTRAP_TEMP_FILENAME%"
          @goto :Exit
      )
      
      @call :_DeleteTempFile
      @echo [1ADownloading Bootstrap code...[32m[1mDONE[0m.
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Invoke BootstrapImpl.cmd
      @REM |
      @REM ----------------------------------------------------------------------
      @call BootstrapImpl.cmd %_COMMAND_LINE_ARGS%
      @set _ERRORLEVEL=%ERRORLEVEL%
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Exit
      @REM |
      @REM ----------------------------------------------------------------------
      :Exit
      @if exist BootstrapImpl.cmd del BootstrapImpl.cmd
      @call :_DeleteTempFile
      
      @popd
      
      @endlocal & @exit /B %_ERRORLEVEL%
      
      @REM ----------------------------------------------------------------------
      @REM ----------------------------------------------------------------------
      @REM ----------------------------------------------------------------------
      :_CreateTempFileName
      @set _BOOTSTRAP_TEMP_FILENAME=%CD%\Bootstrap-!RANDOM!-!Time:~6,5!
      @goto :EOF
      
      @REM ----------------------------------------------------------------------
      :_DeleteTempFile
      @if "%_BOOTSTRAP_TEMP_FILENAME%" NEQ "" (
          @if exist "%_BOOTSTRAP_TEMP_FILENAME%" (
              @del "%_BOOTSTRAP_TEMP_FILENAME%"
          )
      )
      @goto :EOF
  
    ''',
    'Bootstrap.sh': '''
      #!/usr/bin/env bash
      # ----------------------------------------------------------------------
      # |
      # |  This script downloads and invokes BootstrapImpl.sh from the PythonBootstrapper
      # |  repository (https://github.com/davidbrownell/PythonBootstrapper).
      # |
      # |  Arguments:
      # |
      # |      --debug                         Display additional debugging information.
      # |
      # |      --force                         Ensure that a new python environment is installed, even if it already exists.
      # |
      # |      --python-version <version>      Specify the python version to install; the default python version is installed if not specified.
      # |
      # |      --bootstrap-branch <branch>     Specify the branch of the PythonBootstrapper repository to use when downloading BootstrapImpl; "main" is used if not specified.
      # |
      # ----------------------------------------------------------------------
      set +v # Continue on errors
      
      this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
      pushd "${this_dir}" > /dev/null || exit
      
      # ----------------------------------------------------------------------
      # |
      # |  Parse and Process Arguments
      # |
      # ----------------------------------------------------------------------
      bootstrap_branch=main
      command_line_args=()
      
      while [[ $# -gt 0 ]]; do
          if [[ "$1" == "--bootstrap-branch" ]]; then
              bootstrap_branch=$2
              shift
          else
              command_line_args+=("$1")
          fi
      
          shift
      done
      
      # ----------------------------------------------------------------------
      # |
      # |  Download BootstrapImpl.sh
      # |
      # ----------------------------------------------------------------------
      echo "Downloading Bootstrap code..."
      
      bootstrap_url=https://raw.githubusercontent.com/davidbrownell/PythonBootstrapper/${bootstrap_branch}/src/BootstrapImpl.sh
      
      temp_script_name=$(mktemp Bootstrap.XXXXXX)
      
      curl --header "Cache-Control: no-cache, no-store" --header "Pragma: no-cache" --location ${bootstrap_url} --output BootstrapImpl.sh --no-progress-meter --fail-with-body > "${temp_script_name}" 2>&1
      error=$?
      
      if [[ ${error} != 0 ]]; then
          echo "[1ADownloading Bootstrap code...[31m[1mFAILED[0m (${bootstrap_url})."
          echo ""
      
          cat "${temp_script_name}"
          rm "${temp_script_name}"
      
          exit ${error}
      fi
      
      chmod u+x BootstrapImpl.sh
      echo "[1ADownloading Bootstrap code...[32m[1mDONE[0m."
      
      # ----------------------------------------------------------------------
      # |
      # |  Invoke BootstrapImpl.sh
      # |
      # ----------------------------------------------------------------------
      ./BootstrapImpl.sh "${command_line_args[@]}"
      error=$?
      
      # ----------------------------------------------------------------------
      # |
      # |  Exit
      # |
      # ----------------------------------------------------------------------
      rm "BootstrapImpl.sh"
      rm "${temp_script_name}"
      
      exit ${error}
  
    ''',
    'BootstrapEpilog.py': '''
      # pylint: disable=missing-module-docstring
      
      import os
      import subprocess
      import sys
      
      from pathlib import Path
      
      
      # Parse the arguments
      is_debug = False
      is_force = False
      is_verbose = False
      is_package = False
      no_cache = False
      
      display_flags: list[str] = []
      
      # First arg is the script name, second arg is the name of the shell script to write to
      for arg in sys.argv[2:]:
          if arg == "--debug":
              is_debug = True
          elif arg == "--force":
              is_force = True
          elif arg == "--verbose":
              is_verbose = True
          elif arg == "--package":
              is_package = True
              display_flags.append("package")
          elif arg == "--no-cache":
              no_cache = True
          else:
              raise Exception("'{}' is not a recognized argument.".format(arg))
      
      if is_debug:
          is_verbose = True
      
      subprocess.run(
          'pip install --disable-pip-version-check {} --editable ".[dev{}]"'.format(
              "--no-cache-dir" if no_cache else "",
              ", package" if is_package else "",
          ),
          check=True,
          shell=True,
      )
      
      with (
          Path(__file__).parent / os.environ["PYTHON_BOOTSTRAPPER_GENERATED_DIR"] / "bootstrap_flags.json"
      ).open("w") as f:
          f.write("[{}]".format(", ".join(f'"{flag}"' for flag in display_flags)))
  
    ''',
    'Build.py': '''
      """Build tasks for this python project."""
      
      import sys
      
      from pathlib import Path
      
      import typer
      
      from dbrownell_Common import PathEx
      from dbrownell_DevTools.RepoBuildTools import Python as RepoBuildTools
      from typer.core import TyperGroup
      
      
      # ----------------------------------------------------------------------
      class NaturalOrderGrouper(TyperGroup):
          # pylint: disable=missing-class-docstring
          # ----------------------------------------------------------------------
          def list_commands(self, *args, **kwargs):  # pylint: disable=unused-argument
              return self.commands.keys()
      
      
      # ----------------------------------------------------------------------
      app = typer.Typer(
          cls=NaturalOrderGrouper,
          help=__doc__,
          no_args_is_help=True,
          pretty_exceptions_show_locals=False,
          pretty_exceptions_enable=False,
      )
      
      
      # ----------------------------------------------------------------------
      this_dir = PathEx.EnsureDir(Path(__file__).parent)
      src_dir = PathEx.EnsureDir(this_dir / "src")
      package_dir = PathEx.EnsureDir(src_dir / "this_is_the_project_name")
      
      
      # ----------------------------------------------------------------------
      Black = RepoBuildTools.BlackFuncFactory(this_dir, app)
      
      Pylint = RepoBuildTools.PylintFuncFactory(
          package_dir,
          app,
          default_min_score=9.5,
      )
      
      Pytest = RepoBuildTools.PytestFuncFactory(
          this_dir,
          package_dir.name,
          app,
          default_min_coverage=90.0,
      )
      
      UpdateVersion = RepoBuildTools.UpdateVersionFuncFactory(
          src_dir,
          PathEx.EnsureFile(package_dir / "__init__.py"),
          app,
      )
      
      Package = RepoBuildTools.PackageFuncFactory(this_dir, app)
      Publish = RepoBuildTools.PublishFuncFactory(this_dir, app)
      
      BuildBinary = RepoBuildTools.BuildBinaryFuncFactory(
          this_dir,
          PathEx.EnsureFile(src_dir / "BuildBinary.py"),
          app,
      )
      
      CreateDockerImage = RepoBuildTools.CreateDockerImageFuncFactory(
          this_dir,
          app,
      )
      
      
      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
      if __name__ == "__main__":
          sys.exit(app())
  
    ''',
    'post_generation_actions.html': '''
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <meta http-equiv="X-UA-Compatible" content="ie=edge">
          <title>this_is_the_project_name Post Generation Actions</title>
        </head>
        <style>
          body {
            font-family: "Open Sans", sans-serif;
          }
      
          details {
            width: 100%;
            overflow: hidden; /* Keep this line to prevent an odd blue outline around the element in Safari. */
          }
      
          details summary {
            display: block;
          }
      
          details summary::-webkit-details-marker {
            display: none;
          }
      
          details summary span {
            position: relative;
            display: flex;
            align-items: center;
            padding-left: 1rem;
            background: #444;
            color: #fff;
            height: 4rem;
          }
      
          details summary span:hover {
            cursor: pointer;
          }
      
          details summary span::before {
            content: "â–º";
            font-size: 1rem;
            display: flex;
            align-items: center;
            margin-right: 0.5rem;
            transition: rotate 200ms 400ms ease-out;
          }
      
          details[open] summary span::before {
            rotate: 90deg;
            transition: rotate 200ms ease-out;
          }
      
          details summary span input {
            margin-right: 0.75rem;
          }
      
          div.details-content {
            box-sizing: border-box;
            width: 100%;
            max-height: 0;
            overflow: hidden;
            padding: 0 10px;
            border: 2px solid transparent;
            transition: max-height 400ms ease-out, border 0ms 400ms linear;
            background-color: rgba(0, 0, 0, 0.05);
            margin-bottom: 1rem;
          }
      
          details[open] + div.details-content {
            max-height: 800px; /* Set a max-height value enough to show all the content */
            border-color: #888;
            transition: max-height 400ms ease-out, border 0ms linear;
          }
      
          code {
            background-color: rgba(0, 0, 0, 0.10);
          }
      
        </style>
        <body>
          <h1>this_is_the_project_name Post Generation Actions</h1>
          <p>The following steps must be completed in the order listed now that your project has been generated.</p>
      
          <!-- [BEGIN] Before Repository Tool Instruction -->
          <!-- [END] Before Repository Tool Instruction -->
      
          
          <!-- [BEGIN] After Repository Tool Instruction -->
                  <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-pyproject.toml">Update pyproject.toml</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Python development tools, package dependencies, and packaging instructions are configured in <code>pyproject.toml</code>. Please visit <a href="https://packaging.python.org/en/latest/guides/writing-pyproject-toml/" target="_blank">this link</a> for more information on these files.</p>
      <p>Please search for and replace all <code>TODO:</code> comments in <code>pyproject.toml</code>.</p>
      
              </div>
      <!-- [END] After Repository Tool Instruction -->
      
          <details>
              <summary>
                  <span role="term"><input type="checkbox" id="delete-this-file">Delete this file</span>
              </summary>
          </details>
          <div role="definition" class="details-content">
              <p>After you have completed all the steps, you can delete this file.</p>
              <p>Now your project is ready to go!</p>
          </div>
      
          <script>
            document.querySelectorAll("details summary span input[type=checkbox]").forEach(
              function(checkbox) {
                var key = `${ location.href }-${ checkbox.id }`;
      
                if(window.localStorage.getItem(key) === "true")
                  checkbox.checked = true;
      
                this.addEventListener(
                  "change",
                  function() {
                    window.localStorage.setItem(key, checkbox.checked ? "true" : "false");
                  },
                );
              }
            );
          </script>
      
          <!-- TODO(copier-ProjectScaffolding): Decorate code elements with a "copy code" button that copies to the clipboard -->
        </body>
      </html>
  
    ''',
    'pyproject.toml': '''
      # https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
      
      [build-system]
      requires = ["setuptools >= 63.0"]
      build-backend = "setuptools.build_meta"
      
      # ----------------------------------------------------------------------
      # |
      # |  Project
      # |
      # ----------------------------------------------------------------------
      [project]
      name = "this_is_the_project_name"
      description = "<<project_description>>"
      
      license = { text = "MIT" }
      
      authors = [
          { name = "<<author_name>>", email = "<<author_email>>" },
      ]
      
      keywords = [
          # TODO: Add keywords specific to your project.
      ]
      
      # https://pypi.org/classifiers/
      classifiers = [
          # TODO: Add additional classifiers specific to your project.
          "License :: OSI Approved :: MIT License",
          "Operating System :: MacOS",
          "Operating System :: Microsoft :: Windows",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
      ]
      
      dependencies = [
          # TODO: Add additional package dependencies specific to your project.
          "typer ~= 0.9"
      ]
      
      dynamic = [
          "version",
      ]
      
      readme = "README.md"
      
      [project.optional-dependencies]
      dev = [
          "dbrownell_DevTools",
      ]
      
      package = [
          "build ~= 1.2",
          "cx_Freeze ~= 6.15",
          "twine ~= 5.1",
      ]
      
      [project.urls]
      Homepage = "TODO: Enter the homepage link for your project."
      Documentation = "TODO: Enter the documetnation link for your project."
      Repository = "TODO: Enter the repository link for your project."
      
      
      [project.scripts]
      this_is_the_project_name = "this_is_the_project_name:EntryPoint.app"
      
      # ----------------------------------------------------------------------
      # |
      # |  black
      # |
      # ----------------------------------------------------------------------
      [tool.black]
      line-length = 100
      
      # ----------------------------------------------------------------------
      # |
      # |  pylint
      # |
      # ----------------------------------------------------------------------
      [tool.pylint.basic]
      class-const-naming-style = "any"
      function-naming-style = "PascalCase"
      good-names = [
          "i",
          "j",
          "k",
          "ex",
          "Run",
          "_",
          "dm",                                   # added
          "f",                                    # added
      ]
      method-naming-style = "any"
      module-naming-style = "PascalCase"
      
      [tool.pylint.design]
      max-args = 10
      max-parents = 15
      
      [tool.pylint.main]
      ignore-paths = [
          # Note that the pylint vscode extension has trouble with wrapping these patterns in quotes
          # (which is required to parse the file correctly). Because of this, each pattern must be
          # converted to a glob pattern and specified in the pylint vscode settings as well.
          "^.+?Tests/.*$",
      ]
      
      [tool.pylint."messages control"]
      disable = [
          "raw-checker-failed",
          "bad-inline-option",
          "locally-disabled",
          "file-ignored",
          "suppressed-message",
          "useless-suppression",
          "deprecated-pragma",
          "use-symbolic-message-instead",
          "assignment-from-no-return",            # added
          "broad-except",                         # added
          "broad-exception-raised",               # added
          "cell-var-from-loop",                   # added
          "consider-using-f-string",              # added
          "import-outside-toplevel",              # added
          "line-too-long",                        # added
          "missing-function-docstring",           # added
          "subprocess-run-check",                 # added
          "super-with-arguments",                 # added
          "too-few-public-methods",               # added
          "unnecessary-lambda-assignment",        # added
          "unspecified-encoding",                 # added
      ]
      
      # ----------------------------------------------------------------------
      # |
      # |  pyright
      # |
      # ----------------------------------------------------------------------
      [tool.pyright]
      exclude = [
          "**/*Tests/*",
          "**/Generated/*",
      ]
      
      reportMissingImports = true
      reportMissingTypeStubs = false
      
      # ----------------------------------------------------------------------
      # |
      # |  pytest
      # |
      # ----------------------------------------------------------------------
      [tool.pytest.ini_options]
      python_files = [
          "**/*Test.py",
      ]
      
      # ----------------------------------------------------------------------
      # |
      # |  setuptools
      # |
      # ----------------------------------------------------------------------
      [tool.setuptools.dynamic]
      version = { attr = "this_is_the_project_name.__version__" }
      
      [tool.setuptools.packages.find]
      where = ["src"]
  
    ''',
    'src/AutoGitSemVer.yaml': '''
      # This file is used by AutoGitSemVer to configure the semantic version of the this_is_the_project_name package.
      # It indicates that AutoGitSemVer should only look at changes in this directory, its descendants, and files specified in
      # additional_dependencies when calculating the semantic version for the package.
      additional_dependencies:
        - "../pyproject.toml"
        - "../README.md"
  
    ''',
    'src/BuildBinary.py': '''
      """Builds the binary for this project."""
      
      import datetime
      import importlib
      import re
      
      from functools import cache
      from pathlib import Path
      
      from cx_Freeze import setup, Executable
      from dbrownell_Common import PathEx
      
      
      # ----------------------------------------------------------------------
      @cache
      def _GetName() -> str:
          return "this_is_the_project_name"
      
      
      # ----------------------------------------------------------------------
      @cache
      def _GetVersionAndDocstring() -> tuple[str, str]:
          mod = importlib.import_module(_GetName())
          return mod.__version__, mod.__doc__ or ""
      
      
      # ----------------------------------------------------------------------
      @cache
      def _GetEntryPoint() -> Path:
          return PathEx.EnsureFile(Path(__file__).parent / _GetName() / "EntryPoint.py")
      
      
      # ----------------------------------------------------------------------
      @cache
      def _GetCopyright() -> str:
          match = re.search(
              r"""(?#
              Copyright                           )Copyright(?#
              Mark [Optional]                     )(?P<mark>\s+\([cC]\))?(?#
              Year                                )\s+(?P<year>\d{4})(?#
              Year Range [Optional]               )(?:\s*-\s*\d{2,4})?(?#
              Suffix                              )(?P<suffix>.+)(?#
              End of line                         )$(?#
              )""",
              PathEx.EnsureFile(Path(__file__).parent.parent / "LICENSE.txt").read_text(),
              flags=re.MULTILINE,
          )
      
          current_year = datetime.datetime.now().year
      
          if not match:
              return f"Copyright {current_year} <<author_name>>"
      
          initial_year = int(match.group("year"))
      
          if current_year == initial_year:
              year_suffix = ""
          elif current_year // 100 != initial_year // 100:
              year_suffix = f"-{current_year}"
          else:
              year_suffix = f"-{current_year % 100}"
      
          return f"Copyright{match.group('mark')} {initial_year}{year_suffix} <<author_name>>"
      
      
      # ----------------------------------------------------------------------
      setup(
          name=_GetName(),
          version=_GetVersionAndDocstring()[0],
          description=_GetVersionAndDocstring()[1],
          executables=[
              Executable(
                  _GetEntryPoint(),
                  base="console",
                  copyright=_GetCopyright(),
                  # icon=<icon_filename>,
                  target_name=_GetName(),
                  # trademarks=<trademarks>,
              ),
          ],
          options={
              "build_exe": {
                  "excludes": [
                      "tcl",
                      "tkinter",
                  ],
                  "no_compress": False,
                  "optimize": 0,
                  # "packages": [],
                  # "include_files": [],
              },
          },
      )
  
    ''',
    'src/this_is_the_project_name/EntryPoint.py': '''
      """This file serves as an example of how to create scripts that can be invoked from the command line once the package is installed."""
      
      import sys
      
      import typer
      
      from typer.core import TyperGroup  # type: ignore [import-untyped]
      
      from this_is_the_project_name import Math, __version__
      
      
      # ----------------------------------------------------------------------
      class NaturalOrderGrouper(TyperGroup):
          # pylint: disable=missing-class-docstring
          # ----------------------------------------------------------------------
          def list_commands(self, *args, **kwargs):  # pylint: disable=unused-argument
              return self.commands.keys()
      
      
      # ----------------------------------------------------------------------
      app = typer.Typer(
          cls=NaturalOrderGrouper,
          help=__doc__,
          no_args_is_help=True,
          pretty_exceptions_show_locals=False,
          pretty_exceptions_enable=False,
      )
      
      
      # ----------------------------------------------------------------------
      @app.command("Add")
      def Add(
          x: int,
          y: int,
      ) -> None:
          """Adds 2 values."""
      
          sys.stdout.write(str(Math.Add(x, y)))
      
      
      # ----------------------------------------------------------------------
      @app.command("Sub")
      def Sub(
          x: int,
          y: int,
      ) -> None:
          """Subtracts 2 values."""
      
          sys.stdout.write(str(Math.Sub(x, y)))
      
      
      # ----------------------------------------------------------------------
      @app.command("Mult")
      def Mult(
          x: int,
          y: int,
      ) -> None:
          """Multiplies 2 values."""
      
          sys.stdout.write(str(Math.Mult(x, y)))
      
      
      # ----------------------------------------------------------------------
      @app.command("Div")
      def Div(
          x: int,
          y: int,
      ) -> None:
          """Divides 1 value by another."""
      
          sys.stdout.write(str(Math.Div(x, y)))
      
      
      # ----------------------------------------------------------------------
      @app.command("Version")
      def Version() -> None:
          """Prints the version of the package."""
      
          sys.stdout.write(__version__)
      
      
      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
      if __name__ == "__main__":
          app()  # pragma: no cover
  
    ''',
    'src/this_is_the_project_name/Math.py': '''
      """Basic math functions. This file illustrates how to create a python package that contains functions that can be invoked by other python code."""
      
      
      # ----------------------------------------------------------------------
      def Add(x, y):
          return x + y
      
      
      # ----------------------------------------------------------------------
      def Sub(x, y):
          return x - y
      
      
      # ----------------------------------------------------------------------
      def Mult(x, y):
          return x * y
      
      
      # ----------------------------------------------------------------------
      def Div(x, y):
          return x / y
  
    ''',
    'src/this_is_the_project_name/__init__.py': '''
      # pylint: disable=missing-module-docstring,invalid-name
      
      # Note that this value will be overwritten by calls to `python ../../Build.py update_version` based
      # on changes observed in the git repository. The default value below will be used until the value
      # here is explicitly updated by the Continuous Integration system.
      __version__ = "0.1.0"
      
      from .Math import Add, Sub, Mult, Div
  
    ''',
    'tests/EntryPoint_UnitTest.py': '''
      """Unit tests for EntryPoint.py"""
      
      from typer.testing import CliRunner
      
      from this_is_the_project_name import __version__
      from this_is_the_project_name.EntryPoint import app
      
      
      # ----------------------------------------------------------------------
      def test_Add():
          result = CliRunner().invoke(app, ["Add", "1", "20"])
          assert result.exit_code == 0
          assert result.stdout == "21"
      
      
      # ----------------------------------------------------------------------
      def test_Sub():
          result = CliRunner().invoke(app, ["Sub", "1", "20"])
          assert result.exit_code == 0
          assert result.stdout == "-19"
      
      
      # ----------------------------------------------------------------------
      def test_Mult():
          result = CliRunner().invoke(app, ["Mult", "2", "15"])
          assert result.exit_code == 0
          assert result.stdout == "30"
      
      
      # ----------------------------------------------------------------------
      def test_Div():
          result = CliRunner().invoke(app, ["Div", "6", "3"])
          assert result.exit_code == 0
          assert result.stdout == "2.0"
      
      
      # ----------------------------------------------------------------------
      def test_Version():
          result = CliRunner().invoke(app, ["Version"])
          assert result.exit_code == 0
          assert result.stdout == __version__
      
      
      # ----------------------------------------------------------------------
      def test_NoArgs():
          result = CliRunner().invoke(app, [])
          assert result.exit_code == 0
          assert "Add" in result.stdout
          assert "Sub" in result.stdout
          assert "Mult" in result.stdout
          assert "Div" in result.stdout
          assert "Version" in result.stdout
  
    ''',
    'tests/Math_UnitTest.py': '''
      """Unit tests for Math.py"""
      
      from this_is_the_project_name.Math import *
      
      
      # ----------------------------------------------------------------------
      def test_Add():
          assert Add(1, 20) == 21
      
      
      # ----------------------------------------------------------------------
      def test_Sub():
          assert Sub(1, 20) == -19
      
      
      # ----------------------------------------------------------------------
      def test_Mult():
          assert Mult(2, 15) == 30
      
      
      # ----------------------------------------------------------------------
      def test_Div():
          assert Div(6, 3) == 2
  
    ''',
  })
# ---
# name: test_All[04-False_git_None_None]
  dict({
    '.gitignore': '''
      post_generation_actions.html
  
    ''',
    'post_generation_actions.html': '''
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <meta http-equiv="X-UA-Compatible" content="ie=edge">
          <title>this_is_the_project_name Post Generation Actions</title>
        </head>
        <style>
          body {
            font-family: "Open Sans", sans-serif;
          }
      
          details {
            width: 100%;
            overflow: hidden; /* Keep this line to prevent an odd blue outline around the element in Safari. */
          }
      
          details summary {
            display: block;
          }
      
          details summary::-webkit-details-marker {
            display: none;
          }
      
          details summary span {
            position: relative;
            display: flex;
            align-items: center;
            padding-left: 1rem;
            background: #444;
            color: #fff;
            height: 4rem;
          }
      
          details summary span:hover {
            cursor: pointer;
          }
      
          details summary span::before {
            content: "â–º";
            font-size: 1rem;
            display: flex;
            align-items: center;
            margin-right: 0.5rem;
            transition: rotate 200ms 400ms ease-out;
          }
      
          details[open] summary span::before {
            rotate: 90deg;
            transition: rotate 200ms ease-out;
          }
      
          details summary span input {
            margin-right: 0.75rem;
          }
      
          div.details-content {
            box-sizing: border-box;
            width: 100%;
            max-height: 0;
            overflow: hidden;
            padding: 0 10px;
            border: 2px solid transparent;
            transition: max-height 400ms ease-out, border 0ms 400ms linear;
            background-color: rgba(0, 0, 0, 0.05);
            margin-bottom: 1rem;
          }
      
          details[open] + div.details-content {
            max-height: 800px; /* Set a max-height value enough to show all the content */
            border-color: #888;
            transition: max-height 400ms ease-out, border 0ms linear;
          }
      
          code {
            background-color: rgba(0, 0, 0, 0.10);
          }
      
        </style>
        <body>
          <h1>this_is_the_project_name Post Generation Actions</h1>
          <p>The following steps must be completed in the order listed now that your project has been generated.</p>
      
          
                  <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="initialize-the-git-repository">Initialize the git repository</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>In this step, we will commit the files generated in git and push the changes.</p>
      
      <p>Open a terminal window, navigate to your repository, and run the following commands:</p>
      
      1. <code>git add --all</code><br/>
      2. <code>git commit -m "ðŸŽ‰ Initial commit"</code><br/>
      3. <code>git push</code><br/>
      </p>
      
              </div>
      
          <!-- [BEGIN] After Repository Tool Instruction -->
                  <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-development.md">Update DEVELOPMENT.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>DEVELOPMENT.md</code>.</p>
      
              </div>
      <!-- [END] After Repository Tool Instruction -->
      
          <details>
              <summary>
                  <span role="term"><input type="checkbox" id="delete-this-file">Delete this file</span>
              </summary>
          </details>
          <div role="definition" class="details-content">
              <p>After you have completed all the steps, you can delete this file.</p>
              <p>Now your project is ready to go!</p>
          </div>
      
          <script>
            document.querySelectorAll("details summary span input[type=checkbox]").forEach(
              function(checkbox) {
                var key = `${ location.href }-${ checkbox.id }`;
      
                if(window.localStorage.getItem(key) === "true")
                  checkbox.checked = true;
      
                this.addEventListener(
                  "change",
                  function() {
                    window.localStorage.setItem(key, checkbox.checked ? "true" : "false");
                  },
                );
              }
            );
          </script>
      
          <!-- TODO(copier-ProjectScaffolding): Decorate code elements with a "copy code" button that copies to the clipboard -->
        </body>
      </html>
  
    ''',
  })
# ---
# name: test_All[05-False_git_None_PythonExecutionEnvironment]
  dict({
    '.gitignore': '''
      post_generation_actions.html
      
      Activate*.cmd
      Activate*.sh
      Deactivate*.cmd
      Deactivate*.sh
      
      **/__pycache__/**
      **/Generated/**
  
    ''',
    'Bootstrap.cmd': '''
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  This script downloads and invokes BoostrapImpl.cmd from the PythonBootstrapper
      @REM |  repository (https://github.com/davidbrownell/PythonBootstrapper).
      @REM |
      @REM |  Arguments:
      @REM |
      @REM |      --debug                         Display additional debugging information.
      @REM |
      @REM |      --force                         Ensure that a new python environment is installed, even if it already exists.
      @REM |
      @REM |      --python-version <version>      Specify the python version to install; the default python version is installed if not specified.
      @REM |
      @REM |      --bootstrap-branch <branch>     Specify the branch of the PythonBootstrapper repository to use when downloading BootstrapImpl; "main" is used if not specified.
      @REM |
      @REM ----------------------------------------------------------------------
      @setlocal EnableDelayedExpansion
      @pushd %~dp0
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Parse and Process Arguments
      @REM |
      @REM ----------------------------------------------------------------------
      @set _BOOTSTRAP_BRANCH=main
      @set _COMMAND_LINE_ARGS=
      
      :ParseArgs
      @if '%1' EQU '' @goto :ParseArgs_End
      
      @set ARG=%1
      @set ARG=%ARG:"=%
      
      @if "%ARG%" NEQ "--bootstrap-branch" @goto :ParseArgs_BootstrapBranchEnd
      
      @REM Extract the bootstrap branch
      @shift /1
      
      @set ARG=%1
      @set ARG=%ARG:"=%
      
      @set _BOOTSTRAP_BRANCH=%ARG%
      @goto :ParseArgs_Next
      
      :ParseArgs_BootstrapBranchEnd
      @set _COMMAND_LINE_ARGS=%_COMMAND_LINE_ARGS% %1
      
      :ParseArgs_Next
      @shift /1
      @goto :ParseArgs
      
      :ParseArgs_End
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Download BootstrapImpl.cmd
      @REM |
      @REM ----------------------------------------------------------------------
      @echo Downloading Bootstrap code...
      
      @set _BOOTSTRAPIMPL_URL=https://raw.githubusercontent.com/davidbrownell/PythonBootstrapper/%_BOOTSTRAP_BRANCH%/src/BootstrapImpl.cmd
      
      @call :_CreateTempFileName
      
      @curl --header "Cache-Control: no-cache, no-store" --header "Pragma: no-cache" --location %_BOOTSTRAPIMPL_URL% --output BootstrapImpl.cmd --no-progress-meter --fail-with-body > "%_BOOTSTRAP_TEMP_FILENAME%" 2>&1
      @set _ERRORLEVEL=%ERRORLEVEL%
      
      @if %_ERRORLEVEL% NEQ 0 (
          @echo [1ADownloading Bootstrap code...[31m[1mFAILED[0m ^(%_BOOTSTRAPIMPL_URL%^).
          @echo.
      
          @type "%_BOOTSTRAP_TEMP_FILENAME%"
          @goto :Exit
      )
      
      @call :_DeleteTempFile
      @echo [1ADownloading Bootstrap code...[32m[1mDONE[0m.
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Invoke BootstrapImpl.cmd
      @REM |
      @REM ----------------------------------------------------------------------
      @call BootstrapImpl.cmd %_COMMAND_LINE_ARGS%
      @set _ERRORLEVEL=%ERRORLEVEL%
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Exit
      @REM |
      @REM ----------------------------------------------------------------------
      :Exit
      @if exist BootstrapImpl.cmd del BootstrapImpl.cmd
      @call :_DeleteTempFile
      
      @popd
      
      @endlocal & @exit /B %_ERRORLEVEL%
      
      @REM ----------------------------------------------------------------------
      @REM ----------------------------------------------------------------------
      @REM ----------------------------------------------------------------------
      :_CreateTempFileName
      @set _BOOTSTRAP_TEMP_FILENAME=%CD%\Bootstrap-!RANDOM!-!Time:~6,5!
      @goto :EOF
      
      @REM ----------------------------------------------------------------------
      :_DeleteTempFile
      @if "%_BOOTSTRAP_TEMP_FILENAME%" NEQ "" (
          @if exist "%_BOOTSTRAP_TEMP_FILENAME%" (
              @del "%_BOOTSTRAP_TEMP_FILENAME%"
          )
      )
      @goto :EOF
  
    ''',
    'Bootstrap.sh': '''
      #!/usr/bin/env bash
      # ----------------------------------------------------------------------
      # |
      # |  This script downloads and invokes BootstrapImpl.sh from the PythonBootstrapper
      # |  repository (https://github.com/davidbrownell/PythonBootstrapper).
      # |
      # |  Arguments:
      # |
      # |      --debug                         Display additional debugging information.
      # |
      # |      --force                         Ensure that a new python environment is installed, even if it already exists.
      # |
      # |      --python-version <version>      Specify the python version to install; the default python version is installed if not specified.
      # |
      # |      --bootstrap-branch <branch>     Specify the branch of the PythonBootstrapper repository to use when downloading BootstrapImpl; "main" is used if not specified.
      # |
      # ----------------------------------------------------------------------
      set +v # Continue on errors
      
      this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
      pushd "${this_dir}" > /dev/null || exit
      
      # ----------------------------------------------------------------------
      # |
      # |  Parse and Process Arguments
      # |
      # ----------------------------------------------------------------------
      bootstrap_branch=main
      command_line_args=()
      
      while [[ $# -gt 0 ]]; do
          if [[ "$1" == "--bootstrap-branch" ]]; then
              bootstrap_branch=$2
              shift
          else
              command_line_args+=("$1")
          fi
      
          shift
      done
      
      # ----------------------------------------------------------------------
      # |
      # |  Download BootstrapImpl.sh
      # |
      # ----------------------------------------------------------------------
      echo "Downloading Bootstrap code..."
      
      bootstrap_url=https://raw.githubusercontent.com/davidbrownell/PythonBootstrapper/${bootstrap_branch}/src/BootstrapImpl.sh
      
      temp_script_name=$(mktemp Bootstrap.XXXXXX)
      
      curl --header "Cache-Control: no-cache, no-store" --header "Pragma: no-cache" --location ${bootstrap_url} --output BootstrapImpl.sh --no-progress-meter --fail-with-body > "${temp_script_name}" 2>&1
      error=$?
      
      if [[ ${error} != 0 ]]; then
          echo "[1ADownloading Bootstrap code...[31m[1mFAILED[0m (${bootstrap_url})."
          echo ""
      
          cat "${temp_script_name}"
          rm "${temp_script_name}"
      
          exit ${error}
      fi
      
      chmod u+x BootstrapImpl.sh
      echo "[1ADownloading Bootstrap code...[32m[1mDONE[0m."
      
      # ----------------------------------------------------------------------
      # |
      # |  Invoke BootstrapImpl.sh
      # |
      # ----------------------------------------------------------------------
      ./BootstrapImpl.sh "${command_line_args[@]}"
      error=$?
      
      # ----------------------------------------------------------------------
      # |
      # |  Exit
      # |
      # ----------------------------------------------------------------------
      rm "BootstrapImpl.sh"
      rm "${temp_script_name}"
      
      exit ${error}
  
    ''',
    'BootstrapEpilog.py': '''
      # pylint: disable=missing-module-docstring
      
      import subprocess
      import sys
      
      from pathlib import Path
      
      
      # Parse the arguments
      no_cache = False
      
      display_flags: list[str] = []
      
      # First arg is the script name, second arg is the name of the shell script to write to
      for arg in sys.argv[2:]:
          if arg == "--no-cache":
              no_cache = True
          else:
              raise Exception("'{}' is not a recognized argument.".format(arg))
      
      subprocess.run(
          "pip install --disable-pip-version-check {} --requirement requirements.txt".format(
              "--no-cache-dir" if no_cache else "",
          ),
          check=True,
          shell=True,
          cwd=Path(__file__).parent,
      )
  
    ''',
    'post_generation_actions.html': '''
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <meta http-equiv="X-UA-Compatible" content="ie=edge">
          <title>this_is_the_project_name Post Generation Actions</title>
        </head>
        <style>
          body {
            font-family: "Open Sans", sans-serif;
          }
      
          details {
            width: 100%;
            overflow: hidden; /* Keep this line to prevent an odd blue outline around the element in Safari. */
          }
      
          details summary {
            display: block;
          }
      
          details summary::-webkit-details-marker {
            display: none;
          }
      
          details summary span {
            position: relative;
            display: flex;
            align-items: center;
            padding-left: 1rem;
            background: #444;
            color: #fff;
            height: 4rem;
          }
      
          details summary span:hover {
            cursor: pointer;
          }
      
          details summary span::before {
            content: "â–º";
            font-size: 1rem;
            display: flex;
            align-items: center;
            margin-right: 0.5rem;
            transition: rotate 200ms 400ms ease-out;
          }
      
          details[open] summary span::before {
            rotate: 90deg;
            transition: rotate 200ms ease-out;
          }
      
          details summary span input {
            margin-right: 0.75rem;
          }
      
          div.details-content {
            box-sizing: border-box;
            width: 100%;
            max-height: 0;
            overflow: hidden;
            padding: 0 10px;
            border: 2px solid transparent;
            transition: max-height 400ms ease-out, border 0ms 400ms linear;
            background-color: rgba(0, 0, 0, 0.05);
            margin-bottom: 1rem;
          }
      
          details[open] + div.details-content {
            max-height: 800px; /* Set a max-height value enough to show all the content */
            border-color: #888;
            transition: max-height 400ms ease-out, border 0ms linear;
          }
      
          code {
            background-color: rgba(0, 0, 0, 0.10);
          }
      
        </style>
        <body>
          <h1>this_is_the_project_name Post Generation Actions</h1>
          <p>The following steps must be completed in the order listed now that your project has been generated.</p>
      
          
                  <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="initialize-the-git-repository">Initialize the git repository</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>In this step, we will commit the files generated in git and push the changes.</p>
      
      <p>Open a terminal window, navigate to your repository, and run the following commands:</p>
      
      1. <code>git add --all</code><br/>
      2. <code>git commit -m "ðŸŽ‰ Initial commit"</code><br/>
      3. <code>git push</code><br/>
      </p>
      
              </div>
      
          <!-- [BEGIN] After Repository Tool Instruction -->
                  <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-requirements.txt">Update requirements.txt</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Python package dependencies can be added to <code>requirements.txt</code>. These packages will be automatically installed when the environment is <a href="https://github.com/davidbrownell/PythonBootstrapper" target="_blank">bootstrapped</a>.</p>
      <p>Please visit <a href="https://pip.pypa.io/en/stable/reference/requirements-file-format/" target="_blank">this link</a> for more information on requirements files and how they can be used.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-development.md">Update DEVELOPMENT.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>DEVELOPMENT.md</code>.</p>
      
              </div>
      <!-- [END] After Repository Tool Instruction -->
      
          <details>
              <summary>
                  <span role="term"><input type="checkbox" id="delete-this-file">Delete this file</span>
              </summary>
          </details>
          <div role="definition" class="details-content">
              <p>After you have completed all the steps, you can delete this file.</p>
              <p>Now your project is ready to go!</p>
          </div>
      
          <script>
            document.querySelectorAll("details summary span input[type=checkbox]").forEach(
              function(checkbox) {
                var key = `${ location.href }-${ checkbox.id }`;
      
                if(window.localStorage.getItem(key) === "true")
                  checkbox.checked = true;
      
                this.addEventListener(
                  "change",
                  function() {
                    window.localStorage.setItem(key, checkbox.checked ? "true" : "false");
                  },
                );
              }
            );
          </script>
      
          <!-- TODO(copier-ProjectScaffolding): Decorate code elements with a "copy code" button that copies to the clipboard -->
        </body>
      </html>
  
    ''',
    'requirements.txt': '''
      # TODO: Add your custom package requirements here
  
    ''',
  })
# ---
# name: test_All[06-False_git_None_PythonPackage]
  dict({
    '.gitignore': '''
      post_generation_actions.html
      
      Activate*.cmd
      Activate*.sh
      Deactivate*.cmd
      Deactivate*.sh
      
      **/__pycache__/**
      **/Generated/**
      
      **/.coverage
      **/lcov.info
      **/.vscode
      
      build/**
      dist/**
      src/this_is_the_project_name.egg-info/**
  
    ''',
    'ActivateEpilog.py': '''
      import json
      import os
      import sys
      
      from pathlib import Path
      
      with (Path(os.environ["PYTHON_BOOTSTRAPPER_GENERATED_DIR"]) / "bootstrap_flags.json").open() as f:
          flags = json.load(f)
      
      if flags:
          sys.stdout.write("\nBootstrapped with {}.\n".format(", ".join(f"'{flag}'" for flag in flags)))
  
    ''',
    'Bootstrap.cmd': '''
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  This script downloads and invokes BoostrapImpl.cmd from the PythonBootstrapper
      @REM |  repository (https://github.com/davidbrownell/PythonBootstrapper).
      @REM |
      @REM |  Arguments:
      @REM |
      @REM |      --debug                         Display additional debugging information.
      @REM |
      @REM |      --force                         Ensure that a new python environment is installed, even if it already exists.
      @REM |
      @REM |      --python-version <version>      Specify the python version to install; the default python version is installed if not specified.
      @REM |
      @REM |      --bootstrap-branch <branch>     Specify the branch of the PythonBootstrapper repository to use when downloading BootstrapImpl; "main" is used if not specified.
      @REM |
      @REM ----------------------------------------------------------------------
      @setlocal EnableDelayedExpansion
      @pushd %~dp0
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Parse and Process Arguments
      @REM |
      @REM ----------------------------------------------------------------------
      @set _BOOTSTRAP_BRANCH=main
      @set _COMMAND_LINE_ARGS=
      
      :ParseArgs
      @if '%1' EQU '' @goto :ParseArgs_End
      
      @set ARG=%1
      @set ARG=%ARG:"=%
      
      @if "%ARG%" NEQ "--bootstrap-branch" @goto :ParseArgs_BootstrapBranchEnd
      
      @REM Extract the bootstrap branch
      @shift /1
      
      @set ARG=%1
      @set ARG=%ARG:"=%
      
      @set _BOOTSTRAP_BRANCH=%ARG%
      @goto :ParseArgs_Next
      
      :ParseArgs_BootstrapBranchEnd
      @set _COMMAND_LINE_ARGS=%_COMMAND_LINE_ARGS% %1
      
      :ParseArgs_Next
      @shift /1
      @goto :ParseArgs
      
      :ParseArgs_End
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Download BootstrapImpl.cmd
      @REM |
      @REM ----------------------------------------------------------------------
      @echo Downloading Bootstrap code...
      
      @set _BOOTSTRAPIMPL_URL=https://raw.githubusercontent.com/davidbrownell/PythonBootstrapper/%_BOOTSTRAP_BRANCH%/src/BootstrapImpl.cmd
      
      @call :_CreateTempFileName
      
      @curl --header "Cache-Control: no-cache, no-store" --header "Pragma: no-cache" --location %_BOOTSTRAPIMPL_URL% --output BootstrapImpl.cmd --no-progress-meter --fail-with-body > "%_BOOTSTRAP_TEMP_FILENAME%" 2>&1
      @set _ERRORLEVEL=%ERRORLEVEL%
      
      @if %_ERRORLEVEL% NEQ 0 (
          @echo [1ADownloading Bootstrap code...[31m[1mFAILED[0m ^(%_BOOTSTRAPIMPL_URL%^).
          @echo.
      
          @type "%_BOOTSTRAP_TEMP_FILENAME%"
          @goto :Exit
      )
      
      @call :_DeleteTempFile
      @echo [1ADownloading Bootstrap code...[32m[1mDONE[0m.
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Invoke BootstrapImpl.cmd
      @REM |
      @REM ----------------------------------------------------------------------
      @call BootstrapImpl.cmd %_COMMAND_LINE_ARGS%
      @set _ERRORLEVEL=%ERRORLEVEL%
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Exit
      @REM |
      @REM ----------------------------------------------------------------------
      :Exit
      @if exist BootstrapImpl.cmd del BootstrapImpl.cmd
      @call :_DeleteTempFile
      
      @popd
      
      @endlocal & @exit /B %_ERRORLEVEL%
      
      @REM ----------------------------------------------------------------------
      @REM ----------------------------------------------------------------------
      @REM ----------------------------------------------------------------------
      :_CreateTempFileName
      @set _BOOTSTRAP_TEMP_FILENAME=%CD%\Bootstrap-!RANDOM!-!Time:~6,5!
      @goto :EOF
      
      @REM ----------------------------------------------------------------------
      :_DeleteTempFile
      @if "%_BOOTSTRAP_TEMP_FILENAME%" NEQ "" (
          @if exist "%_BOOTSTRAP_TEMP_FILENAME%" (
              @del "%_BOOTSTRAP_TEMP_FILENAME%"
          )
      )
      @goto :EOF
  
    ''',
    'Bootstrap.sh': '''
      #!/usr/bin/env bash
      # ----------------------------------------------------------------------
      # |
      # |  This script downloads and invokes BootstrapImpl.sh from the PythonBootstrapper
      # |  repository (https://github.com/davidbrownell/PythonBootstrapper).
      # |
      # |  Arguments:
      # |
      # |      --debug                         Display additional debugging information.
      # |
      # |      --force                         Ensure that a new python environment is installed, even if it already exists.
      # |
      # |      --python-version <version>      Specify the python version to install; the default python version is installed if not specified.
      # |
      # |      --bootstrap-branch <branch>     Specify the branch of the PythonBootstrapper repository to use when downloading BootstrapImpl; "main" is used if not specified.
      # |
      # ----------------------------------------------------------------------
      set +v # Continue on errors
      
      this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
      pushd "${this_dir}" > /dev/null || exit
      
      # ----------------------------------------------------------------------
      # |
      # |  Parse and Process Arguments
      # |
      # ----------------------------------------------------------------------
      bootstrap_branch=main
      command_line_args=()
      
      while [[ $# -gt 0 ]]; do
          if [[ "$1" == "--bootstrap-branch" ]]; then
              bootstrap_branch=$2
              shift
          else
              command_line_args+=("$1")
          fi
      
          shift
      done
      
      # ----------------------------------------------------------------------
      # |
      # |  Download BootstrapImpl.sh
      # |
      # ----------------------------------------------------------------------
      echo "Downloading Bootstrap code..."
      
      bootstrap_url=https://raw.githubusercontent.com/davidbrownell/PythonBootstrapper/${bootstrap_branch}/src/BootstrapImpl.sh
      
      temp_script_name=$(mktemp Bootstrap.XXXXXX)
      
      curl --header "Cache-Control: no-cache, no-store" --header "Pragma: no-cache" --location ${bootstrap_url} --output BootstrapImpl.sh --no-progress-meter --fail-with-body > "${temp_script_name}" 2>&1
      error=$?
      
      if [[ ${error} != 0 ]]; then
          echo "[1ADownloading Bootstrap code...[31m[1mFAILED[0m (${bootstrap_url})."
          echo ""
      
          cat "${temp_script_name}"
          rm "${temp_script_name}"
      
          exit ${error}
      fi
      
      chmod u+x BootstrapImpl.sh
      echo "[1ADownloading Bootstrap code...[32m[1mDONE[0m."
      
      # ----------------------------------------------------------------------
      # |
      # |  Invoke BootstrapImpl.sh
      # |
      # ----------------------------------------------------------------------
      ./BootstrapImpl.sh "${command_line_args[@]}"
      error=$?
      
      # ----------------------------------------------------------------------
      # |
      # |  Exit
      # |
      # ----------------------------------------------------------------------
      rm "BootstrapImpl.sh"
      rm "${temp_script_name}"
      
      exit ${error}
  
    ''',
    'BootstrapEpilog.py': '''
      # pylint: disable=missing-module-docstring
      
      import os
      import subprocess
      import sys
      
      from pathlib import Path
      
      
      # Parse the arguments
      is_debug = False
      is_force = False
      is_verbose = False
      is_package = False
      no_cache = False
      
      display_flags: list[str] = []
      
      # First arg is the script name, second arg is the name of the shell script to write to
      for arg in sys.argv[2:]:
          if arg == "--debug":
              is_debug = True
          elif arg == "--force":
              is_force = True
          elif arg == "--verbose":
              is_verbose = True
          elif arg == "--package":
              is_package = True
              display_flags.append("package")
          elif arg == "--no-cache":
              no_cache = True
          else:
              raise Exception("'{}' is not a recognized argument.".format(arg))
      
      if is_debug:
          is_verbose = True
      
      subprocess.run(
          'pip install --disable-pip-version-check {} --editable ".[dev{}]"'.format(
              "--no-cache-dir" if no_cache else "",
              ", package" if is_package else "",
          ),
          check=True,
          shell=True,
      )
      
      with (
          Path(__file__).parent / os.environ["PYTHON_BOOTSTRAPPER_GENERATED_DIR"] / "bootstrap_flags.json"
      ).open("w") as f:
          f.write("[{}]".format(", ".join(f'"{flag}"' for flag in display_flags)))
  
    ''',
    'Build.py': '''
      """Build tasks for this python project."""
      
      import sys
      
      from pathlib import Path
      
      import typer
      
      from dbrownell_Common import PathEx
      from dbrownell_DevTools.RepoBuildTools import Python as RepoBuildTools
      from typer.core import TyperGroup
      
      
      # ----------------------------------------------------------------------
      class NaturalOrderGrouper(TyperGroup):
          # pylint: disable=missing-class-docstring
          # ----------------------------------------------------------------------
          def list_commands(self, *args, **kwargs):  # pylint: disable=unused-argument
              return self.commands.keys()
      
      
      # ----------------------------------------------------------------------
      app = typer.Typer(
          cls=NaturalOrderGrouper,
          help=__doc__,
          no_args_is_help=True,
          pretty_exceptions_show_locals=False,
          pretty_exceptions_enable=False,
      )
      
      
      # ----------------------------------------------------------------------
      this_dir = PathEx.EnsureDir(Path(__file__).parent)
      src_dir = PathEx.EnsureDir(this_dir / "src")
      package_dir = PathEx.EnsureDir(src_dir / "this_is_the_project_name")
      
      
      # ----------------------------------------------------------------------
      Black = RepoBuildTools.BlackFuncFactory(this_dir, app)
      
      Pylint = RepoBuildTools.PylintFuncFactory(
          package_dir,
          app,
          default_min_score=9.5,
      )
      
      Pytest = RepoBuildTools.PytestFuncFactory(
          this_dir,
          package_dir.name,
          app,
          default_min_coverage=90.0,
      )
      
      UpdateVersion = RepoBuildTools.UpdateVersionFuncFactory(
          src_dir,
          PathEx.EnsureFile(package_dir / "__init__.py"),
          app,
      )
      
      Package = RepoBuildTools.PackageFuncFactory(this_dir, app)
      Publish = RepoBuildTools.PublishFuncFactory(this_dir, app)
      
      BuildBinary = RepoBuildTools.BuildBinaryFuncFactory(
          this_dir,
          PathEx.EnsureFile(src_dir / "BuildBinary.py"),
          app,
      )
      
      CreateDockerImage = RepoBuildTools.CreateDockerImageFuncFactory(
          this_dir,
          app,
      )
      
      
      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
      if __name__ == "__main__":
          sys.exit(app())
  
    ''',
    'post_generation_actions.html': '''
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <meta http-equiv="X-UA-Compatible" content="ie=edge">
          <title>this_is_the_project_name Post Generation Actions</title>
        </head>
        <style>
          body {
            font-family: "Open Sans", sans-serif;
          }
      
          details {
            width: 100%;
            overflow: hidden; /* Keep this line to prevent an odd blue outline around the element in Safari. */
          }
      
          details summary {
            display: block;
          }
      
          details summary::-webkit-details-marker {
            display: none;
          }
      
          details summary span {
            position: relative;
            display: flex;
            align-items: center;
            padding-left: 1rem;
            background: #444;
            color: #fff;
            height: 4rem;
          }
      
          details summary span:hover {
            cursor: pointer;
          }
      
          details summary span::before {
            content: "â–º";
            font-size: 1rem;
            display: flex;
            align-items: center;
            margin-right: 0.5rem;
            transition: rotate 200ms 400ms ease-out;
          }
      
          details[open] summary span::before {
            rotate: 90deg;
            transition: rotate 200ms ease-out;
          }
      
          details summary span input {
            margin-right: 0.75rem;
          }
      
          div.details-content {
            box-sizing: border-box;
            width: 100%;
            max-height: 0;
            overflow: hidden;
            padding: 0 10px;
            border: 2px solid transparent;
            transition: max-height 400ms ease-out, border 0ms 400ms linear;
            background-color: rgba(0, 0, 0, 0.05);
            margin-bottom: 1rem;
          }
      
          details[open] + div.details-content {
            max-height: 800px; /* Set a max-height value enough to show all the content */
            border-color: #888;
            transition: max-height 400ms ease-out, border 0ms linear;
          }
      
          code {
            background-color: rgba(0, 0, 0, 0.10);
          }
      
        </style>
        <body>
          <h1>this_is_the_project_name Post Generation Actions</h1>
          <p>The following steps must be completed in the order listed now that your project has been generated.</p>
      
          <!-- [BEGIN] Before Repository Tool Instruction -->
          <!-- [END] Before Repository Tool Instruction -->
      
                  <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="initialize-the-git-repository">Initialize the git repository</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>In this step, we will commit the files generated in git and push the changes.</p>
      
      <p>Open a terminal window, navigate to your repository, and run the following commands:</p>
      
      1. <code>git add --all</code><br/>
      2. <code>git commit -m "ðŸŽ‰ Initial commit"</code><br/>
      3. <code>git push</code><br/>
      </p>
      
              </div>
      
          <!-- [BEGIN] After Repository Tool Instruction -->
                  <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-pyproject.toml">Update pyproject.toml</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Python development tools, package dependencies, and packaging instructions are configured in <code>pyproject.toml</code>. Please visit <a href="https://packaging.python.org/en/latest/guides/writing-pyproject-toml/" target="_blank">this link</a> for more information on these files.</p>
      <p>Please search for and replace all <code>TODO:</code> comments in <code>pyproject.toml</code>.</p>
      
              </div>
      <!-- [END] After Repository Tool Instruction -->
      
          <details>
              <summary>
                  <span role="term"><input type="checkbox" id="delete-this-file">Delete this file</span>
              </summary>
          </details>
          <div role="definition" class="details-content">
              <p>After you have completed all the steps, you can delete this file.</p>
              <p>Now your project is ready to go!</p>
          </div>
      
          <script>
            document.querySelectorAll("details summary span input[type=checkbox]").forEach(
              function(checkbox) {
                var key = `${ location.href }-${ checkbox.id }`;
      
                if(window.localStorage.getItem(key) === "true")
                  checkbox.checked = true;
      
                this.addEventListener(
                  "change",
                  function() {
                    window.localStorage.setItem(key, checkbox.checked ? "true" : "false");
                  },
                );
              }
            );
          </script>
      
          <!-- TODO(copier-ProjectScaffolding): Decorate code elements with a "copy code" button that copies to the clipboard -->
        </body>
      </html>
  
    ''',
    'pyproject.toml': '''
      # https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
      
      [build-system]
      requires = ["setuptools >= 63.0"]
      build-backend = "setuptools.build_meta"
      
      # ----------------------------------------------------------------------
      # |
      # |  Project
      # |
      # ----------------------------------------------------------------------
      [project]
      name = "this_is_the_project_name"
      description = "<<project_description>>"
      
      license = { text = "MIT" }
      
      authors = [
          { name = "<<author_name>>", email = "<<author_email>>" },
      ]
      
      keywords = [
          # TODO: Add keywords specific to your project.
      ]
      
      # https://pypi.org/classifiers/
      classifiers = [
          # TODO: Add additional classifiers specific to your project.
          "License :: OSI Approved :: MIT License",
          "Operating System :: MacOS",
          "Operating System :: Microsoft :: Windows",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
      ]
      
      dependencies = [
          # TODO: Add additional package dependencies specific to your project.
          "typer ~= 0.9"
      ]
      
      dynamic = [
          "version",
      ]
      
      readme = "README.md"
      
      [project.optional-dependencies]
      dev = [
          "dbrownell_DevTools",
      ]
      
      package = [
          "build ~= 1.2",
          "cx_Freeze ~= 6.15",
          "twine ~= 5.1",
      ]
      
      [project.urls]
      Homepage = "TODO: Enter the homepage link for your project."
      Documentation = "TODO: Enter the documetnation link for your project."
      Repository = "TODO: Enter the repository link for your project."
      
      
      [project.scripts]
      this_is_the_project_name = "this_is_the_project_name:EntryPoint.app"
      
      # ----------------------------------------------------------------------
      # |
      # |  black
      # |
      # ----------------------------------------------------------------------
      [tool.black]
      line-length = 100
      
      # ----------------------------------------------------------------------
      # |
      # |  pylint
      # |
      # ----------------------------------------------------------------------
      [tool.pylint.basic]
      class-const-naming-style = "any"
      function-naming-style = "PascalCase"
      good-names = [
          "i",
          "j",
          "k",
          "ex",
          "Run",
          "_",
          "dm",                                   # added
          "f",                                    # added
      ]
      method-naming-style = "any"
      module-naming-style = "PascalCase"
      
      [tool.pylint.design]
      max-args = 10
      max-parents = 15
      
      [tool.pylint.main]
      ignore-paths = [
          # Note that the pylint vscode extension has trouble with wrapping these patterns in quotes
          # (which is required to parse the file correctly). Because of this, each pattern must be
          # converted to a glob pattern and specified in the pylint vscode settings as well.
          "^.+?Tests/.*$",
      ]
      
      [tool.pylint."messages control"]
      disable = [
          "raw-checker-failed",
          "bad-inline-option",
          "locally-disabled",
          "file-ignored",
          "suppressed-message",
          "useless-suppression",
          "deprecated-pragma",
          "use-symbolic-message-instead",
          "assignment-from-no-return",            # added
          "broad-except",                         # added
          "broad-exception-raised",               # added
          "cell-var-from-loop",                   # added
          "consider-using-f-string",              # added
          "import-outside-toplevel",              # added
          "line-too-long",                        # added
          "missing-function-docstring",           # added
          "subprocess-run-check",                 # added
          "super-with-arguments",                 # added
          "too-few-public-methods",               # added
          "unnecessary-lambda-assignment",        # added
          "unspecified-encoding",                 # added
      ]
      
      # ----------------------------------------------------------------------
      # |
      # |  pyright
      # |
      # ----------------------------------------------------------------------
      [tool.pyright]
      exclude = [
          "**/*Tests/*",
          "**/Generated/*",
      ]
      
      reportMissingImports = true
      reportMissingTypeStubs = false
      
      # ----------------------------------------------------------------------
      # |
      # |  pytest
      # |
      # ----------------------------------------------------------------------
      [tool.pytest.ini_options]
      python_files = [
          "**/*Test.py",
      ]
      
      # ----------------------------------------------------------------------
      # |
      # |  setuptools
      # |
      # ----------------------------------------------------------------------
      [tool.setuptools.dynamic]
      version = { attr = "this_is_the_project_name.__version__" }
      
      [tool.setuptools.packages.find]
      where = ["src"]
  
    ''',
    'src/AutoGitSemVer.yaml': '''
      # This file is used by AutoGitSemVer to configure the semantic version of the this_is_the_project_name package.
      # It indicates that AutoGitSemVer should only look at changes in this directory, its descendants, and files specified in
      # additional_dependencies when calculating the semantic version for the package.
      additional_dependencies:
        - "../pyproject.toml"
        - "../README.md"
  
    ''',
    'src/BuildBinary.py': '''
      """Builds the binary for this project."""
      
      import datetime
      import importlib
      import re
      
      from functools import cache
      from pathlib import Path
      
      from cx_Freeze import setup, Executable
      from dbrownell_Common import PathEx
      
      
      # ----------------------------------------------------------------------
      @cache
      def _GetName() -> str:
          return "this_is_the_project_name"
      
      
      # ----------------------------------------------------------------------
      @cache
      def _GetVersionAndDocstring() -> tuple[str, str]:
          mod = importlib.import_module(_GetName())
          return mod.__version__, mod.__doc__ or ""
      
      
      # ----------------------------------------------------------------------
      @cache
      def _GetEntryPoint() -> Path:
          return PathEx.EnsureFile(Path(__file__).parent / _GetName() / "EntryPoint.py")
      
      
      # ----------------------------------------------------------------------
      @cache
      def _GetCopyright() -> str:
          match = re.search(
              r"""(?#
              Copyright                           )Copyright(?#
              Mark [Optional]                     )(?P<mark>\s+\([cC]\))?(?#
              Year                                )\s+(?P<year>\d{4})(?#
              Year Range [Optional]               )(?:\s*-\s*\d{2,4})?(?#
              Suffix                              )(?P<suffix>.+)(?#
              End of line                         )$(?#
              )""",
              PathEx.EnsureFile(Path(__file__).parent.parent / "LICENSE.txt").read_text(),
              flags=re.MULTILINE,
          )
      
          current_year = datetime.datetime.now().year
      
          if not match:
              return f"Copyright {current_year} <<author_name>>"
      
          initial_year = int(match.group("year"))
      
          if current_year == initial_year:
              year_suffix = ""
          elif current_year // 100 != initial_year // 100:
              year_suffix = f"-{current_year}"
          else:
              year_suffix = f"-{current_year % 100}"
      
          return f"Copyright{match.group('mark')} {initial_year}{year_suffix} <<author_name>>"
      
      
      # ----------------------------------------------------------------------
      setup(
          name=_GetName(),
          version=_GetVersionAndDocstring()[0],
          description=_GetVersionAndDocstring()[1],
          executables=[
              Executable(
                  _GetEntryPoint(),
                  base="console",
                  copyright=_GetCopyright(),
                  # icon=<icon_filename>,
                  target_name=_GetName(),
                  # trademarks=<trademarks>,
              ),
          ],
          options={
              "build_exe": {
                  "excludes": [
                      "tcl",
                      "tkinter",
                  ],
                  "no_compress": False,
                  "optimize": 0,
                  # "packages": [],
                  # "include_files": [],
              },
          },
      )
  
    ''',
    'src/this_is_the_project_name/EntryPoint.py': '''
      """This file serves as an example of how to create scripts that can be invoked from the command line once the package is installed."""
      
      import sys
      
      import typer
      
      from typer.core import TyperGroup  # type: ignore [import-untyped]
      
      from this_is_the_project_name import Math, __version__
      
      
      # ----------------------------------------------------------------------
      class NaturalOrderGrouper(TyperGroup):
          # pylint: disable=missing-class-docstring
          # ----------------------------------------------------------------------
          def list_commands(self, *args, **kwargs):  # pylint: disable=unused-argument
              return self.commands.keys()
      
      
      # ----------------------------------------------------------------------
      app = typer.Typer(
          cls=NaturalOrderGrouper,
          help=__doc__,
          no_args_is_help=True,
          pretty_exceptions_show_locals=False,
          pretty_exceptions_enable=False,
      )
      
      
      # ----------------------------------------------------------------------
      @app.command("Add")
      def Add(
          x: int,
          y: int,
      ) -> None:
          """Adds 2 values."""
      
          sys.stdout.write(str(Math.Add(x, y)))
      
      
      # ----------------------------------------------------------------------
      @app.command("Sub")
      def Sub(
          x: int,
          y: int,
      ) -> None:
          """Subtracts 2 values."""
      
          sys.stdout.write(str(Math.Sub(x, y)))
      
      
      # ----------------------------------------------------------------------
      @app.command("Mult")
      def Mult(
          x: int,
          y: int,
      ) -> None:
          """Multiplies 2 values."""
      
          sys.stdout.write(str(Math.Mult(x, y)))
      
      
      # ----------------------------------------------------------------------
      @app.command("Div")
      def Div(
          x: int,
          y: int,
      ) -> None:
          """Divides 1 value by another."""
      
          sys.stdout.write(str(Math.Div(x, y)))
      
      
      # ----------------------------------------------------------------------
      @app.command("Version")
      def Version() -> None:
          """Prints the version of the package."""
      
          sys.stdout.write(__version__)
      
      
      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
      if __name__ == "__main__":
          app()  # pragma: no cover
  
    ''',
    'src/this_is_the_project_name/Math.py': '''
      """Basic math functions. This file illustrates how to create a python package that contains functions that can be invoked by other python code."""
      
      
      # ----------------------------------------------------------------------
      def Add(x, y):
          return x + y
      
      
      # ----------------------------------------------------------------------
      def Sub(x, y):
          return x - y
      
      
      # ----------------------------------------------------------------------
      def Mult(x, y):
          return x * y
      
      
      # ----------------------------------------------------------------------
      def Div(x, y):
          return x / y
  
    ''',
    'src/this_is_the_project_name/__init__.py': '''
      # pylint: disable=missing-module-docstring,invalid-name
      
      # Note that this value will be overwritten by calls to `python ../../Build.py update_version` based
      # on changes observed in the git repository. The default value below will be used until the value
      # here is explicitly updated by the Continuous Integration system.
      __version__ = "0.1.0"
      
      from .Math import Add, Sub, Mult, Div
  
    ''',
    'tests/EntryPoint_UnitTest.py': '''
      """Unit tests for EntryPoint.py"""
      
      from typer.testing import CliRunner
      
      from this_is_the_project_name import __version__
      from this_is_the_project_name.EntryPoint import app
      
      
      # ----------------------------------------------------------------------
      def test_Add():
          result = CliRunner().invoke(app, ["Add", "1", "20"])
          assert result.exit_code == 0
          assert result.stdout == "21"
      
      
      # ----------------------------------------------------------------------
      def test_Sub():
          result = CliRunner().invoke(app, ["Sub", "1", "20"])
          assert result.exit_code == 0
          assert result.stdout == "-19"
      
      
      # ----------------------------------------------------------------------
      def test_Mult():
          result = CliRunner().invoke(app, ["Mult", "2", "15"])
          assert result.exit_code == 0
          assert result.stdout == "30"
      
      
      # ----------------------------------------------------------------------
      def test_Div():
          result = CliRunner().invoke(app, ["Div", "6", "3"])
          assert result.exit_code == 0
          assert result.stdout == "2.0"
      
      
      # ----------------------------------------------------------------------
      def test_Version():
          result = CliRunner().invoke(app, ["Version"])
          assert result.exit_code == 0
          assert result.stdout == __version__
      
      
      # ----------------------------------------------------------------------
      def test_NoArgs():
          result = CliRunner().invoke(app, [])
          assert result.exit_code == 0
          assert "Add" in result.stdout
          assert "Sub" in result.stdout
          assert "Mult" in result.stdout
          assert "Div" in result.stdout
          assert "Version" in result.stdout
  
    ''',
    'tests/Math_UnitTest.py': '''
      """Unit tests for Math.py"""
      
      from this_is_the_project_name.Math import *
      
      
      # ----------------------------------------------------------------------
      def test_Add():
          assert Add(1, 20) == 21
      
      
      # ----------------------------------------------------------------------
      def test_Sub():
          assert Sub(1, 20) == -19
      
      
      # ----------------------------------------------------------------------
      def test_Mult():
          assert Mult(2, 15) == 30
      
      
      # ----------------------------------------------------------------------
      def test_Div():
          assert Div(6, 3) == 2
  
    ''',
  })
# ---
# name: test_All[07-False_git_GitHub_None]
  dict({
    '.github/CODEOWNERS': '''
      * @<<github_username>>
  
    ''',
    '.github/ISSUE_TEMPLATE/bug_report.md': '''
      ---
      name: Bug report
      about: Create a report to help us improve.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Describe the bug
      A clear and concise description of what the bug is.
      
      ## To Reproduce
      Steps to reproduce the behavior:
      1. Go to '...'
      2. Click on '....'
      3. Scroll down to '....'
      4. See error
      
      ## Expected behavior
      A clear and concise description of what you expected to happen.
      
      ## Screenshots
      If applicable, add screenshots to help explain your problem.
      
      ## Environment (please complete the following information):
       - OS: [e.g. iOS]
       - Python Version: [e.g. 3.12, 3.11, etc.]
       - this_is_the_project_name Version [e.g. 1.2.3]
      
      ## Additional context
      Add any other context about the problem here.
  
    ''',
    '.github/ISSUE_TEMPLATE/config.yml': '''
      blank_issues_enabled: false
  
    ''',
    '.github/ISSUE_TEMPLATE/custom.md': '''
      ---
      name: Custom issue template
      about: Create an issue that isn't a bug or feature request.
      title: ''
      labels: ''
      assignees: ''
      
      ---
  
    ''',
    '.github/ISSUE_TEMPLATE/feature_request.md': '''
      ---
      name: Feature request
      about: Suggest an idea for this project.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Is your feature request related to a problem? Please describe.
      A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]
      
      ## Describe the solution you'd like
      A clear and concise description of what you want to happen.
      
      ## Describe alternatives you've considered
      A clear and concise description of any alternative solutions or features you've considered.
      
      ## Additional context
      Add any other context or screenshots about the feature request here.
  
    ''',
    '.github/pull_request_template.md': '''
      ## :pencil: Description
      Please include a summary of the change and the work item associated with it.
      
      ## :gear: Work Item
      Please include link to the corresponding GitHub Issue or Project work item.
      
      ## :movie_camera: Demo
      Please provide any images, GIFs, or videos that show the effect of your changes (if applicable). A picture is worth a thousand words.
  
    ''',
    '.gitignore': '''
      post_generation_actions.html
  
    ''',
    'post_generation_actions.html': '''
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <meta http-equiv="X-UA-Compatible" content="ie=edge">
          <title>this_is_the_project_name Post Generation Actions</title>
        </head>
        <style>
          body {
            font-family: "Open Sans", sans-serif;
          }
      
          details {
            width: 100%;
            overflow: hidden; /* Keep this line to prevent an odd blue outline around the element in Safari. */
          }
      
          details summary {
            display: block;
          }
      
          details summary::-webkit-details-marker {
            display: none;
          }
      
          details summary span {
            position: relative;
            display: flex;
            align-items: center;
            padding-left: 1rem;
            background: #444;
            color: #fff;
            height: 4rem;
          }
      
          details summary span:hover {
            cursor: pointer;
          }
      
          details summary span::before {
            content: "â–º";
            font-size: 1rem;
            display: flex;
            align-items: center;
            margin-right: 0.5rem;
            transition: rotate 200ms 400ms ease-out;
          }
      
          details[open] summary span::before {
            rotate: 90deg;
            transition: rotate 200ms ease-out;
          }
      
          details summary span input {
            margin-right: 0.75rem;
          }
      
          div.details-content {
            box-sizing: border-box;
            width: 100%;
            max-height: 0;
            overflow: hidden;
            padding: 0 10px;
            border: 2px solid transparent;
            transition: max-height 400ms ease-out, border 0ms 400ms linear;
            background-color: rgba(0, 0, 0, 0.05);
            margin-bottom: 1rem;
          }
      
          details[open] + div.details-content {
            max-height: 800px; /* Set a max-height value enough to show all the content */
            border-color: #888;
            transition: max-height 400ms ease-out, border 0ms linear;
          }
      
          code {
            background-color: rgba(0, 0, 0, 0.10);
          }
      
        </style>
        <body>
          <h1>this_is_the_project_name Post Generation Actions</h1>
          <p>The following steps must be completed in the order listed now that your project has been generated.</p>
      
          
                  <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="initialize-the-git-repository">Initialize the git repository</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>In this step, we will commit the files generated in git and push the changes.</p>
      
      <p>Open a terminal window, navigate to your repository, and run the following commands:</p>
      
      1. <code>git add --all</code><br/>
      2. <code>git commit -m "ðŸŽ‰ Initial commit"</code><br/>
      3. <code>git push</code><br/>
      </p>
      
              </div>
      
          <!-- [BEGIN] After Repository Tool Instruction -->
                  <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-development.md">Update DEVELOPMENT.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>DEVELOPMENT.md</code>.</p>
      
              </div>
      <!-- [END] After Repository Tool Instruction -->
      
          <details>
              <summary>
                  <span role="term"><input type="checkbox" id="delete-this-file">Delete this file</span>
              </summary>
          </details>
          <div role="definition" class="details-content">
              <p>After you have completed all the steps, you can delete this file.</p>
              <p>Now your project is ready to go!</p>
          </div>
      
          <script>
            document.querySelectorAll("details summary span input[type=checkbox]").forEach(
              function(checkbox) {
                var key = `${ location.href }-${ checkbox.id }`;
      
                if(window.localStorage.getItem(key) === "true")
                  checkbox.checked = true;
      
                this.addEventListener(
                  "change",
                  function() {
                    window.localStorage.setItem(key, checkbox.checked ? "true" : "false");
                  },
                );
              }
            );
          </script>
      
          <!-- TODO(copier-ProjectScaffolding): Decorate code elements with a "copy code" button that copies to the clipboard -->
        </body>
      </html>
  
    ''',
  })
# ---
# name: test_All[08-False_git_GitHub_PythonExecutionEnvironment]
  dict({
    '.github/CODEOWNERS': '''
      * @<<github_username>>
  
    ''',
    '.github/ISSUE_TEMPLATE/bug_report.md': '''
      ---
      name: Bug report
      about: Create a report to help us improve.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Describe the bug
      A clear and concise description of what the bug is.
      
      ## To Reproduce
      Steps to reproduce the behavior:
      1. Go to '...'
      2. Click on '....'
      3. Scroll down to '....'
      4. See error
      
      ## Expected behavior
      A clear and concise description of what you expected to happen.
      
      ## Screenshots
      If applicable, add screenshots to help explain your problem.
      
      ## Environment (please complete the following information):
       - OS: [e.g. iOS]
       - Python Version: [e.g. 3.12, 3.11, etc.]
       - this_is_the_project_name Version [e.g. 1.2.3]
      
      ## Additional context
      Add any other context about the problem here.
  
    ''',
    '.github/ISSUE_TEMPLATE/config.yml': '''
      blank_issues_enabled: false
  
    ''',
    '.github/ISSUE_TEMPLATE/custom.md': '''
      ---
      name: Custom issue template
      about: Create an issue that isn't a bug or feature request.
      title: ''
      labels: ''
      assignees: ''
      
      ---
  
    ''',
    '.github/ISSUE_TEMPLATE/feature_request.md': '''
      ---
      name: Feature request
      about: Suggest an idea for this project.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Is your feature request related to a problem? Please describe.
      A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]
      
      ## Describe the solution you'd like
      A clear and concise description of what you want to happen.
      
      ## Describe alternatives you've considered
      A clear and concise description of any alternative solutions or features you've considered.
      
      ## Additional context
      Add any other context or screenshots about the feature request here.
  
    ''',
    '.github/pull_request_template.md': '''
      ## :pencil: Description
      Please include a summary of the change and the work item associated with it.
      
      ## :gear: Work Item
      Please include link to the corresponding GitHub Issue or Project work item.
      
      ## :movie_camera: Demo
      Please provide any images, GIFs, or videos that show the effect of your changes (if applicable). A picture is worth a thousand words.
  
    ''',
    '.gitignore': '''
      post_generation_actions.html
      
      Activate*.cmd
      Activate*.sh
      Deactivate*.cmd
      Deactivate*.sh
      
      **/__pycache__/**
      **/Generated/**
  
    ''',
    'Bootstrap.cmd': '''
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  This script downloads and invokes BoostrapImpl.cmd from the PythonBootstrapper
      @REM |  repository (https://github.com/davidbrownell/PythonBootstrapper).
      @REM |
      @REM |  Arguments:
      @REM |
      @REM |      --debug                         Display additional debugging information.
      @REM |
      @REM |      --force                         Ensure that a new python environment is installed, even if it already exists.
      @REM |
      @REM |      --python-version <version>      Specify the python version to install; the default python version is installed if not specified.
      @REM |
      @REM |      --bootstrap-branch <branch>     Specify the branch of the PythonBootstrapper repository to use when downloading BootstrapImpl; "main" is used if not specified.
      @REM |
      @REM ----------------------------------------------------------------------
      @setlocal EnableDelayedExpansion
      @pushd %~dp0
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Parse and Process Arguments
      @REM |
      @REM ----------------------------------------------------------------------
      @set _BOOTSTRAP_BRANCH=main
      @set _COMMAND_LINE_ARGS=
      
      :ParseArgs
      @if '%1' EQU '' @goto :ParseArgs_End
      
      @set ARG=%1
      @set ARG=%ARG:"=%
      
      @if "%ARG%" NEQ "--bootstrap-branch" @goto :ParseArgs_BootstrapBranchEnd
      
      @REM Extract the bootstrap branch
      @shift /1
      
      @set ARG=%1
      @set ARG=%ARG:"=%
      
      @set _BOOTSTRAP_BRANCH=%ARG%
      @goto :ParseArgs_Next
      
      :ParseArgs_BootstrapBranchEnd
      @set _COMMAND_LINE_ARGS=%_COMMAND_LINE_ARGS% %1
      
      :ParseArgs_Next
      @shift /1
      @goto :ParseArgs
      
      :ParseArgs_End
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Download BootstrapImpl.cmd
      @REM |
      @REM ----------------------------------------------------------------------
      @echo Downloading Bootstrap code...
      
      @set _BOOTSTRAPIMPL_URL=https://raw.githubusercontent.com/davidbrownell/PythonBootstrapper/%_BOOTSTRAP_BRANCH%/src/BootstrapImpl.cmd
      
      @call :_CreateTempFileName
      
      @curl --header "Cache-Control: no-cache, no-store" --header "Pragma: no-cache" --location %_BOOTSTRAPIMPL_URL% --output BootstrapImpl.cmd --no-progress-meter --fail-with-body > "%_BOOTSTRAP_TEMP_FILENAME%" 2>&1
      @set _ERRORLEVEL=%ERRORLEVEL%
      
      @if %_ERRORLEVEL% NEQ 0 (
          @echo [1ADownloading Bootstrap code...[31m[1mFAILED[0m ^(%_BOOTSTRAPIMPL_URL%^).
          @echo.
      
          @type "%_BOOTSTRAP_TEMP_FILENAME%"
          @goto :Exit
      )
      
      @call :_DeleteTempFile
      @echo [1ADownloading Bootstrap code...[32m[1mDONE[0m.
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Invoke BootstrapImpl.cmd
      @REM |
      @REM ----------------------------------------------------------------------
      @call BootstrapImpl.cmd %_COMMAND_LINE_ARGS%
      @set _ERRORLEVEL=%ERRORLEVEL%
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Exit
      @REM |
      @REM ----------------------------------------------------------------------
      :Exit
      @if exist BootstrapImpl.cmd del BootstrapImpl.cmd
      @call :_DeleteTempFile
      
      @popd
      
      @endlocal & @exit /B %_ERRORLEVEL%
      
      @REM ----------------------------------------------------------------------
      @REM ----------------------------------------------------------------------
      @REM ----------------------------------------------------------------------
      :_CreateTempFileName
      @set _BOOTSTRAP_TEMP_FILENAME=%CD%\Bootstrap-!RANDOM!-!Time:~6,5!
      @goto :EOF
      
      @REM ----------------------------------------------------------------------
      :_DeleteTempFile
      @if "%_BOOTSTRAP_TEMP_FILENAME%" NEQ "" (
          @if exist "%_BOOTSTRAP_TEMP_FILENAME%" (
              @del "%_BOOTSTRAP_TEMP_FILENAME%"
          )
      )
      @goto :EOF
  
    ''',
    'Bootstrap.sh': '''
      #!/usr/bin/env bash
      # ----------------------------------------------------------------------
      # |
      # |  This script downloads and invokes BootstrapImpl.sh from the PythonBootstrapper
      # |  repository (https://github.com/davidbrownell/PythonBootstrapper).
      # |
      # |  Arguments:
      # |
      # |      --debug                         Display additional debugging information.
      # |
      # |      --force                         Ensure that a new python environment is installed, even if it already exists.
      # |
      # |      --python-version <version>      Specify the python version to install; the default python version is installed if not specified.
      # |
      # |      --bootstrap-branch <branch>     Specify the branch of the PythonBootstrapper repository to use when downloading BootstrapImpl; "main" is used if not specified.
      # |
      # ----------------------------------------------------------------------
      set +v # Continue on errors
      
      this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
      pushd "${this_dir}" > /dev/null || exit
      
      # ----------------------------------------------------------------------
      # |
      # |  Parse and Process Arguments
      # |
      # ----------------------------------------------------------------------
      bootstrap_branch=main
      command_line_args=()
      
      while [[ $# -gt 0 ]]; do
          if [[ "$1" == "--bootstrap-branch" ]]; then
              bootstrap_branch=$2
              shift
          else
              command_line_args+=("$1")
          fi
      
          shift
      done
      
      # ----------------------------------------------------------------------
      # |
      # |  Download BootstrapImpl.sh
      # |
      # ----------------------------------------------------------------------
      echo "Downloading Bootstrap code..."
      
      bootstrap_url=https://raw.githubusercontent.com/davidbrownell/PythonBootstrapper/${bootstrap_branch}/src/BootstrapImpl.sh
      
      temp_script_name=$(mktemp Bootstrap.XXXXXX)
      
      curl --header "Cache-Control: no-cache, no-store" --header "Pragma: no-cache" --location ${bootstrap_url} --output BootstrapImpl.sh --no-progress-meter --fail-with-body > "${temp_script_name}" 2>&1
      error=$?
      
      if [[ ${error} != 0 ]]; then
          echo "[1ADownloading Bootstrap code...[31m[1mFAILED[0m (${bootstrap_url})."
          echo ""
      
          cat "${temp_script_name}"
          rm "${temp_script_name}"
      
          exit ${error}
      fi
      
      chmod u+x BootstrapImpl.sh
      echo "[1ADownloading Bootstrap code...[32m[1mDONE[0m."
      
      # ----------------------------------------------------------------------
      # |
      # |  Invoke BootstrapImpl.sh
      # |
      # ----------------------------------------------------------------------
      ./BootstrapImpl.sh "${command_line_args[@]}"
      error=$?
      
      # ----------------------------------------------------------------------
      # |
      # |  Exit
      # |
      # ----------------------------------------------------------------------
      rm "BootstrapImpl.sh"
      rm "${temp_script_name}"
      
      exit ${error}
  
    ''',
    'BootstrapEpilog.py': '''
      # pylint: disable=missing-module-docstring
      
      import subprocess
      import sys
      
      from pathlib import Path
      
      
      # Parse the arguments
      no_cache = False
      
      display_flags: list[str] = []
      
      # First arg is the script name, second arg is the name of the shell script to write to
      for arg in sys.argv[2:]:
          if arg == "--no-cache":
              no_cache = True
          else:
              raise Exception("'{}' is not a recognized argument.".format(arg))
      
      subprocess.run(
          "pip install --disable-pip-version-check {} --requirement requirements.txt".format(
              "--no-cache-dir" if no_cache else "",
          ),
          check=True,
          shell=True,
          cwd=Path(__file__).parent,
      )
  
    ''',
    'post_generation_actions.html': '''
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <meta http-equiv="X-UA-Compatible" content="ie=edge">
          <title>this_is_the_project_name Post Generation Actions</title>
        </head>
        <style>
          body {
            font-family: "Open Sans", sans-serif;
          }
      
          details {
            width: 100%;
            overflow: hidden; /* Keep this line to prevent an odd blue outline around the element in Safari. */
          }
      
          details summary {
            display: block;
          }
      
          details summary::-webkit-details-marker {
            display: none;
          }
      
          details summary span {
            position: relative;
            display: flex;
            align-items: center;
            padding-left: 1rem;
            background: #444;
            color: #fff;
            height: 4rem;
          }
      
          details summary span:hover {
            cursor: pointer;
          }
      
          details summary span::before {
            content: "â–º";
            font-size: 1rem;
            display: flex;
            align-items: center;
            margin-right: 0.5rem;
            transition: rotate 200ms 400ms ease-out;
          }
      
          details[open] summary span::before {
            rotate: 90deg;
            transition: rotate 200ms ease-out;
          }
      
          details summary span input {
            margin-right: 0.75rem;
          }
      
          div.details-content {
            box-sizing: border-box;
            width: 100%;
            max-height: 0;
            overflow: hidden;
            padding: 0 10px;
            border: 2px solid transparent;
            transition: max-height 400ms ease-out, border 0ms 400ms linear;
            background-color: rgba(0, 0, 0, 0.05);
            margin-bottom: 1rem;
          }
      
          details[open] + div.details-content {
            max-height: 800px; /* Set a max-height value enough to show all the content */
            border-color: #888;
            transition: max-height 400ms ease-out, border 0ms linear;
          }
      
          code {
            background-color: rgba(0, 0, 0, 0.10);
          }
      
        </style>
        <body>
          <h1>this_is_the_project_name Post Generation Actions</h1>
          <p>The following steps must be completed in the order listed now that your project has been generated.</p>
      
          
                  <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="initialize-the-git-repository">Initialize the git repository</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>In this step, we will commit the files generated in git and push the changes.</p>
      
      <p>Open a terminal window, navigate to your repository, and run the following commands:</p>
      
      1. <code>git add --all</code><br/>
      2. <code>git commit -m "ðŸŽ‰ Initial commit"</code><br/>
      3. <code>git push</code><br/>
      </p>
      
              </div>
      
          <!-- [BEGIN] After Repository Tool Instruction -->
                  <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-requirements.txt">Update requirements.txt</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Python package dependencies can be added to <code>requirements.txt</code>. These packages will be automatically installed when the environment is <a href="https://github.com/davidbrownell/PythonBootstrapper" target="_blank">bootstrapped</a>.</p>
      <p>Please visit <a href="https://pip.pypa.io/en/stable/reference/requirements-file-format/" target="_blank">this link</a> for more information on requirements files and how they can be used.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-development.md">Update DEVELOPMENT.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>DEVELOPMENT.md</code>.</p>
      
              </div>
      <!-- [END] After Repository Tool Instruction -->
      
          <details>
              <summary>
                  <span role="term"><input type="checkbox" id="delete-this-file">Delete this file</span>
              </summary>
          </details>
          <div role="definition" class="details-content">
              <p>After you have completed all the steps, you can delete this file.</p>
              <p>Now your project is ready to go!</p>
          </div>
      
          <script>
            document.querySelectorAll("details summary span input[type=checkbox]").forEach(
              function(checkbox) {
                var key = `${ location.href }-${ checkbox.id }`;
      
                if(window.localStorage.getItem(key) === "true")
                  checkbox.checked = true;
      
                this.addEventListener(
                  "change",
                  function() {
                    window.localStorage.setItem(key, checkbox.checked ? "true" : "false");
                  },
                );
              }
            );
          </script>
      
          <!-- TODO(copier-ProjectScaffolding): Decorate code elements with a "copy code" button that copies to the clipboard -->
        </body>
      </html>
  
    ''',
    'requirements.txt': '''
      # TODO: Add your custom package requirements here
  
    ''',
  })
# ---
# name: test_All[09-False_git_GitHub_PythonPackage]
  dict({
    '.github/CODEOWNERS': '''
      * @<<github_username>>
  
    ''',
    '.github/ISSUE_TEMPLATE/bug_report.md': '''
      ---
      name: Bug report
      about: Create a report to help us improve.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Describe the bug
      A clear and concise description of what the bug is.
      
      ## To Reproduce
      Steps to reproduce the behavior:
      1. Go to '...'
      2. Click on '....'
      3. Scroll down to '....'
      4. See error
      
      ## Expected behavior
      A clear and concise description of what you expected to happen.
      
      ## Screenshots
      If applicable, add screenshots to help explain your problem.
      
      ## Environment (please complete the following information):
       - OS: [e.g. iOS]
       - Python Version: [e.g. 3.12, 3.11, etc.]
       - this_is_the_project_name Version [e.g. 1.2.3]
      
      ## Additional context
      Add any other context about the problem here.
  
    ''',
    '.github/ISSUE_TEMPLATE/config.yml': '''
      blank_issues_enabled: false
  
    ''',
    '.github/ISSUE_TEMPLATE/custom.md': '''
      ---
      name: Custom issue template
      about: Create an issue that isn't a bug or feature request.
      title: ''
      labels: ''
      assignees: ''
      
      ---
  
    ''',
    '.github/ISSUE_TEMPLATE/feature_request.md': '''
      ---
      name: Feature request
      about: Suggest an idea for this project.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Is your feature request related to a problem? Please describe.
      A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]
      
      ## Describe the solution you'd like
      A clear and concise description of what you want to happen.
      
      ## Describe alternatives you've considered
      A clear and concise description of any alternative solutions or features you've considered.
      
      ## Additional context
      Add any other context or screenshots about the feature request here.
  
    ''',
    '.github/pull_request_template.md': '''
      ## :pencil: Description
      Please include a summary of the change and the work item associated with it.
      
      ## :gear: Work Item
      Please include link to the corresponding GitHub Issue or Project work item.
      
      ## :movie_camera: Demo
      Please provide any images, GIFs, or videos that show the effect of your changes (if applicable). A picture is worth a thousand words.
  
    ''',
    '.gitignore': '''
      post_generation_actions.html
      
      Activate*.cmd
      Activate*.sh
      Deactivate*.cmd
      Deactivate*.sh
      
      **/__pycache__/**
      **/Generated/**
      
      **/.coverage
      **/lcov.info
      **/.vscode
      
      build/**
      dist/**
      src/this_is_the_project_name.egg-info/**
  
    ''',
    'ActivateEpilog.py': '''
      import json
      import os
      import sys
      
      from pathlib import Path
      
      with (Path(os.environ["PYTHON_BOOTSTRAPPER_GENERATED_DIR"]) / "bootstrap_flags.json").open() as f:
          flags = json.load(f)
      
      if flags:
          sys.stdout.write("\nBootstrapped with {}.\n".format(", ".join(f"'{flag}'" for flag in flags)))
  
    ''',
    'Bootstrap.cmd': '''
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  This script downloads and invokes BoostrapImpl.cmd from the PythonBootstrapper
      @REM |  repository (https://github.com/davidbrownell/PythonBootstrapper).
      @REM |
      @REM |  Arguments:
      @REM |
      @REM |      --debug                         Display additional debugging information.
      @REM |
      @REM |      --force                         Ensure that a new python environment is installed, even if it already exists.
      @REM |
      @REM |      --python-version <version>      Specify the python version to install; the default python version is installed if not specified.
      @REM |
      @REM |      --bootstrap-branch <branch>     Specify the branch of the PythonBootstrapper repository to use when downloading BootstrapImpl; "main" is used if not specified.
      @REM |
      @REM ----------------------------------------------------------------------
      @setlocal EnableDelayedExpansion
      @pushd %~dp0
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Parse and Process Arguments
      @REM |
      @REM ----------------------------------------------------------------------
      @set _BOOTSTRAP_BRANCH=main
      @set _COMMAND_LINE_ARGS=
      
      :ParseArgs
      @if '%1' EQU '' @goto :ParseArgs_End
      
      @set ARG=%1
      @set ARG=%ARG:"=%
      
      @if "%ARG%" NEQ "--bootstrap-branch" @goto :ParseArgs_BootstrapBranchEnd
      
      @REM Extract the bootstrap branch
      @shift /1
      
      @set ARG=%1
      @set ARG=%ARG:"=%
      
      @set _BOOTSTRAP_BRANCH=%ARG%
      @goto :ParseArgs_Next
      
      :ParseArgs_BootstrapBranchEnd
      @set _COMMAND_LINE_ARGS=%_COMMAND_LINE_ARGS% %1
      
      :ParseArgs_Next
      @shift /1
      @goto :ParseArgs
      
      :ParseArgs_End
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Download BootstrapImpl.cmd
      @REM |
      @REM ----------------------------------------------------------------------
      @echo Downloading Bootstrap code...
      
      @set _BOOTSTRAPIMPL_URL=https://raw.githubusercontent.com/davidbrownell/PythonBootstrapper/%_BOOTSTRAP_BRANCH%/src/BootstrapImpl.cmd
      
      @call :_CreateTempFileName
      
      @curl --header "Cache-Control: no-cache, no-store" --header "Pragma: no-cache" --location %_BOOTSTRAPIMPL_URL% --output BootstrapImpl.cmd --no-progress-meter --fail-with-body > "%_BOOTSTRAP_TEMP_FILENAME%" 2>&1
      @set _ERRORLEVEL=%ERRORLEVEL%
      
      @if %_ERRORLEVEL% NEQ 0 (
          @echo [1ADownloading Bootstrap code...[31m[1mFAILED[0m ^(%_BOOTSTRAPIMPL_URL%^).
          @echo.
      
          @type "%_BOOTSTRAP_TEMP_FILENAME%"
          @goto :Exit
      )
      
      @call :_DeleteTempFile
      @echo [1ADownloading Bootstrap code...[32m[1mDONE[0m.
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Invoke BootstrapImpl.cmd
      @REM |
      @REM ----------------------------------------------------------------------
      @call BootstrapImpl.cmd %_COMMAND_LINE_ARGS%
      @set _ERRORLEVEL=%ERRORLEVEL%
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Exit
      @REM |
      @REM ----------------------------------------------------------------------
      :Exit
      @if exist BootstrapImpl.cmd del BootstrapImpl.cmd
      @call :_DeleteTempFile
      
      @popd
      
      @endlocal & @exit /B %_ERRORLEVEL%
      
      @REM ----------------------------------------------------------------------
      @REM ----------------------------------------------------------------------
      @REM ----------------------------------------------------------------------
      :_CreateTempFileName
      @set _BOOTSTRAP_TEMP_FILENAME=%CD%\Bootstrap-!RANDOM!-!Time:~6,5!
      @goto :EOF
      
      @REM ----------------------------------------------------------------------
      :_DeleteTempFile
      @if "%_BOOTSTRAP_TEMP_FILENAME%" NEQ "" (
          @if exist "%_BOOTSTRAP_TEMP_FILENAME%" (
              @del "%_BOOTSTRAP_TEMP_FILENAME%"
          )
      )
      @goto :EOF
  
    ''',
    'Bootstrap.sh': '''
      #!/usr/bin/env bash
      # ----------------------------------------------------------------------
      # |
      # |  This script downloads and invokes BootstrapImpl.sh from the PythonBootstrapper
      # |  repository (https://github.com/davidbrownell/PythonBootstrapper).
      # |
      # |  Arguments:
      # |
      # |      --debug                         Display additional debugging information.
      # |
      # |      --force                         Ensure that a new python environment is installed, even if it already exists.
      # |
      # |      --python-version <version>      Specify the python version to install; the default python version is installed if not specified.
      # |
      # |      --bootstrap-branch <branch>     Specify the branch of the PythonBootstrapper repository to use when downloading BootstrapImpl; "main" is used if not specified.
      # |
      # ----------------------------------------------------------------------
      set +v # Continue on errors
      
      this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
      pushd "${this_dir}" > /dev/null || exit
      
      # ----------------------------------------------------------------------
      # |
      # |  Parse and Process Arguments
      # |
      # ----------------------------------------------------------------------
      bootstrap_branch=main
      command_line_args=()
      
      while [[ $# -gt 0 ]]; do
          if [[ "$1" == "--bootstrap-branch" ]]; then
              bootstrap_branch=$2
              shift
          else
              command_line_args+=("$1")
          fi
      
          shift
      done
      
      # ----------------------------------------------------------------------
      # |
      # |  Download BootstrapImpl.sh
      # |
      # ----------------------------------------------------------------------
      echo "Downloading Bootstrap code..."
      
      bootstrap_url=https://raw.githubusercontent.com/davidbrownell/PythonBootstrapper/${bootstrap_branch}/src/BootstrapImpl.sh
      
      temp_script_name=$(mktemp Bootstrap.XXXXXX)
      
      curl --header "Cache-Control: no-cache, no-store" --header "Pragma: no-cache" --location ${bootstrap_url} --output BootstrapImpl.sh --no-progress-meter --fail-with-body > "${temp_script_name}" 2>&1
      error=$?
      
      if [[ ${error} != 0 ]]; then
          echo "[1ADownloading Bootstrap code...[31m[1mFAILED[0m (${bootstrap_url})."
          echo ""
      
          cat "${temp_script_name}"
          rm "${temp_script_name}"
      
          exit ${error}
      fi
      
      chmod u+x BootstrapImpl.sh
      echo "[1ADownloading Bootstrap code...[32m[1mDONE[0m."
      
      # ----------------------------------------------------------------------
      # |
      # |  Invoke BootstrapImpl.sh
      # |
      # ----------------------------------------------------------------------
      ./BootstrapImpl.sh "${command_line_args[@]}"
      error=$?
      
      # ----------------------------------------------------------------------
      # |
      # |  Exit
      # |
      # ----------------------------------------------------------------------
      rm "BootstrapImpl.sh"
      rm "${temp_script_name}"
      
      exit ${error}
  
    ''',
    'BootstrapEpilog.py': '''
      # pylint: disable=missing-module-docstring
      
      import os
      import subprocess
      import sys
      
      from pathlib import Path
      
      
      # Parse the arguments
      is_debug = False
      is_force = False
      is_verbose = False
      is_package = False
      no_cache = False
      
      display_flags: list[str] = []
      
      # First arg is the script name, second arg is the name of the shell script to write to
      for arg in sys.argv[2:]:
          if arg == "--debug":
              is_debug = True
          elif arg == "--force":
              is_force = True
          elif arg == "--verbose":
              is_verbose = True
          elif arg == "--package":
              is_package = True
              display_flags.append("package")
          elif arg == "--no-cache":
              no_cache = True
          else:
              raise Exception("'{}' is not a recognized argument.".format(arg))
      
      if is_debug:
          is_verbose = True
      
      subprocess.run(
          'pip install --disable-pip-version-check {} --editable ".[dev{}]"'.format(
              "--no-cache-dir" if no_cache else "",
              ", package" if is_package else "",
          ),
          check=True,
          shell=True,
      )
      
      with (
          Path(__file__).parent / os.environ["PYTHON_BOOTSTRAPPER_GENERATED_DIR"] / "bootstrap_flags.json"
      ).open("w") as f:
          f.write("[{}]".format(", ".join(f'"{flag}"' for flag in display_flags)))
  
    ''',
    'Build.py': '''
      """Build tasks for this python project."""
      
      import sys
      
      from pathlib import Path
      
      import typer
      
      from dbrownell_Common import PathEx
      from dbrownell_DevTools.RepoBuildTools import Python as RepoBuildTools
      from typer.core import TyperGroup
      
      
      # ----------------------------------------------------------------------
      class NaturalOrderGrouper(TyperGroup):
          # pylint: disable=missing-class-docstring
          # ----------------------------------------------------------------------
          def list_commands(self, *args, **kwargs):  # pylint: disable=unused-argument
              return self.commands.keys()
      
      
      # ----------------------------------------------------------------------
      app = typer.Typer(
          cls=NaturalOrderGrouper,
          help=__doc__,
          no_args_is_help=True,
          pretty_exceptions_show_locals=False,
          pretty_exceptions_enable=False,
      )
      
      
      # ----------------------------------------------------------------------
      this_dir = PathEx.EnsureDir(Path(__file__).parent)
      src_dir = PathEx.EnsureDir(this_dir / "src")
      package_dir = PathEx.EnsureDir(src_dir / "this_is_the_project_name")
      
      
      # ----------------------------------------------------------------------
      Black = RepoBuildTools.BlackFuncFactory(this_dir, app)
      
      Pylint = RepoBuildTools.PylintFuncFactory(
          package_dir,
          app,
          default_min_score=9.5,
      )
      
      Pytest = RepoBuildTools.PytestFuncFactory(
          this_dir,
          package_dir.name,
          app,
          default_min_coverage=90.0,
      )
      
      UpdateVersion = RepoBuildTools.UpdateVersionFuncFactory(
          src_dir,
          PathEx.EnsureFile(package_dir / "__init__.py"),
          app,
      )
      
      Package = RepoBuildTools.PackageFuncFactory(this_dir, app)
      Publish = RepoBuildTools.PublishFuncFactory(this_dir, app)
      
      BuildBinary = RepoBuildTools.BuildBinaryFuncFactory(
          this_dir,
          PathEx.EnsureFile(src_dir / "BuildBinary.py"),
          app,
      )
      
      CreateDockerImage = RepoBuildTools.CreateDockerImageFuncFactory(
          this_dir,
          app,
      )
      
      
      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
      if __name__ == "__main__":
          sys.exit(app())
  
    ''',
    'post_generation_actions.html': '''
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <meta http-equiv="X-UA-Compatible" content="ie=edge">
          <title>this_is_the_project_name Post Generation Actions</title>
        </head>
        <style>
          body {
            font-family: "Open Sans", sans-serif;
          }
      
          details {
            width: 100%;
            overflow: hidden; /* Keep this line to prevent an odd blue outline around the element in Safari. */
          }
      
          details summary {
            display: block;
          }
      
          details summary::-webkit-details-marker {
            display: none;
          }
      
          details summary span {
            position: relative;
            display: flex;
            align-items: center;
            padding-left: 1rem;
            background: #444;
            color: #fff;
            height: 4rem;
          }
      
          details summary span:hover {
            cursor: pointer;
          }
      
          details summary span::before {
            content: "â–º";
            font-size: 1rem;
            display: flex;
            align-items: center;
            margin-right: 0.5rem;
            transition: rotate 200ms 400ms ease-out;
          }
      
          details[open] summary span::before {
            rotate: 90deg;
            transition: rotate 200ms ease-out;
          }
      
          details summary span input {
            margin-right: 0.75rem;
          }
      
          div.details-content {
            box-sizing: border-box;
            width: 100%;
            max-height: 0;
            overflow: hidden;
            padding: 0 10px;
            border: 2px solid transparent;
            transition: max-height 400ms ease-out, border 0ms 400ms linear;
            background-color: rgba(0, 0, 0, 0.05);
            margin-bottom: 1rem;
          }
      
          details[open] + div.details-content {
            max-height: 800px; /* Set a max-height value enough to show all the content */
            border-color: #888;
            transition: max-height 400ms ease-out, border 0ms linear;
          }
      
          code {
            background-color: rgba(0, 0, 0, 0.10);
          }
      
        </style>
        <body>
          <h1>this_is_the_project_name Post Generation Actions</h1>
          <p>The following steps must be completed in the order listed now that your project has been generated.</p>
      
          <!-- [BEGIN] Before Repository Tool Instruction -->
          <!-- [END] Before Repository Tool Instruction -->
      
                  <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="initialize-the-git-repository">Initialize the git repository</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>In this step, we will commit the files generated in git and push the changes.</p>
      
      <p>Open a terminal window, navigate to your repository, and run the following commands:</p>
      
      1. <code>git add --all</code><br/>
      2. <code>git commit -m "ðŸŽ‰ Initial commit"</code><br/>
      3. <code>git push</code><br/>
      </p>
      
              </div>
      
          <!-- [BEGIN] After Repository Tool Instruction -->
                  <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-pyproject.toml">Update pyproject.toml</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Python development tools, package dependencies, and packaging instructions are configured in <code>pyproject.toml</code>. Please visit <a href="https://packaging.python.org/en/latest/guides/writing-pyproject-toml/" target="_blank">this link</a> for more information on these files.</p>
      <p>Please search for and replace all <code>TODO:</code> comments in <code>pyproject.toml</code>.</p>
      
              </div>
      <!-- [END] After Repository Tool Instruction -->
      
          <details>
              <summary>
                  <span role="term"><input type="checkbox" id="delete-this-file">Delete this file</span>
              </summary>
          </details>
          <div role="definition" class="details-content">
              <p>After you have completed all the steps, you can delete this file.</p>
              <p>Now your project is ready to go!</p>
          </div>
      
          <script>
            document.querySelectorAll("details summary span input[type=checkbox]").forEach(
              function(checkbox) {
                var key = `${ location.href }-${ checkbox.id }`;
      
                if(window.localStorage.getItem(key) === "true")
                  checkbox.checked = true;
      
                this.addEventListener(
                  "change",
                  function() {
                    window.localStorage.setItem(key, checkbox.checked ? "true" : "false");
                  },
                );
              }
            );
          </script>
      
          <!-- TODO(copier-ProjectScaffolding): Decorate code elements with a "copy code" button that copies to the clipboard -->
        </body>
      </html>
  
    ''',
    'pyproject.toml': '''
      # https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
      
      [build-system]
      requires = ["setuptools >= 63.0"]
      build-backend = "setuptools.build_meta"
      
      # ----------------------------------------------------------------------
      # |
      # |  Project
      # |
      # ----------------------------------------------------------------------
      [project]
      name = "this_is_the_project_name"
      description = "<<project_description>>"
      
      license = { text = "MIT" }
      
      authors = [
          { name = "<<author_name>>", email = "<<author_email>>" },
      ]
      
      keywords = [
          # TODO: Add keywords specific to your project.
      ]
      
      # https://pypi.org/classifiers/
      classifiers = [
          # TODO: Add additional classifiers specific to your project.
          "License :: OSI Approved :: MIT License",
          "Operating System :: MacOS",
          "Operating System :: Microsoft :: Windows",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
      ]
      
      dependencies = [
          # TODO: Add additional package dependencies specific to your project.
          "typer ~= 0.9"
      ]
      
      dynamic = [
          "version",
      ]
      
      readme = "README.md"
      
      [project.optional-dependencies]
      dev = [
          "dbrownell_DevTools",
      ]
      
      package = [
          "build ~= 1.2",
          "cx_Freeze ~= 6.15",
          "twine ~= 5.1",
      ]
      
      [project.urls]
      Homepage = "https://github.com/<<github_username>>/<<github_repo_name>>"
      Documentation = "https://github.com/<<github_username>>/<<github_repo_name>>"
      Repository = "https://github.com/<<github_username>>/<<github_repo_name>>"
      
      
      [project.scripts]
      this_is_the_project_name = "this_is_the_project_name:EntryPoint.app"
      
      # ----------------------------------------------------------------------
      # |
      # |  black
      # |
      # ----------------------------------------------------------------------
      [tool.black]
      line-length = 100
      
      # ----------------------------------------------------------------------
      # |
      # |  pylint
      # |
      # ----------------------------------------------------------------------
      [tool.pylint.basic]
      class-const-naming-style = "any"
      function-naming-style = "PascalCase"
      good-names = [
          "i",
          "j",
          "k",
          "ex",
          "Run",
          "_",
          "dm",                                   # added
          "f",                                    # added
      ]
      method-naming-style = "any"
      module-naming-style = "PascalCase"
      
      [tool.pylint.design]
      max-args = 10
      max-parents = 15
      
      [tool.pylint.main]
      ignore-paths = [
          # Note that the pylint vscode extension has trouble with wrapping these patterns in quotes
          # (which is required to parse the file correctly). Because of this, each pattern must be
          # converted to a glob pattern and specified in the pylint vscode settings as well.
          "^.+?Tests/.*$",
      ]
      
      [tool.pylint."messages control"]
      disable = [
          "raw-checker-failed",
          "bad-inline-option",
          "locally-disabled",
          "file-ignored",
          "suppressed-message",
          "useless-suppression",
          "deprecated-pragma",
          "use-symbolic-message-instead",
          "assignment-from-no-return",            # added
          "broad-except",                         # added
          "broad-exception-raised",               # added
          "cell-var-from-loop",                   # added
          "consider-using-f-string",              # added
          "import-outside-toplevel",              # added
          "line-too-long",                        # added
          "missing-function-docstring",           # added
          "subprocess-run-check",                 # added
          "super-with-arguments",                 # added
          "too-few-public-methods",               # added
          "unnecessary-lambda-assignment",        # added
          "unspecified-encoding",                 # added
      ]
      
      # ----------------------------------------------------------------------
      # |
      # |  pyright
      # |
      # ----------------------------------------------------------------------
      [tool.pyright]
      exclude = [
          "**/*Tests/*",
          "**/Generated/*",
      ]
      
      reportMissingImports = true
      reportMissingTypeStubs = false
      
      # ----------------------------------------------------------------------
      # |
      # |  pytest
      # |
      # ----------------------------------------------------------------------
      [tool.pytest.ini_options]
      python_files = [
          "**/*Test.py",
      ]
      
      # ----------------------------------------------------------------------
      # |
      # |  setuptools
      # |
      # ----------------------------------------------------------------------
      [tool.setuptools.dynamic]
      version = { attr = "this_is_the_project_name.__version__" }
      
      [tool.setuptools.packages.find]
      where = ["src"]
  
    ''',
    'src/AutoGitSemVer.yaml': '''
      # This file is used by AutoGitSemVer to configure the semantic version of the this_is_the_project_name package.
      # It indicates that AutoGitSemVer should only look at changes in this directory, its descendants, and files specified in
      # additional_dependencies when calculating the semantic version for the package.
      additional_dependencies:
        - "../pyproject.toml"
        - "../README.md"
  
    ''',
    'src/BuildBinary.py': '''
      """Builds the binary for this project."""
      
      import datetime
      import importlib
      import re
      
      from functools import cache
      from pathlib import Path
      
      from cx_Freeze import setup, Executable
      from dbrownell_Common import PathEx
      
      
      # ----------------------------------------------------------------------
      @cache
      def _GetName() -> str:
          return "this_is_the_project_name"
      
      
      # ----------------------------------------------------------------------
      @cache
      def _GetVersionAndDocstring() -> tuple[str, str]:
          mod = importlib.import_module(_GetName())
          return mod.__version__, mod.__doc__ or ""
      
      
      # ----------------------------------------------------------------------
      @cache
      def _GetEntryPoint() -> Path:
          return PathEx.EnsureFile(Path(__file__).parent / _GetName() / "EntryPoint.py")
      
      
      # ----------------------------------------------------------------------
      @cache
      def _GetCopyright() -> str:
          match = re.search(
              r"""(?#
              Copyright                           )Copyright(?#
              Mark [Optional]                     )(?P<mark>\s+\([cC]\))?(?#
              Year                                )\s+(?P<year>\d{4})(?#
              Year Range [Optional]               )(?:\s*-\s*\d{2,4})?(?#
              Suffix                              )(?P<suffix>.+)(?#
              End of line                         )$(?#
              )""",
              PathEx.EnsureFile(Path(__file__).parent.parent / "LICENSE.txt").read_text(),
              flags=re.MULTILINE,
          )
      
          current_year = datetime.datetime.now().year
      
          if not match:
              return f"Copyright {current_year} <<author_name>>"
      
          initial_year = int(match.group("year"))
      
          if current_year == initial_year:
              year_suffix = ""
          elif current_year // 100 != initial_year // 100:
              year_suffix = f"-{current_year}"
          else:
              year_suffix = f"-{current_year % 100}"
      
          return f"Copyright{match.group('mark')} {initial_year}{year_suffix} <<author_name>>"
      
      
      # ----------------------------------------------------------------------
      setup(
          name=_GetName(),
          version=_GetVersionAndDocstring()[0],
          description=_GetVersionAndDocstring()[1],
          executables=[
              Executable(
                  _GetEntryPoint(),
                  base="console",
                  copyright=_GetCopyright(),
                  # icon=<icon_filename>,
                  target_name=_GetName(),
                  # trademarks=<trademarks>,
              ),
          ],
          options={
              "build_exe": {
                  "excludes": [
                      "tcl",
                      "tkinter",
                  ],
                  "no_compress": False,
                  "optimize": 0,
                  # "packages": [],
                  # "include_files": [],
              },
          },
      )
  
    ''',
    'src/this_is_the_project_name/EntryPoint.py': '''
      """This file serves as an example of how to create scripts that can be invoked from the command line once the package is installed."""
      
      import sys
      
      import typer
      
      from typer.core import TyperGroup  # type: ignore [import-untyped]
      
      from this_is_the_project_name import Math, __version__
      
      
      # ----------------------------------------------------------------------
      class NaturalOrderGrouper(TyperGroup):
          # pylint: disable=missing-class-docstring
          # ----------------------------------------------------------------------
          def list_commands(self, *args, **kwargs):  # pylint: disable=unused-argument
              return self.commands.keys()
      
      
      # ----------------------------------------------------------------------
      app = typer.Typer(
          cls=NaturalOrderGrouper,
          help=__doc__,
          no_args_is_help=True,
          pretty_exceptions_show_locals=False,
          pretty_exceptions_enable=False,
      )
      
      
      # ----------------------------------------------------------------------
      @app.command("Add")
      def Add(
          x: int,
          y: int,
      ) -> None:
          """Adds 2 values."""
      
          sys.stdout.write(str(Math.Add(x, y)))
      
      
      # ----------------------------------------------------------------------
      @app.command("Sub")
      def Sub(
          x: int,
          y: int,
      ) -> None:
          """Subtracts 2 values."""
      
          sys.stdout.write(str(Math.Sub(x, y)))
      
      
      # ----------------------------------------------------------------------
      @app.command("Mult")
      def Mult(
          x: int,
          y: int,
      ) -> None:
          """Multiplies 2 values."""
      
          sys.stdout.write(str(Math.Mult(x, y)))
      
      
      # ----------------------------------------------------------------------
      @app.command("Div")
      def Div(
          x: int,
          y: int,
      ) -> None:
          """Divides 1 value by another."""
      
          sys.stdout.write(str(Math.Div(x, y)))
      
      
      # ----------------------------------------------------------------------
      @app.command("Version")
      def Version() -> None:
          """Prints the version of the package."""
      
          sys.stdout.write(__version__)
      
      
      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
      if __name__ == "__main__":
          app()  # pragma: no cover
  
    ''',
    'src/this_is_the_project_name/Math.py': '''
      """Basic math functions. This file illustrates how to create a python package that contains functions that can be invoked by other python code."""
      
      
      # ----------------------------------------------------------------------
      def Add(x, y):
          return x + y
      
      
      # ----------------------------------------------------------------------
      def Sub(x, y):
          return x - y
      
      
      # ----------------------------------------------------------------------
      def Mult(x, y):
          return x * y
      
      
      # ----------------------------------------------------------------------
      def Div(x, y):
          return x / y
  
    ''',
    'src/this_is_the_project_name/__init__.py': '''
      # pylint: disable=missing-module-docstring,invalid-name
      
      # Note that this value will be overwritten by calls to `python ../../Build.py update_version` based
      # on changes observed in the git repository. The default value below will be used until the value
      # here is explicitly updated by the Continuous Integration system.
      __version__ = "0.1.0"
      
      from .Math import Add, Sub, Mult, Div
  
    ''',
    'tests/EntryPoint_UnitTest.py': '''
      """Unit tests for EntryPoint.py"""
      
      from typer.testing import CliRunner
      
      from this_is_the_project_name import __version__
      from this_is_the_project_name.EntryPoint import app
      
      
      # ----------------------------------------------------------------------
      def test_Add():
          result = CliRunner().invoke(app, ["Add", "1", "20"])
          assert result.exit_code == 0
          assert result.stdout == "21"
      
      
      # ----------------------------------------------------------------------
      def test_Sub():
          result = CliRunner().invoke(app, ["Sub", "1", "20"])
          assert result.exit_code == 0
          assert result.stdout == "-19"
      
      
      # ----------------------------------------------------------------------
      def test_Mult():
          result = CliRunner().invoke(app, ["Mult", "2", "15"])
          assert result.exit_code == 0
          assert result.stdout == "30"
      
      
      # ----------------------------------------------------------------------
      def test_Div():
          result = CliRunner().invoke(app, ["Div", "6", "3"])
          assert result.exit_code == 0
          assert result.stdout == "2.0"
      
      
      # ----------------------------------------------------------------------
      def test_Version():
          result = CliRunner().invoke(app, ["Version"])
          assert result.exit_code == 0
          assert result.stdout == __version__
      
      
      # ----------------------------------------------------------------------
      def test_NoArgs():
          result = CliRunner().invoke(app, [])
          assert result.exit_code == 0
          assert "Add" in result.stdout
          assert "Sub" in result.stdout
          assert "Mult" in result.stdout
          assert "Div" in result.stdout
          assert "Version" in result.stdout
  
    ''',
    'tests/Math_UnitTest.py': '''
      """Unit tests for Math.py"""
      
      from this_is_the_project_name.Math import *
      
      
      # ----------------------------------------------------------------------
      def test_Add():
          assert Add(1, 20) == 21
      
      
      # ----------------------------------------------------------------------
      def test_Sub():
          assert Sub(1, 20) == -19
      
      
      # ----------------------------------------------------------------------
      def test_Mult():
          assert Mult(2, 15) == 30
      
      
      # ----------------------------------------------------------------------
      def test_Div():
          assert Div(6, 3) == 2
  
    ''',
  })
# ---
# name: test_All[10-True_None_None_None]
  dict({
    'CODE_OF_CONDUCT.md': '''
      # this_is_the_project_name Open Source Code of Conduct
      
      ## Principles
      These principles guide our data, product, and process decisions, architecture, and approach.
      
      - Open means transparent and participatory.
      - We take a modular and modern approach to software development.
      - We build open-source software and open-source process.
      - We value ease of implementation.
      - Fostering community includes building capacity and making our software and processes accessible to participants with diverse backgrounds and skillsets.
      - Data (and data science) is as important as software and process. We build open data sets where possible.
      - We strive for transparency for algorithms and places we might be introducing bias.
      
      ## Community Guidelines
      Information on contributing to this repository is available in our [Contributing file](CONTRIBUTING.md).
      
      When participating in this_is_the_project_name open source community conversations and spaces, we ask individuals to follow the following guidelines:
      
      - Embrace a culture of learning, and educate each other. We are all entering this conversation from different starting points and with different backgrounds. There are no dumb questions.
      - Take space and give space. We strive to create an equitable environment in which all are welcome and able to participate. We hope individuals feel comfortable voicing their opinions and providing contributions and will do our best to recognize and make space for individuals who may be struggling to find space here. Likewise, we expect individuals to recognize when they are taking up significant space and take a step back to allow room for others.
      - Be respectful.
      - Default to positive. Assume others' contributions are legitimate and valuable and that they are made with good intention.
      
      ## Acknowledgements
      This Community Guidelines was adapted from the [United States Digital Service](https://usds.gov) [Justice40](https://thejustice40.com) open source [repository](https://github.com/usds/justice40-tool).
  
    ''',
    'CONTRIBUTING.md': '''
      # Contribution Guidelines
      
      ## Contributor Code of Conduct
      As contributors and maintainers of this project, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities.
      
      We are committed to making participation in this project a harassment-free experience for everyone, regardless of the level of experience, gender, gender identity, expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, or religion.
      
      Examples of unacceptable behavior by participants include the use of sexual language or imagery, derogatory comments or personal attacks, trolling, public or private harassment, insults, or other unprofessional conduct.
      
      [Project maintainers](MAINTAINERS.md) have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned with this Code of Conduct.
      
      Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting one or more of the [project maintainers](MAINTAINERS.md).
      
      ## General information
      TODO: Include information on how to submit pull requests and/or issues.
      
      The [DEVELOPMENT.md](DEVELOPMENT.md) file explains how to install the program locally (highly recommended if you're going to make code changes). It also provides information useful for making changes and validating them locally before submitting a pull request.
      
      ### Pull requests and different branches recommended
      TODO: Include information on how to use branches effectively and create a pull request.
      
      ### How we handle proposals
      TODO: Include information on how proposals are handled.
      
      ### We are proactive
      In general we try to be proactive to detect and eliminate mistakes and vulnerabilities as soon as possible, and to reduce their impact when they do happen. We use a defensive design and coding style to reduce the likelihood of mistakes, a variety of tools that try to detect mistakes early, and an automatic test suite with significant coverage. We also release the software as open source software so others can review it.
      
      Since early detection and impact reduction can never be perfect, we also try to detect and repair problems during deployment as quickly as possible. This is especially true for security issues; see our [security information](#vulnerability-reporting-security-issues) for more information.
      
      ## Vulnerability reporting (security issues)
      Please privately report vulnerabilities you find so we can fix them!
      
      See [SECURITY.md](SECURITY.md) for information on how to privately report vulnerabilities.
      
      ## Acknowledgements
      
      This Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.0.0, available at [http://contributor-covenant.org/version/1/0/0/](http://contributor-covenant.org/version/1/0/0/)
  
    ''',
    'DEVELOPMENT.md': '''
      # Local Development
      
      ## Enlistment
      TODO: Complete this section
      
      ## Development Activities
      TODO: Complete this section
  
    ''',
    'GOVERNANCE.md': '''
      # Governance
      This project is governed by our [Code of Conduct](CODE_OF_CONDUCT.md) and [Contribution Guidelines](CONTRIBUTING.md).
  
    ''',
    'LICENSE.txt': '''
      MIT LICENSE
      
      Copyright (c) 2024 this_is_the_project_name
      
      Permission is hereby granted, free of charge, to any person obtaining a copy
      of this software and associated documentation files (the "Software"), to deal
      in the Software without restriction, including without limitation the rights
      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      copies of the Software, and to permit persons to whom the Software is
      furnished to do so, subject to the following conditions:
      
      The above copyright notice and this permission notice shall be included in all
      copies or substantial portions of the Software.
      
      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
      SOFTWARE.
  
    ''',
    'MAINTAINERS.md': '''
      # Maintainers
      
      This page lists all active maintainers of this repository. If you were a maintainer and would like to add your name to the Emeritus list, please send us a pull request.
      
      See [Code of Conduct](CODE_OF_CONDUCT.md) and [Contributing](CONTRIBUTING.md) for general contribution guidelines.
      
      ## Current Maintainers
      | Maintainer | GitHub ID | Affiliation |
      | --- | --- | --- |
      TODO: Add maintainers
      
      ## Emeritus
      | Maintainer | GitHub ID | Affiliation |
      | --- | --- | --- |
  
    ''',
    'README.md': '''
      # this_is_the_project_name
      
      <!-- BEGIN: Exclude Package -->
      <!-- END: Exclude Package -->
      
      <<project_description>>
      
      <!-- BEGIN: Exclude Package -->
      ## Contents
      - [Overview](#overview)
      - [Installation](#installation)
      - [Development](#development)
      - [Additional Information](#additional-information)
      - [License](#license)
      <!-- END: Exclude Package -->
      
      ## Overview
      TODO: Complete this section
      
      ### How to use this_is_the_project_name
      TODO: Complete this section
      
      <!-- BEGIN: Exclude Package -->
      ## Installation
      TODO: Complete this section
      
      ## Development
      Please visit CONTRIBUTING.md and DEVELOPMENT.md for information on contributing to this project.
      <!-- END: Exclude Package -->
      
      ## Additional Information
      Additional information can be found at these locations.
      
      | Title | Document | Description |
      | --- | --- | --- |
      | Code of Conduct | CODE_OF_CONDUCT.md | Information about the the norms, rules, and responsibilities we adhere to when participating in this open source community. |
      | Contributing | CONTRIBUTING.md | Information about contributing code changes to this project. |
      | Development | DEVELOPMENT.md | Information about development activities involved in making changes to this project. |
      | Governance | GOVERNANCE.md | Information about how this project is governed. |
      | Maintainers | MAINTAINERS.md | Information about individuals who maintain this project. |
      | Security | SECURITY.md | Information about how to privately report security issues associated with this project. |
      ## License
      
      this_is_the_project_name is licensed under the <a href="https://choosealicense.com/licenses/mit/" target="_blank">MIT</a> license.
  
    ''',
    'SECURITY.md': '''
      # Security
      
      If you find a significant vulnerability, or evidence of one, please report it privately.
      
      TODO: Include information on how to securely submit a vulnerability.
      
      We will gladly give credit to anyone who reports a vulnerability so that we can fix it. If you want to remain anonymous or pseudonymous instead, please let us know that; we will gladly respect your wishes.
      
      We gladly welcome patches to fix such vulnerabilities! See [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributions.
  
    ''',
    'post_generation_actions.html': '''
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <meta http-equiv="X-UA-Compatible" content="ie=edge">
          <title>this_is_the_project_name Post Generation Actions</title>
        </head>
        <style>
          body {
            font-family: "Open Sans", sans-serif;
          }
      
          details {
            width: 100%;
            overflow: hidden; /* Keep this line to prevent an odd blue outline around the element in Safari. */
          }
      
          details summary {
            display: block;
          }
      
          details summary::-webkit-details-marker {
            display: none;
          }
      
          details summary span {
            position: relative;
            display: flex;
            align-items: center;
            padding-left: 1rem;
            background: #444;
            color: #fff;
            height: 4rem;
          }
      
          details summary span:hover {
            cursor: pointer;
          }
      
          details summary span::before {
            content: "â–º";
            font-size: 1rem;
            display: flex;
            align-items: center;
            margin-right: 0.5rem;
            transition: rotate 200ms 400ms ease-out;
          }
      
          details[open] summary span::before {
            rotate: 90deg;
            transition: rotate 200ms ease-out;
          }
      
          details summary span input {
            margin-right: 0.75rem;
          }
      
          div.details-content {
            box-sizing: border-box;
            width: 100%;
            max-height: 0;
            overflow: hidden;
            padding: 0 10px;
            border: 2px solid transparent;
            transition: max-height 400ms ease-out, border 0ms 400ms linear;
            background-color: rgba(0, 0, 0, 0.05);
            margin-bottom: 1rem;
          }
      
          details[open] + div.details-content {
            max-height: 800px; /* Set a max-height value enough to show all the content */
            border-color: #888;
            transition: max-height 400ms ease-out, border 0ms linear;
          }
      
          code {
            background-color: rgba(0, 0, 0, 0.10);
          }
      
        </style>
        <body>
          <h1>this_is_the_project_name Post Generation Actions</h1>
          <p>The following steps must be completed in the order listed now that your project has been generated.</p>
      
          
          
          <!-- [BEGIN] After Repository Tool Instruction -->
                  <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-readme.md">Update README.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>README.md</code>.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-maintainers.md">Update MAINTAINERS.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>MAINTAINERS.md</code>.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-contributing.md">Update CONTRIBUTING.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>CONTRIBUTING.md</code>.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-security.md">Update SECURITY.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>SECURITY.md</code>.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-development.md">Update DEVELOPMENT.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>DEVELOPMENT.md</code>.</p>
      
              </div>
      <!-- [END] After Repository Tool Instruction -->
      
          <details>
              <summary>
                  <span role="term"><input type="checkbox" id="delete-this-file">Delete this file</span>
              </summary>
          </details>
          <div role="definition" class="details-content">
              <p>After you have completed all the steps, you can delete this file.</p>
              <p>Now your project is ready to go!</p>
          </div>
      
          <script>
            document.querySelectorAll("details summary span input[type=checkbox]").forEach(
              function(checkbox) {
                var key = `${ location.href }-${ checkbox.id }`;
      
                if(window.localStorage.getItem(key) === "true")
                  checkbox.checked = true;
      
                this.addEventListener(
                  "change",
                  function() {
                    window.localStorage.setItem(key, checkbox.checked ? "true" : "false");
                  },
                );
              }
            );
          </script>
      
          <!-- TODO(copier-ProjectScaffolding): Decorate code elements with a "copy code" button that copies to the clipboard -->
        </body>
      </html>
  
    ''',
  })
# ---
# name: test_All[11-True_None_None_PythonExecutionEnvironment]
  dict({
    'Bootstrap.cmd': '''
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  This script downloads and invokes BoostrapImpl.cmd from the PythonBootstrapper
      @REM |  repository (https://github.com/davidbrownell/PythonBootstrapper).
      @REM |
      @REM |  Arguments:
      @REM |
      @REM |      --debug                         Display additional debugging information.
      @REM |
      @REM |      --force                         Ensure that a new python environment is installed, even if it already exists.
      @REM |
      @REM |      --python-version <version>      Specify the python version to install; the default python version is installed if not specified.
      @REM |
      @REM |      --bootstrap-branch <branch>     Specify the branch of the PythonBootstrapper repository to use when downloading BootstrapImpl; "main" is used if not specified.
      @REM |
      @REM ----------------------------------------------------------------------
      @setlocal EnableDelayedExpansion
      @pushd %~dp0
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Parse and Process Arguments
      @REM |
      @REM ----------------------------------------------------------------------
      @set _BOOTSTRAP_BRANCH=main
      @set _COMMAND_LINE_ARGS=
      
      :ParseArgs
      @if '%1' EQU '' @goto :ParseArgs_End
      
      @set ARG=%1
      @set ARG=%ARG:"=%
      
      @if "%ARG%" NEQ "--bootstrap-branch" @goto :ParseArgs_BootstrapBranchEnd
      
      @REM Extract the bootstrap branch
      @shift /1
      
      @set ARG=%1
      @set ARG=%ARG:"=%
      
      @set _BOOTSTRAP_BRANCH=%ARG%
      @goto :ParseArgs_Next
      
      :ParseArgs_BootstrapBranchEnd
      @set _COMMAND_LINE_ARGS=%_COMMAND_LINE_ARGS% %1
      
      :ParseArgs_Next
      @shift /1
      @goto :ParseArgs
      
      :ParseArgs_End
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Download BootstrapImpl.cmd
      @REM |
      @REM ----------------------------------------------------------------------
      @echo Downloading Bootstrap code...
      
      @set _BOOTSTRAPIMPL_URL=https://raw.githubusercontent.com/davidbrownell/PythonBootstrapper/%_BOOTSTRAP_BRANCH%/src/BootstrapImpl.cmd
      
      @call :_CreateTempFileName
      
      @curl --header "Cache-Control: no-cache, no-store" --header "Pragma: no-cache" --location %_BOOTSTRAPIMPL_URL% --output BootstrapImpl.cmd --no-progress-meter --fail-with-body > "%_BOOTSTRAP_TEMP_FILENAME%" 2>&1
      @set _ERRORLEVEL=%ERRORLEVEL%
      
      @if %_ERRORLEVEL% NEQ 0 (
          @echo [1ADownloading Bootstrap code...[31m[1mFAILED[0m ^(%_BOOTSTRAPIMPL_URL%^).
          @echo.
      
          @type "%_BOOTSTRAP_TEMP_FILENAME%"
          @goto :Exit
      )
      
      @call :_DeleteTempFile
      @echo [1ADownloading Bootstrap code...[32m[1mDONE[0m.
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Invoke BootstrapImpl.cmd
      @REM |
      @REM ----------------------------------------------------------------------
      @call BootstrapImpl.cmd %_COMMAND_LINE_ARGS%
      @set _ERRORLEVEL=%ERRORLEVEL%
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Exit
      @REM |
      @REM ----------------------------------------------------------------------
      :Exit
      @if exist BootstrapImpl.cmd del BootstrapImpl.cmd
      @call :_DeleteTempFile
      
      @popd
      
      @endlocal & @exit /B %_ERRORLEVEL%
      
      @REM ----------------------------------------------------------------------
      @REM ----------------------------------------------------------------------
      @REM ----------------------------------------------------------------------
      :_CreateTempFileName
      @set _BOOTSTRAP_TEMP_FILENAME=%CD%\Bootstrap-!RANDOM!-!Time:~6,5!
      @goto :EOF
      
      @REM ----------------------------------------------------------------------
      :_DeleteTempFile
      @if "%_BOOTSTRAP_TEMP_FILENAME%" NEQ "" (
          @if exist "%_BOOTSTRAP_TEMP_FILENAME%" (
              @del "%_BOOTSTRAP_TEMP_FILENAME%"
          )
      )
      @goto :EOF
  
    ''',
    'Bootstrap.sh': '''
      #!/usr/bin/env bash
      # ----------------------------------------------------------------------
      # |
      # |  This script downloads and invokes BootstrapImpl.sh from the PythonBootstrapper
      # |  repository (https://github.com/davidbrownell/PythonBootstrapper).
      # |
      # |  Arguments:
      # |
      # |      --debug                         Display additional debugging information.
      # |
      # |      --force                         Ensure that a new python environment is installed, even if it already exists.
      # |
      # |      --python-version <version>      Specify the python version to install; the default python version is installed if not specified.
      # |
      # |      --bootstrap-branch <branch>     Specify the branch of the PythonBootstrapper repository to use when downloading BootstrapImpl; "main" is used if not specified.
      # |
      # ----------------------------------------------------------------------
      set +v # Continue on errors
      
      this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
      pushd "${this_dir}" > /dev/null || exit
      
      # ----------------------------------------------------------------------
      # |
      # |  Parse and Process Arguments
      # |
      # ----------------------------------------------------------------------
      bootstrap_branch=main
      command_line_args=()
      
      while [[ $# -gt 0 ]]; do
          if [[ "$1" == "--bootstrap-branch" ]]; then
              bootstrap_branch=$2
              shift
          else
              command_line_args+=("$1")
          fi
      
          shift
      done
      
      # ----------------------------------------------------------------------
      # |
      # |  Download BootstrapImpl.sh
      # |
      # ----------------------------------------------------------------------
      echo "Downloading Bootstrap code..."
      
      bootstrap_url=https://raw.githubusercontent.com/davidbrownell/PythonBootstrapper/${bootstrap_branch}/src/BootstrapImpl.sh
      
      temp_script_name=$(mktemp Bootstrap.XXXXXX)
      
      curl --header "Cache-Control: no-cache, no-store" --header "Pragma: no-cache" --location ${bootstrap_url} --output BootstrapImpl.sh --no-progress-meter --fail-with-body > "${temp_script_name}" 2>&1
      error=$?
      
      if [[ ${error} != 0 ]]; then
          echo "[1ADownloading Bootstrap code...[31m[1mFAILED[0m (${bootstrap_url})."
          echo ""
      
          cat "${temp_script_name}"
          rm "${temp_script_name}"
      
          exit ${error}
      fi
      
      chmod u+x BootstrapImpl.sh
      echo "[1ADownloading Bootstrap code...[32m[1mDONE[0m."
      
      # ----------------------------------------------------------------------
      # |
      # |  Invoke BootstrapImpl.sh
      # |
      # ----------------------------------------------------------------------
      ./BootstrapImpl.sh "${command_line_args[@]}"
      error=$?
      
      # ----------------------------------------------------------------------
      # |
      # |  Exit
      # |
      # ----------------------------------------------------------------------
      rm "BootstrapImpl.sh"
      rm "${temp_script_name}"
      
      exit ${error}
  
    ''',
    'BootstrapEpilog.py': '''
      # pylint: disable=missing-module-docstring
      
      import subprocess
      import sys
      
      from pathlib import Path
      
      
      # Parse the arguments
      no_cache = False
      
      display_flags: list[str] = []
      
      # First arg is the script name, second arg is the name of the shell script to write to
      for arg in sys.argv[2:]:
          if arg == "--no-cache":
              no_cache = True
          else:
              raise Exception("'{}' is not a recognized argument.".format(arg))
      
      subprocess.run(
          "pip install --disable-pip-version-check {} --requirement requirements.txt".format(
              "--no-cache-dir" if no_cache else "",
          ),
          check=True,
          shell=True,
          cwd=Path(__file__).parent,
      )
  
    ''',
    'CODE_OF_CONDUCT.md': '''
      # this_is_the_project_name Open Source Code of Conduct
      
      ## Principles
      These principles guide our data, product, and process decisions, architecture, and approach.
      
      - Open means transparent and participatory.
      - We take a modular and modern approach to software development.
      - We build open-source software and open-source process.
      - We value ease of implementation.
      - Fostering community includes building capacity and making our software and processes accessible to participants with diverse backgrounds and skillsets.
      - Data (and data science) is as important as software and process. We build open data sets where possible.
      - We strive for transparency for algorithms and places we might be introducing bias.
      
      ## Community Guidelines
      Information on contributing to this repository is available in our [Contributing file](CONTRIBUTING.md).
      
      When participating in this_is_the_project_name open source community conversations and spaces, we ask individuals to follow the following guidelines:
      
      - Embrace a culture of learning, and educate each other. We are all entering this conversation from different starting points and with different backgrounds. There are no dumb questions.
      - Take space and give space. We strive to create an equitable environment in which all are welcome and able to participate. We hope individuals feel comfortable voicing their opinions and providing contributions and will do our best to recognize and make space for individuals who may be struggling to find space here. Likewise, we expect individuals to recognize when they are taking up significant space and take a step back to allow room for others.
      - Be respectful.
      - Default to positive. Assume others' contributions are legitimate and valuable and that they are made with good intention.
      
      ## Acknowledgements
      This Community Guidelines was adapted from the [United States Digital Service](https://usds.gov) [Justice40](https://thejustice40.com) open source [repository](https://github.com/usds/justice40-tool).
  
    ''',
    'CONTRIBUTING.md': '''
      # Contribution Guidelines
      
      ## Contributor Code of Conduct
      As contributors and maintainers of this project, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities.
      
      We are committed to making participation in this project a harassment-free experience for everyone, regardless of the level of experience, gender, gender identity, expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, or religion.
      
      Examples of unacceptable behavior by participants include the use of sexual language or imagery, derogatory comments or personal attacks, trolling, public or private harassment, insults, or other unprofessional conduct.
      
      [Project maintainers](MAINTAINERS.md) have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned with this Code of Conduct.
      
      Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting one or more of the [project maintainers](MAINTAINERS.md).
      
      ## General information
      TODO: Include information on how to submit pull requests and/or issues.
      
      The [DEVELOPMENT.md](DEVELOPMENT.md) file explains how to install the program locally (highly recommended if you're going to make code changes). It also provides information useful for making changes and validating them locally before submitting a pull request.
      
      ### Pull requests and different branches recommended
      TODO: Include information on how to use branches effectively and create a pull request.
      
      ### How we handle proposals
      TODO: Include information on how proposals are handled.
      
      ### We are proactive
      In general we try to be proactive to detect and eliminate mistakes and vulnerabilities as soon as possible, and to reduce their impact when they do happen. We use a defensive design and coding style to reduce the likelihood of mistakes, a variety of tools that try to detect mistakes early, and an automatic test suite with significant coverage. We also release the software as open source software so others can review it.
      
      Since early detection and impact reduction can never be perfect, we also try to detect and repair problems during deployment as quickly as possible. This is especially true for security issues; see our [security information](#vulnerability-reporting-security-issues) for more information.
      
      ## Vulnerability reporting (security issues)
      Please privately report vulnerabilities you find so we can fix them!
      
      See [SECURITY.md](SECURITY.md) for information on how to privately report vulnerabilities.
      
      ## Acknowledgements
      
      This Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.0.0, available at [http://contributor-covenant.org/version/1/0/0/](http://contributor-covenant.org/version/1/0/0/)
  
    ''',
    'DEVELOPMENT.md': '''
      # Local Development
      
      ## Enlistment
      Enlistment in this repository involves these steps.
      
      <table>
      <tr>
          <th>Step</th>
          <th>Command Line</th>
          <th>Description</th>
      </tr>
      <tr>
          <td>1. Bootstrap the environment</td>
          <td>
              <table>
                  <tr>
                      <th>Linux / MacOS</th>
                      <td><code>./Bootstrap.sh [--python-version &lt;python version&gt;]</code></td>
                  </tr>
                  <tr>
                      <th>Windows</th>
                      <td><code>Bootstrap.cmd [--python-version &lt;python version&gt;]</code></td>
                  </tr>
              </table>
          </td>
          <td>Prepares the repository for local development by enlisting in all dependencies.</td>
      </tr>
      <tr>
          <td>2. Activate the environment</td>
          <td>
              <table>
                  <tr>
                      <th>Linux / MacOS</th>
                      <td><code>. ./Activate.sh</code></td>
                  </tr>
                  <tr>
                      <th>Windows</th>
                      <td><code>Activate.cmd</code></td>
                  </tr>
              </table>
          </td>
          <td>
              <p>Activates the terminal for development. Each new terminal window must be activated.</p>
              <p>Activate.sh/.cmd is actually a shortcut to the most recently bootstrapped version of python (e.g. Activate3.11.sh/.cmd). With this functionality, it is possible to support multiple python versions in the same repository and activate each in a terminal using the python-specific activation script.</p>
          </td>
      </tr>
      <tr>
          <td>3. [Optional] Deactivate the environment</td>
          <td>
              <table>
                  <tr>
                      <th>Linux / MacOS</th>
                      <td><code>. ./Deactivate.sh</code></td>
                  </tr>
                  <tr>
                      <th>Windows</th>
                      <td><code>Deactivate.cmd</code></td>
                  </tr>
              </table>
          </td>
          <td>
              Deactivates the terminal environment. Deactivating is optional, as the terminal window itself may be closed when development activities are complete.
          </td>
      </tr>
      </table>
      
      ## Development Activities
      TODO: Complete this section
  
    ''',
    'GOVERNANCE.md': '''
      # Governance
      This project is governed by our [Code of Conduct](CODE_OF_CONDUCT.md) and [Contribution Guidelines](CONTRIBUTING.md).
  
    ''',
    'LICENSE.txt': '''
      MIT LICENSE
      
      Copyright (c) 2024 this_is_the_project_name
      
      Permission is hereby granted, free of charge, to any person obtaining a copy
      of this software and associated documentation files (the "Software"), to deal
      in the Software without restriction, including without limitation the rights
      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      copies of the Software, and to permit persons to whom the Software is
      furnished to do so, subject to the following conditions:
      
      The above copyright notice and this permission notice shall be included in all
      copies or substantial portions of the Software.
      
      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
      SOFTWARE.
  
    ''',
    'MAINTAINERS.md': '''
      # Maintainers
      
      This page lists all active maintainers of this repository. If you were a maintainer and would like to add your name to the Emeritus list, please send us a pull request.
      
      See [Code of Conduct](CODE_OF_CONDUCT.md) and [Contributing](CONTRIBUTING.md) for general contribution guidelines.
      
      ## Current Maintainers
      | Maintainer | GitHub ID | Affiliation |
      | --- | --- | --- |
      TODO: Add maintainers
      
      ## Emeritus
      | Maintainer | GitHub ID | Affiliation |
      | --- | --- | --- |
  
    ''',
    'README.md': '''
      # this_is_the_project_name
      
      <!-- BEGIN: Exclude Package -->
      <!-- END: Exclude Package -->
      
      <<project_description>>
      
      <!-- BEGIN: Exclude Package -->
      ## Contents
      - [Overview](#overview)
      - [Installation](#installation)
      - [Development](#development)
      - [Additional Information](#additional-information)
      - [License](#license)
      <!-- END: Exclude Package -->
      
      ## Overview
      TODO: Complete this section
      
      ### How to use this_is_the_project_name
      TODO: Complete this section
      
      <!-- BEGIN: Exclude Package -->
      ## Installation
      No additional setup is required to use this project.
      
      ## Development
      Please visit CONTRIBUTING.md and DEVELOPMENT.md for information on contributing to this project.
      <!-- END: Exclude Package -->
      
      ## Additional Information
      Additional information can be found at these locations.
      
      | Title | Document | Description |
      | --- | --- | --- |
      | Code of Conduct | CODE_OF_CONDUCT.md | Information about the the norms, rules, and responsibilities we adhere to when participating in this open source community. |
      | Contributing | CONTRIBUTING.md | Information about contributing code changes to this project. |
      | Development | DEVELOPMENT.md | Information about development activities involved in making changes to this project. |
      | Governance | GOVERNANCE.md | Information about how this project is governed. |
      | Maintainers | MAINTAINERS.md | Information about individuals who maintain this project. |
      | Security | SECURITY.md | Information about how to privately report security issues associated with this project. |
      ## License
      
      this_is_the_project_name is licensed under the <a href="https://choosealicense.com/licenses/mit/" target="_blank">MIT</a> license.
  
    ''',
    'SECURITY.md': '''
      # Security
      
      If you find a significant vulnerability, or evidence of one, please report it privately.
      
      TODO: Include information on how to securely submit a vulnerability.
      
      We will gladly give credit to anyone who reports a vulnerability so that we can fix it. If you want to remain anonymous or pseudonymous instead, please let us know that; we will gladly respect your wishes.
      
      We gladly welcome patches to fix such vulnerabilities! See [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributions.
  
    ''',
    'post_generation_actions.html': '''
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <meta http-equiv="X-UA-Compatible" content="ie=edge">
          <title>this_is_the_project_name Post Generation Actions</title>
        </head>
        <style>
          body {
            font-family: "Open Sans", sans-serif;
          }
      
          details {
            width: 100%;
            overflow: hidden; /* Keep this line to prevent an odd blue outline around the element in Safari. */
          }
      
          details summary {
            display: block;
          }
      
          details summary::-webkit-details-marker {
            display: none;
          }
      
          details summary span {
            position: relative;
            display: flex;
            align-items: center;
            padding-left: 1rem;
            background: #444;
            color: #fff;
            height: 4rem;
          }
      
          details summary span:hover {
            cursor: pointer;
          }
      
          details summary span::before {
            content: "â–º";
            font-size: 1rem;
            display: flex;
            align-items: center;
            margin-right: 0.5rem;
            transition: rotate 200ms 400ms ease-out;
          }
      
          details[open] summary span::before {
            rotate: 90deg;
            transition: rotate 200ms ease-out;
          }
      
          details summary span input {
            margin-right: 0.75rem;
          }
      
          div.details-content {
            box-sizing: border-box;
            width: 100%;
            max-height: 0;
            overflow: hidden;
            padding: 0 10px;
            border: 2px solid transparent;
            transition: max-height 400ms ease-out, border 0ms 400ms linear;
            background-color: rgba(0, 0, 0, 0.05);
            margin-bottom: 1rem;
          }
      
          details[open] + div.details-content {
            max-height: 800px; /* Set a max-height value enough to show all the content */
            border-color: #888;
            transition: max-height 400ms ease-out, border 0ms linear;
          }
      
          code {
            background-color: rgba(0, 0, 0, 0.10);
          }
      
        </style>
        <body>
          <h1>this_is_the_project_name Post Generation Actions</h1>
          <p>The following steps must be completed in the order listed now that your project has been generated.</p>
      
          
          
          <!-- [BEGIN] After Repository Tool Instruction -->
                  <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-readme.md">Update README.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>README.md</code>.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-maintainers.md">Update MAINTAINERS.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>MAINTAINERS.md</code>.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-contributing.md">Update CONTRIBUTING.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>CONTRIBUTING.md</code>.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-security.md">Update SECURITY.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>SECURITY.md</code>.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-requirements.txt">Update requirements.txt</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Python package dependencies can be added to <code>requirements.txt</code>. These packages will be automatically installed when the environment is <a href="https://github.com/davidbrownell/PythonBootstrapper" target="_blank">bootstrapped</a>.</p>
      <p>Please visit <a href="https://pip.pypa.io/en/stable/reference/requirements-file-format/" target="_blank">this link</a> for more information on requirements files and how they can be used.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-development.md">Update DEVELOPMENT.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>DEVELOPMENT.md</code>.</p>
      
              </div>
      <!-- [END] After Repository Tool Instruction -->
      
          <details>
              <summary>
                  <span role="term"><input type="checkbox" id="delete-this-file">Delete this file</span>
              </summary>
          </details>
          <div role="definition" class="details-content">
              <p>After you have completed all the steps, you can delete this file.</p>
              <p>Now your project is ready to go!</p>
          </div>
      
          <script>
            document.querySelectorAll("details summary span input[type=checkbox]").forEach(
              function(checkbox) {
                var key = `${ location.href }-${ checkbox.id }`;
      
                if(window.localStorage.getItem(key) === "true")
                  checkbox.checked = true;
      
                this.addEventListener(
                  "change",
                  function() {
                    window.localStorage.setItem(key, checkbox.checked ? "true" : "false");
                  },
                );
              }
            );
          </script>
      
          <!-- TODO(copier-ProjectScaffolding): Decorate code elements with a "copy code" button that copies to the clipboard -->
        </body>
      </html>
  
    ''',
    'requirements.txt': '''
      # TODO: Add your custom package requirements here
  
    ''',
  })
# ---
# name: test_All[12-True_None_None_PythonPackage]
  dict({
    'ActivateEpilog.py': '''
      import json
      import os
      import sys
      
      from pathlib import Path
      
      with (Path(os.environ["PYTHON_BOOTSTRAPPER_GENERATED_DIR"]) / "bootstrap_flags.json").open() as f:
          flags = json.load(f)
      
      if flags:
          sys.stdout.write("\nBootstrapped with {}.\n".format(", ".join(f"'{flag}'" for flag in flags)))
  
    ''',
    'Bootstrap.cmd': '''
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  This script downloads and invokes BoostrapImpl.cmd from the PythonBootstrapper
      @REM |  repository (https://github.com/davidbrownell/PythonBootstrapper).
      @REM |
      @REM |  Arguments:
      @REM |
      @REM |      --debug                         Display additional debugging information.
      @REM |
      @REM |      --force                         Ensure that a new python environment is installed, even if it already exists.
      @REM |
      @REM |      --python-version <version>      Specify the python version to install; the default python version is installed if not specified.
      @REM |
      @REM |      --bootstrap-branch <branch>     Specify the branch of the PythonBootstrapper repository to use when downloading BootstrapImpl; "main" is used if not specified.
      @REM |
      @REM ----------------------------------------------------------------------
      @setlocal EnableDelayedExpansion
      @pushd %~dp0
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Parse and Process Arguments
      @REM |
      @REM ----------------------------------------------------------------------
      @set _BOOTSTRAP_BRANCH=main
      @set _COMMAND_LINE_ARGS=
      
      :ParseArgs
      @if '%1' EQU '' @goto :ParseArgs_End
      
      @set ARG=%1
      @set ARG=%ARG:"=%
      
      @if "%ARG%" NEQ "--bootstrap-branch" @goto :ParseArgs_BootstrapBranchEnd
      
      @REM Extract the bootstrap branch
      @shift /1
      
      @set ARG=%1
      @set ARG=%ARG:"=%
      
      @set _BOOTSTRAP_BRANCH=%ARG%
      @goto :ParseArgs_Next
      
      :ParseArgs_BootstrapBranchEnd
      @set _COMMAND_LINE_ARGS=%_COMMAND_LINE_ARGS% %1
      
      :ParseArgs_Next
      @shift /1
      @goto :ParseArgs
      
      :ParseArgs_End
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Download BootstrapImpl.cmd
      @REM |
      @REM ----------------------------------------------------------------------
      @echo Downloading Bootstrap code...
      
      @set _BOOTSTRAPIMPL_URL=https://raw.githubusercontent.com/davidbrownell/PythonBootstrapper/%_BOOTSTRAP_BRANCH%/src/BootstrapImpl.cmd
      
      @call :_CreateTempFileName
      
      @curl --header "Cache-Control: no-cache, no-store" --header "Pragma: no-cache" --location %_BOOTSTRAPIMPL_URL% --output BootstrapImpl.cmd --no-progress-meter --fail-with-body > "%_BOOTSTRAP_TEMP_FILENAME%" 2>&1
      @set _ERRORLEVEL=%ERRORLEVEL%
      
      @if %_ERRORLEVEL% NEQ 0 (
          @echo [1ADownloading Bootstrap code...[31m[1mFAILED[0m ^(%_BOOTSTRAPIMPL_URL%^).
          @echo.
      
          @type "%_BOOTSTRAP_TEMP_FILENAME%"
          @goto :Exit
      )
      
      @call :_DeleteTempFile
      @echo [1ADownloading Bootstrap code...[32m[1mDONE[0m.
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Invoke BootstrapImpl.cmd
      @REM |
      @REM ----------------------------------------------------------------------
      @call BootstrapImpl.cmd %_COMMAND_LINE_ARGS%
      @set _ERRORLEVEL=%ERRORLEVEL%
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Exit
      @REM |
      @REM ----------------------------------------------------------------------
      :Exit
      @if exist BootstrapImpl.cmd del BootstrapImpl.cmd
      @call :_DeleteTempFile
      
      @popd
      
      @endlocal & @exit /B %_ERRORLEVEL%
      
      @REM ----------------------------------------------------------------------
      @REM ----------------------------------------------------------------------
      @REM ----------------------------------------------------------------------
      :_CreateTempFileName
      @set _BOOTSTRAP_TEMP_FILENAME=%CD%\Bootstrap-!RANDOM!-!Time:~6,5!
      @goto :EOF
      
      @REM ----------------------------------------------------------------------
      :_DeleteTempFile
      @if "%_BOOTSTRAP_TEMP_FILENAME%" NEQ "" (
          @if exist "%_BOOTSTRAP_TEMP_FILENAME%" (
              @del "%_BOOTSTRAP_TEMP_FILENAME%"
          )
      )
      @goto :EOF
  
    ''',
    'Bootstrap.sh': '''
      #!/usr/bin/env bash
      # ----------------------------------------------------------------------
      # |
      # |  This script downloads and invokes BootstrapImpl.sh from the PythonBootstrapper
      # |  repository (https://github.com/davidbrownell/PythonBootstrapper).
      # |
      # |  Arguments:
      # |
      # |      --debug                         Display additional debugging information.
      # |
      # |      --force                         Ensure that a new python environment is installed, even if it already exists.
      # |
      # |      --python-version <version>      Specify the python version to install; the default python version is installed if not specified.
      # |
      # |      --bootstrap-branch <branch>     Specify the branch of the PythonBootstrapper repository to use when downloading BootstrapImpl; "main" is used if not specified.
      # |
      # ----------------------------------------------------------------------
      set +v # Continue on errors
      
      this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
      pushd "${this_dir}" > /dev/null || exit
      
      # ----------------------------------------------------------------------
      # |
      # |  Parse and Process Arguments
      # |
      # ----------------------------------------------------------------------
      bootstrap_branch=main
      command_line_args=()
      
      while [[ $# -gt 0 ]]; do
          if [[ "$1" == "--bootstrap-branch" ]]; then
              bootstrap_branch=$2
              shift
          else
              command_line_args+=("$1")
          fi
      
          shift
      done
      
      # ----------------------------------------------------------------------
      # |
      # |  Download BootstrapImpl.sh
      # |
      # ----------------------------------------------------------------------
      echo "Downloading Bootstrap code..."
      
      bootstrap_url=https://raw.githubusercontent.com/davidbrownell/PythonBootstrapper/${bootstrap_branch}/src/BootstrapImpl.sh
      
      temp_script_name=$(mktemp Bootstrap.XXXXXX)
      
      curl --header "Cache-Control: no-cache, no-store" --header "Pragma: no-cache" --location ${bootstrap_url} --output BootstrapImpl.sh --no-progress-meter --fail-with-body > "${temp_script_name}" 2>&1
      error=$?
      
      if [[ ${error} != 0 ]]; then
          echo "[1ADownloading Bootstrap code...[31m[1mFAILED[0m (${bootstrap_url})."
          echo ""
      
          cat "${temp_script_name}"
          rm "${temp_script_name}"
      
          exit ${error}
      fi
      
      chmod u+x BootstrapImpl.sh
      echo "[1ADownloading Bootstrap code...[32m[1mDONE[0m."
      
      # ----------------------------------------------------------------------
      # |
      # |  Invoke BootstrapImpl.sh
      # |
      # ----------------------------------------------------------------------
      ./BootstrapImpl.sh "${command_line_args[@]}"
      error=$?
      
      # ----------------------------------------------------------------------
      # |
      # |  Exit
      # |
      # ----------------------------------------------------------------------
      rm "BootstrapImpl.sh"
      rm "${temp_script_name}"
      
      exit ${error}
  
    ''',
    'BootstrapEpilog.py': '''
      # pylint: disable=missing-module-docstring
      
      import os
      import subprocess
      import sys
      
      from pathlib import Path
      
      
      # Parse the arguments
      is_debug = False
      is_force = False
      is_verbose = False
      is_package = False
      no_cache = False
      
      display_flags: list[str] = []
      
      # First arg is the script name, second arg is the name of the shell script to write to
      for arg in sys.argv[2:]:
          if arg == "--debug":
              is_debug = True
          elif arg == "--force":
              is_force = True
          elif arg == "--verbose":
              is_verbose = True
          elif arg == "--package":
              is_package = True
              display_flags.append("package")
          elif arg == "--no-cache":
              no_cache = True
          else:
              raise Exception("'{}' is not a recognized argument.".format(arg))
      
      if is_debug:
          is_verbose = True
      
      subprocess.run(
          'pip install --disable-pip-version-check {} --editable ".[dev{}]"'.format(
              "--no-cache-dir" if no_cache else "",
              ", package" if is_package else "",
          ),
          check=True,
          shell=True,
      )
      
      with (
          Path(__file__).parent / os.environ["PYTHON_BOOTSTRAPPER_GENERATED_DIR"] / "bootstrap_flags.json"
      ).open("w") as f:
          f.write("[{}]".format(", ".join(f'"{flag}"' for flag in display_flags)))
  
    ''',
    'Build.py': '''
      """Build tasks for this python project."""
      
      import sys
      
      from pathlib import Path
      
      import typer
      
      from dbrownell_Common import PathEx
      from dbrownell_DevTools.RepoBuildTools import Python as RepoBuildTools
      from typer.core import TyperGroup
      
      
      # ----------------------------------------------------------------------
      class NaturalOrderGrouper(TyperGroup):
          # pylint: disable=missing-class-docstring
          # ----------------------------------------------------------------------
          def list_commands(self, *args, **kwargs):  # pylint: disable=unused-argument
              return self.commands.keys()
      
      
      # ----------------------------------------------------------------------
      app = typer.Typer(
          cls=NaturalOrderGrouper,
          help=__doc__,
          no_args_is_help=True,
          pretty_exceptions_show_locals=False,
          pretty_exceptions_enable=False,
      )
      
      
      # ----------------------------------------------------------------------
      this_dir = PathEx.EnsureDir(Path(__file__).parent)
      src_dir = PathEx.EnsureDir(this_dir / "src")
      package_dir = PathEx.EnsureDir(src_dir / "this_is_the_project_name")
      
      
      # ----------------------------------------------------------------------
      Black = RepoBuildTools.BlackFuncFactory(this_dir, app)
      
      Pylint = RepoBuildTools.PylintFuncFactory(
          package_dir,
          app,
          default_min_score=9.5,
      )
      
      Pytest = RepoBuildTools.PytestFuncFactory(
          this_dir,
          package_dir.name,
          app,
          default_min_coverage=90.0,
      )
      
      UpdateVersion = RepoBuildTools.UpdateVersionFuncFactory(
          src_dir,
          PathEx.EnsureFile(package_dir / "__init__.py"),
          app,
      )
      
      Package = RepoBuildTools.PackageFuncFactory(this_dir, app)
      Publish = RepoBuildTools.PublishFuncFactory(this_dir, app)
      
      BuildBinary = RepoBuildTools.BuildBinaryFuncFactory(
          this_dir,
          PathEx.EnsureFile(src_dir / "BuildBinary.py"),
          app,
      )
      
      CreateDockerImage = RepoBuildTools.CreateDockerImageFuncFactory(
          this_dir,
          app,
      )
      
      
      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
      if __name__ == "__main__":
          sys.exit(app())
  
    ''',
    'CODE_OF_CONDUCT.md': '''
      # this_is_the_project_name Open Source Code of Conduct
      
      ## Principles
      These principles guide our data, product, and process decisions, architecture, and approach.
      
      - Open means transparent and participatory.
      - We take a modular and modern approach to software development.
      - We build open-source software and open-source process.
      - We value ease of implementation.
      - Fostering community includes building capacity and making our software and processes accessible to participants with diverse backgrounds and skillsets.
      - Data (and data science) is as important as software and process. We build open data sets where possible.
      - We strive for transparency for algorithms and places we might be introducing bias.
      
      ## Community Guidelines
      Information on contributing to this repository is available in our [Contributing file](CONTRIBUTING.md).
      
      When participating in this_is_the_project_name open source community conversations and spaces, we ask individuals to follow the following guidelines:
      
      - Embrace a culture of learning, and educate each other. We are all entering this conversation from different starting points and with different backgrounds. There are no dumb questions.
      - Take space and give space. We strive to create an equitable environment in which all are welcome and able to participate. We hope individuals feel comfortable voicing their opinions and providing contributions and will do our best to recognize and make space for individuals who may be struggling to find space here. Likewise, we expect individuals to recognize when they are taking up significant space and take a step back to allow room for others.
      - Be respectful.
      - Default to positive. Assume others' contributions are legitimate and valuable and that they are made with good intention.
      
      ## Acknowledgements
      This Community Guidelines was adapted from the [United States Digital Service](https://usds.gov) [Justice40](https://thejustice40.com) open source [repository](https://github.com/usds/justice40-tool).
  
    ''',
    'CONTRIBUTING.md': '''
      # Contribution Guidelines
      
      ## Contributor Code of Conduct
      As contributors and maintainers of this project, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities.
      
      We are committed to making participation in this project a harassment-free experience for everyone, regardless of the level of experience, gender, gender identity, expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, or religion.
      
      Examples of unacceptable behavior by participants include the use of sexual language or imagery, derogatory comments or personal attacks, trolling, public or private harassment, insults, or other unprofessional conduct.
      
      [Project maintainers](MAINTAINERS.md) have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned with this Code of Conduct.
      
      Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting one or more of the [project maintainers](MAINTAINERS.md).
      
      ## General information
      TODO: Include information on how to submit pull requests and/or issues.
      
      The [DEVELOPMENT.md](DEVELOPMENT.md) file explains how to install the program locally (highly recommended if you're going to make code changes). It also provides information useful for making changes and validating them locally before submitting a pull request.
      
      ### Pull requests and different branches recommended
      TODO: Include information on how to use branches effectively and create a pull request.
      
      ### How we handle proposals
      TODO: Include information on how proposals are handled.
      
      ### We are proactive
      In general we try to be proactive to detect and eliminate mistakes and vulnerabilities as soon as possible, and to reduce their impact when they do happen. We use a defensive design and coding style to reduce the likelihood of mistakes, a variety of tools that try to detect mistakes early, and an automatic test suite with significant coverage. We also release the software as open source software so others can review it.
      
      Since early detection and impact reduction can never be perfect, we also try to detect and repair problems during deployment as quickly as possible. This is especially true for security issues; see our [security information](#vulnerability-reporting-security-issues) for more information.
      
      ## Vulnerability reporting (security issues)
      Please privately report vulnerabilities you find so we can fix them!
      
      See [SECURITY.md](SECURITY.md) for information on how to privately report vulnerabilities.
      
      ## Acknowledgements
      
      This Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.0.0, available at [http://contributor-covenant.org/version/1/0/0/](http://contributor-covenant.org/version/1/0/0/)
  
    ''',
    'DEVELOPMENT.md': '''
      # Local Development
      
      ## Enlistment
      Enlistment in this repository involves these steps.
      
      <table>
      <tr>
          <th>Step</th>
          <th>Command Line</th>
          <th>Description</th>
      </tr>
      <tr>
          <td>1. Bootstrap the environment</td>
          <td>
              <table>
                  <tr>
                      <th>Linux / MacOS</th>
                      <td><code>./Bootstrap.sh [--python-version &lt;python version&gt;]</code></td>
                  </tr>
                  <tr>
                      <th>Windows</th>
                      <td><code>Bootstrap.cmd [--python-version &lt;python version&gt;]</code></td>
                  </tr>
              </table>
          </td>
          <td>Prepares the repository for local development by enlisting in all dependencies.</td>
      </tr>
      <tr>
          <td>2. Activate the environment</td>
          <td>
              <table>
                  <tr>
                      <th>Linux / MacOS</th>
                      <td><code>. ./Activate.sh</code></td>
                  </tr>
                  <tr>
                      <th>Windows</th>
                      <td><code>Activate.cmd</code></td>
                  </tr>
              </table>
          </td>
          <td>
              <p>Activates the terminal for development. Each new terminal window must be activated.</p>
              <p>Activate.sh/.cmd is actually a shortcut to the most recently bootstrapped version of python (e.g. Activate3.11.sh/.cmd). With this functionality, it is possible to support multiple python versions in the same repository and activate each in a terminal using the python-specific activation script.</p>
          </td>
      </tr>
      <tr>
          <td>3. [Optional] Deactivate the environment</td>
          <td>
              <table>
                  <tr>
                      <th>Linux / MacOS</th>
                      <td><code>. ./Deactivate.sh</code></td>
                  </tr>
                  <tr>
                      <th>Windows</th>
                      <td><code>Deactivate.cmd</code></td>
                  </tr>
              </table>
          </td>
          <td>
              Deactivates the terminal environment. Deactivating is optional, as the terminal window itself may be closed when development activities are complete.
          </td>
      </tr>
      </table>
      
      ## Development Activities
      Each of these activities can be invoked from an activated terminal on your local machine.
      
      | Activity | Command Line | Description | Invoked by Continuous Integration |
      | --- | --- | --- | --- |
      | Code Formatting | `python Build.py black [--format]` | Format source code using [black](https://github.com/psf/black) based on settings in `pyproject.toml`. | |
      | Static Code Analysis | `python Build.py pylint` | Validate source code using [pylint](https://github.com/pylint-dev/pylint) based on settings in `pyproject.toml`. | |
      | Automated Testing | `python Build.py pytest [--code-coverage]` | Run automated tests using [pytest](https://docs.pytest.org/) and (optionally) extract code coverage information using [coverage](https://coverage.readthedocs.io/) based on settings in `pyproject.toml`. | |
      | Semantic Version Generation | `python Build.py update_version` | Generate a new [Semantic Version](https://semver.org) based on git commits using [AutoGitSemVer](https://github.com/davidbrownell/AutoGitSemVer). Version information is stored in `/src/this_is_the_project_name/__init__.py`. | |
      | Python Package Creation | <p><code>python Build.py package</code></p><p>Requires that the repository was bootstrapped with the <code>--package</code> flag. | Create a python package using [setuptools](https://github.com/pypa/setuptools) based on settings in `pyproject.toml`. | |
      | Python Package Publishing | <p><code>python Build.py publish</code></p><p>Requires that the repository was bootstrapped with the <code>--package</code> flag. | Publish a python package to [PyPi](https://pypi.org). | |
      | Build Binaries | `python Build.py build_binaries` |  Create a python binary for your current operating system using [cx_Freeze](https://cx-freeze.readthedocs.io/) based on settings in `src/BuildBinary.py`. | |
      | Development Docker Image | `python Build.py create_docker_image` | Create a [docker](https://docker.com) image for a bootstrapped development environment. This functionality is useful when adhering to the [FAIR principles for research software](https://doi.org/10.1038/s41597-022-01710-x) by supporting the creation of a development environment and its dependencies as they existed at the moment when the image was created. | |
  
    ''',
    'GOVERNANCE.md': '''
      # Governance
      This project is governed by our [Code of Conduct](CODE_OF_CONDUCT.md) and [Contribution Guidelines](CONTRIBUTING.md).
  
    ''',
    'LICENSE.txt': '''
      MIT LICENSE
      
      Copyright (c) 2024 this_is_the_project_name
      
      Permission is hereby granted, free of charge, to any person obtaining a copy
      of this software and associated documentation files (the "Software"), to deal
      in the Software without restriction, including without limitation the rights
      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      copies of the Software, and to permit persons to whom the Software is
      furnished to do so, subject to the following conditions:
      
      The above copyright notice and this permission notice shall be included in all
      copies or substantial portions of the Software.
      
      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
      SOFTWARE.
  
    ''',
    'MAINTAINERS.md': '''
      # Maintainers
      
      This page lists all active maintainers of this repository. If you were a maintainer and would like to add your name to the Emeritus list, please send us a pull request.
      
      See [Code of Conduct](CODE_OF_CONDUCT.md) and [Contributing](CONTRIBUTING.md) for general contribution guidelines.
      
      ## Current Maintainers
      | Maintainer | GitHub ID | Affiliation |
      | --- | --- | --- |
      TODO: Add maintainers
      
      ## Emeritus
      | Maintainer | GitHub ID | Affiliation |
      | --- | --- | --- |
  
    ''',
    'README.md': '''
      # this_is_the_project_name
      
      <!-- BEGIN: Exclude Package -->
      <!-- [BEGIN] Badges -->
      <!-- [END] Badges -->
      <!-- END: Exclude Package -->
      
      <<project_description>>
      
      <!-- BEGIN: Exclude Package -->
      ## Contents
      - [Overview](#overview)
      - [Installation](#installation)
      - [Development](#development)
      - [Additional Information](#additional-information)
      - [License](#license)
      <!-- END: Exclude Package -->
      
      ## Overview
      TODO: Complete this section
      
      ### How to use this_is_the_project_name
      TODO: Complete this section
      
      <!-- BEGIN: Exclude Package -->
      ## Installation
      ### Installation via pip
      To install the this_is_the_project_name package via [pip](https://pip.pypa.io/en/stable/) (Python Installer for Python) for use with your python code:
      
      `pip install this_is_the_project_name`
      
      ## Development
      Please visit CONTRIBUTING.md and DEVELOPMENT.md for information on contributing to this project.
      <!-- END: Exclude Package -->
      
      ## Additional Information
      Additional information can be found at these locations.
      
      | Title | Document | Description |
      | --- | --- | --- |
      | Code of Conduct | CODE_OF_CONDUCT.md | Information about the the norms, rules, and responsibilities we adhere to when participating in this open source community. |
      | Contributing | CONTRIBUTING.md | Information about contributing code changes to this project. |
      | Development | DEVELOPMENT.md | Information about development activities involved in making changes to this project. |
      | Governance | GOVERNANCE.md | Information about how this project is governed. |
      | Maintainers | MAINTAINERS.md | Information about individuals who maintain this project. |
      | Security | SECURITY.md | Information about how to privately report security issues associated with this project. |
      ## License
      
      this_is_the_project_name is licensed under the <a href="https://choosealicense.com/licenses/mit/" target="_blank">MIT</a> license.
  
    ''',
    'SECURITY.md': '''
      # Security
      
      If you find a significant vulnerability, or evidence of one, please report it privately.
      
      TODO: Include information on how to securely submit a vulnerability.
      
      We will gladly give credit to anyone who reports a vulnerability so that we can fix it. If you want to remain anonymous or pseudonymous instead, please let us know that; we will gladly respect your wishes.
      
      We gladly welcome patches to fix such vulnerabilities! See [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributions.
  
    ''',
    'post_generation_actions.html': '''
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <meta http-equiv="X-UA-Compatible" content="ie=edge">
          <title>this_is_the_project_name Post Generation Actions</title>
        </head>
        <style>
          body {
            font-family: "Open Sans", sans-serif;
          }
      
          details {
            width: 100%;
            overflow: hidden; /* Keep this line to prevent an odd blue outline around the element in Safari. */
          }
      
          details summary {
            display: block;
          }
      
          details summary::-webkit-details-marker {
            display: none;
          }
      
          details summary span {
            position: relative;
            display: flex;
            align-items: center;
            padding-left: 1rem;
            background: #444;
            color: #fff;
            height: 4rem;
          }
      
          details summary span:hover {
            cursor: pointer;
          }
      
          details summary span::before {
            content: "â–º";
            font-size: 1rem;
            display: flex;
            align-items: center;
            margin-right: 0.5rem;
            transition: rotate 200ms 400ms ease-out;
          }
      
          details[open] summary span::before {
            rotate: 90deg;
            transition: rotate 200ms ease-out;
          }
      
          details summary span input {
            margin-right: 0.75rem;
          }
      
          div.details-content {
            box-sizing: border-box;
            width: 100%;
            max-height: 0;
            overflow: hidden;
            padding: 0 10px;
            border: 2px solid transparent;
            transition: max-height 400ms ease-out, border 0ms 400ms linear;
            background-color: rgba(0, 0, 0, 0.05);
            margin-bottom: 1rem;
          }
      
          details[open] + div.details-content {
            max-height: 800px; /* Set a max-height value enough to show all the content */
            border-color: #888;
            transition: max-height 400ms ease-out, border 0ms linear;
          }
      
          code {
            background-color: rgba(0, 0, 0, 0.10);
          }
      
        </style>
        <body>
          <h1>this_is_the_project_name Post Generation Actions</h1>
          <p>The following steps must be completed in the order listed now that your project has been generated.</p>
      
          <!-- [BEGIN] Before Repository Tool Instruction -->
          <!-- [END] Before Repository Tool Instruction -->
      
          
          <!-- [BEGIN] After Repository Tool Instruction -->
                  <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-readme.md">Update README.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>README.md</code>.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-maintainers.md">Update MAINTAINERS.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>MAINTAINERS.md</code>.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-contributing.md">Update CONTRIBUTING.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>CONTRIBUTING.md</code>.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-security.md">Update SECURITY.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>SECURITY.md</code>.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-pyproject.toml">Update pyproject.toml</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Python development tools, package dependencies, and packaging instructions are configured in <code>pyproject.toml</code>. Please visit <a href="https://packaging.python.org/en/latest/guides/writing-pyproject-toml/" target="_blank">this link</a> for more information on these files.</p>
      <p>Please search for and replace all <code>TODO:</code> comments in <code>pyproject.toml</code>.</p>
      
              </div>
      <!-- [END] After Repository Tool Instruction -->
      
          <details>
              <summary>
                  <span role="term"><input type="checkbox" id="delete-this-file">Delete this file</span>
              </summary>
          </details>
          <div role="definition" class="details-content">
              <p>After you have completed all the steps, you can delete this file.</p>
              <p>Now your project is ready to go!</p>
          </div>
      
          <script>
            document.querySelectorAll("details summary span input[type=checkbox]").forEach(
              function(checkbox) {
                var key = `${ location.href }-${ checkbox.id }`;
      
                if(window.localStorage.getItem(key) === "true")
                  checkbox.checked = true;
      
                this.addEventListener(
                  "change",
                  function() {
                    window.localStorage.setItem(key, checkbox.checked ? "true" : "false");
                  },
                );
              }
            );
          </script>
      
          <!-- TODO(copier-ProjectScaffolding): Decorate code elements with a "copy code" button that copies to the clipboard -->
        </body>
      </html>
  
    ''',
    'pyproject.toml': '''
      # https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
      
      [build-system]
      requires = ["setuptools >= 63.0"]
      build-backend = "setuptools.build_meta"
      
      # ----------------------------------------------------------------------
      # |
      # |  Project
      # |
      # ----------------------------------------------------------------------
      [project]
      name = "this_is_the_project_name"
      description = "<<project_description>>"
      
      license = { text = "MIT" }
      
      authors = [
          { name = "<<author_name>>", email = "<<author_email>>" },
      ]
      
      keywords = [
          # TODO: Add keywords specific to your project.
      ]
      
      # https://pypi.org/classifiers/
      classifiers = [
          # TODO: Add additional classifiers specific to your project.
          "License :: OSI Approved :: MIT License",
          "Operating System :: MacOS",
          "Operating System :: Microsoft :: Windows",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
      ]
      
      dependencies = [
          # TODO: Add additional package dependencies specific to your project.
          "typer ~= 0.9"
      ]
      
      dynamic = [
          "version",
      ]
      
      readme = "README.md"
      
      [project.optional-dependencies]
      dev = [
          "dbrownell_DevTools",
      ]
      
      package = [
          "build ~= 1.2",
          "cx_Freeze ~= 6.15",
          "twine ~= 5.1",
      ]
      
      [project.urls]
      Homepage = "TODO: Enter the homepage link for your project."
      Documentation = "TODO: Enter the documetnation link for your project."
      Repository = "TODO: Enter the repository link for your project."
      
      
      [project.scripts]
      this_is_the_project_name = "this_is_the_project_name:EntryPoint.app"
      
      # ----------------------------------------------------------------------
      # |
      # |  black
      # |
      # ----------------------------------------------------------------------
      [tool.black]
      line-length = 100
      
      # ----------------------------------------------------------------------
      # |
      # |  pylint
      # |
      # ----------------------------------------------------------------------
      [tool.pylint.basic]
      class-const-naming-style = "any"
      function-naming-style = "PascalCase"
      good-names = [
          "i",
          "j",
          "k",
          "ex",
          "Run",
          "_",
          "dm",                                   # added
          "f",                                    # added
      ]
      method-naming-style = "any"
      module-naming-style = "PascalCase"
      
      [tool.pylint.design]
      max-args = 10
      max-parents = 15
      
      [tool.pylint.main]
      ignore-paths = [
          # Note that the pylint vscode extension has trouble with wrapping these patterns in quotes
          # (which is required to parse the file correctly). Because of this, each pattern must be
          # converted to a glob pattern and specified in the pylint vscode settings as well.
          "^.+?Tests/.*$",
      ]
      
      [tool.pylint."messages control"]
      disable = [
          "raw-checker-failed",
          "bad-inline-option",
          "locally-disabled",
          "file-ignored",
          "suppressed-message",
          "useless-suppression",
          "deprecated-pragma",
          "use-symbolic-message-instead",
          "assignment-from-no-return",            # added
          "broad-except",                         # added
          "broad-exception-raised",               # added
          "cell-var-from-loop",                   # added
          "consider-using-f-string",              # added
          "import-outside-toplevel",              # added
          "line-too-long",                        # added
          "missing-function-docstring",           # added
          "subprocess-run-check",                 # added
          "super-with-arguments",                 # added
          "too-few-public-methods",               # added
          "unnecessary-lambda-assignment",        # added
          "unspecified-encoding",                 # added
      ]
      
      # ----------------------------------------------------------------------
      # |
      # |  pyright
      # |
      # ----------------------------------------------------------------------
      [tool.pyright]
      exclude = [
          "**/*Tests/*",
          "**/Generated/*",
      ]
      
      reportMissingImports = true
      reportMissingTypeStubs = false
      
      # ----------------------------------------------------------------------
      # |
      # |  pytest
      # |
      # ----------------------------------------------------------------------
      [tool.pytest.ini_options]
      python_files = [
          "**/*Test.py",
      ]
      
      # ----------------------------------------------------------------------
      # |
      # |  setuptools
      # |
      # ----------------------------------------------------------------------
      [tool.setuptools.dynamic]
      version = { attr = "this_is_the_project_name.__version__" }
      
      [tool.setuptools.packages.find]
      where = ["src"]
  
    ''',
    'src/AutoGitSemVer.yaml': '''
      # This file is used by AutoGitSemVer to configure the semantic version of the this_is_the_project_name package.
      # It indicates that AutoGitSemVer should only look at changes in this directory, its descendants, and files specified in
      # additional_dependencies when calculating the semantic version for the package.
      additional_dependencies:
        - "../pyproject.toml"
        - "../README.md"
  
    ''',
    'src/BuildBinary.py': '''
      """Builds the binary for this project."""
      
      import datetime
      import importlib
      import re
      
      from functools import cache
      from pathlib import Path
      
      from cx_Freeze import setup, Executable
      from dbrownell_Common import PathEx
      
      
      # ----------------------------------------------------------------------
      @cache
      def _GetName() -> str:
          return "this_is_the_project_name"
      
      
      # ----------------------------------------------------------------------
      @cache
      def _GetVersionAndDocstring() -> tuple[str, str]:
          mod = importlib.import_module(_GetName())
          return mod.__version__, mod.__doc__ or ""
      
      
      # ----------------------------------------------------------------------
      @cache
      def _GetEntryPoint() -> Path:
          return PathEx.EnsureFile(Path(__file__).parent / _GetName() / "EntryPoint.py")
      
      
      # ----------------------------------------------------------------------
      @cache
      def _GetCopyright() -> str:
          match = re.search(
              r"""(?#
              Copyright                           )Copyright(?#
              Mark [Optional]                     )(?P<mark>\s+\([cC]\))?(?#
              Year                                )\s+(?P<year>\d{4})(?#
              Year Range [Optional]               )(?:\s*-\s*\d{2,4})?(?#
              Suffix                              )(?P<suffix>.+)(?#
              End of line                         )$(?#
              )""",
              PathEx.EnsureFile(Path(__file__).parent.parent / "LICENSE.txt").read_text(),
              flags=re.MULTILINE,
          )
      
          current_year = datetime.datetime.now().year
      
          if not match:
              return f"Copyright {current_year} <<author_name>>"
      
          initial_year = int(match.group("year"))
      
          if current_year == initial_year:
              year_suffix = ""
          elif current_year // 100 != initial_year // 100:
              year_suffix = f"-{current_year}"
          else:
              year_suffix = f"-{current_year % 100}"
      
          return f"Copyright{match.group('mark')} {initial_year}{year_suffix} <<author_name>>"
      
      
      # ----------------------------------------------------------------------
      setup(
          name=_GetName(),
          version=_GetVersionAndDocstring()[0],
          description=_GetVersionAndDocstring()[1],
          executables=[
              Executable(
                  _GetEntryPoint(),
                  base="console",
                  copyright=_GetCopyright(),
                  # icon=<icon_filename>,
                  target_name=_GetName(),
                  # trademarks=<trademarks>,
              ),
          ],
          options={
              "build_exe": {
                  "excludes": [
                      "tcl",
                      "tkinter",
                  ],
                  "no_compress": False,
                  "optimize": 0,
                  # "packages": [],
                  # "include_files": [],
              },
          },
      )
  
    ''',
    'src/this_is_the_project_name/EntryPoint.py': '''
      """This file serves as an example of how to create scripts that can be invoked from the command line once the package is installed."""
      
      import sys
      
      import typer
      
      from typer.core import TyperGroup  # type: ignore [import-untyped]
      
      from this_is_the_project_name import Math, __version__
      
      
      # ----------------------------------------------------------------------
      class NaturalOrderGrouper(TyperGroup):
          # pylint: disable=missing-class-docstring
          # ----------------------------------------------------------------------
          def list_commands(self, *args, **kwargs):  # pylint: disable=unused-argument
              return self.commands.keys()
      
      
      # ----------------------------------------------------------------------
      app = typer.Typer(
          cls=NaturalOrderGrouper,
          help=__doc__,
          no_args_is_help=True,
          pretty_exceptions_show_locals=False,
          pretty_exceptions_enable=False,
      )
      
      
      # ----------------------------------------------------------------------
      @app.command("Add")
      def Add(
          x: int,
          y: int,
      ) -> None:
          """Adds 2 values."""
      
          sys.stdout.write(str(Math.Add(x, y)))
      
      
      # ----------------------------------------------------------------------
      @app.command("Sub")
      def Sub(
          x: int,
          y: int,
      ) -> None:
          """Subtracts 2 values."""
      
          sys.stdout.write(str(Math.Sub(x, y)))
      
      
      # ----------------------------------------------------------------------
      @app.command("Mult")
      def Mult(
          x: int,
          y: int,
      ) -> None:
          """Multiplies 2 values."""
      
          sys.stdout.write(str(Math.Mult(x, y)))
      
      
      # ----------------------------------------------------------------------
      @app.command("Div")
      def Div(
          x: int,
          y: int,
      ) -> None:
          """Divides 1 value by another."""
      
          sys.stdout.write(str(Math.Div(x, y)))
      
      
      # ----------------------------------------------------------------------
      @app.command("Version")
      def Version() -> None:
          """Prints the version of the package."""
      
          sys.stdout.write(__version__)
      
      
      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
      if __name__ == "__main__":
          app()  # pragma: no cover
  
    ''',
    'src/this_is_the_project_name/Math.py': '''
      """Basic math functions. This file illustrates how to create a python package that contains functions that can be invoked by other python code."""
      
      
      # ----------------------------------------------------------------------
      def Add(x, y):
          return x + y
      
      
      # ----------------------------------------------------------------------
      def Sub(x, y):
          return x - y
      
      
      # ----------------------------------------------------------------------
      def Mult(x, y):
          return x * y
      
      
      # ----------------------------------------------------------------------
      def Div(x, y):
          return x / y
  
    ''',
    'src/this_is_the_project_name/__init__.py': '''
      # pylint: disable=missing-module-docstring,invalid-name
      
      # Note that this value will be overwritten by calls to `python ../../Build.py update_version` based
      # on changes observed in the git repository. The default value below will be used until the value
      # here is explicitly updated by the Continuous Integration system.
      __version__ = "0.1.0"
      
      from .Math import Add, Sub, Mult, Div
  
    ''',
    'tests/EntryPoint_UnitTest.py': '''
      """Unit tests for EntryPoint.py"""
      
      from typer.testing import CliRunner
      
      from this_is_the_project_name import __version__
      from this_is_the_project_name.EntryPoint import app
      
      
      # ----------------------------------------------------------------------
      def test_Add():
          result = CliRunner().invoke(app, ["Add", "1", "20"])
          assert result.exit_code == 0
          assert result.stdout == "21"
      
      
      # ----------------------------------------------------------------------
      def test_Sub():
          result = CliRunner().invoke(app, ["Sub", "1", "20"])
          assert result.exit_code == 0
          assert result.stdout == "-19"
      
      
      # ----------------------------------------------------------------------
      def test_Mult():
          result = CliRunner().invoke(app, ["Mult", "2", "15"])
          assert result.exit_code == 0
          assert result.stdout == "30"
      
      
      # ----------------------------------------------------------------------
      def test_Div():
          result = CliRunner().invoke(app, ["Div", "6", "3"])
          assert result.exit_code == 0
          assert result.stdout == "2.0"
      
      
      # ----------------------------------------------------------------------
      def test_Version():
          result = CliRunner().invoke(app, ["Version"])
          assert result.exit_code == 0
          assert result.stdout == __version__
      
      
      # ----------------------------------------------------------------------
      def test_NoArgs():
          result = CliRunner().invoke(app, [])
          assert result.exit_code == 0
          assert "Add" in result.stdout
          assert "Sub" in result.stdout
          assert "Mult" in result.stdout
          assert "Div" in result.stdout
          assert "Version" in result.stdout
  
    ''',
    'tests/Math_UnitTest.py': '''
      """Unit tests for Math.py"""
      
      from this_is_the_project_name.Math import *
      
      
      # ----------------------------------------------------------------------
      def test_Add():
          assert Add(1, 20) == 21
      
      
      # ----------------------------------------------------------------------
      def test_Sub():
          assert Sub(1, 20) == -19
      
      
      # ----------------------------------------------------------------------
      def test_Mult():
          assert Mult(2, 15) == 30
      
      
      # ----------------------------------------------------------------------
      def test_Div():
          assert Div(6, 3) == 2
  
    ''',
  })
# ---
# name: test_All[13-True_git_None_None]
  dict({
    '.gitignore': '''
      post_generation_actions.html
  
    ''',
    'CODE_OF_CONDUCT.md': '''
      # this_is_the_project_name Open Source Code of Conduct
      
      ## Principles
      These principles guide our data, product, and process decisions, architecture, and approach.
      
      - Open means transparent and participatory.
      - We take a modular and modern approach to software development.
      - We build open-source software and open-source process.
      - We value ease of implementation.
      - Fostering community includes building capacity and making our software and processes accessible to participants with diverse backgrounds and skillsets.
      - Data (and data science) is as important as software and process. We build open data sets where possible.
      - We strive for transparency for algorithms and places we might be introducing bias.
      
      ## Community Guidelines
      Information on contributing to this repository is available in our [Contributing file](CONTRIBUTING.md).
      
      When participating in this_is_the_project_name open source community conversations and spaces, we ask individuals to follow the following guidelines:
      
      - Embrace a culture of learning, and educate each other. We are all entering this conversation from different starting points and with different backgrounds. There are no dumb questions.
      - Take space and give space. We strive to create an equitable environment in which all are welcome and able to participate. We hope individuals feel comfortable voicing their opinions and providing contributions and will do our best to recognize and make space for individuals who may be struggling to find space here. Likewise, we expect individuals to recognize when they are taking up significant space and take a step back to allow room for others.
      - Be respectful.
      - Default to positive. Assume others' contributions are legitimate and valuable and that they are made with good intention.
      
      ## Acknowledgements
      This Community Guidelines was adapted from the [United States Digital Service](https://usds.gov) [Justice40](https://thejustice40.com) open source [repository](https://github.com/usds/justice40-tool).
  
    ''',
    'CONTRIBUTING.md': '''
      # Contribution Guidelines
      
      ## Contributor Code of Conduct
      As contributors and maintainers of this project, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities.
      
      We are committed to making participation in this project a harassment-free experience for everyone, regardless of the level of experience, gender, gender identity, expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, or religion.
      
      Examples of unacceptable behavior by participants include the use of sexual language or imagery, derogatory comments or personal attacks, trolling, public or private harassment, insults, or other unprofessional conduct.
      
      [Project maintainers](MAINTAINERS.md) have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned with this Code of Conduct.
      
      Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting one or more of the [project maintainers](MAINTAINERS.md).
      
      ## General information
      TODO: Include information on how to submit pull requests and/or issues.
      
      The [DEVELOPMENT.md](DEVELOPMENT.md) file explains how to install the program locally (highly recommended if you're going to make code changes). It also provides information useful for making changes and validating them locally before submitting a pull request.
      
      ### Pull requests and different branches recommended
      TODO: Include information on how to use branches effectively and create a pull request.
      
      ### How we handle proposals
      TODO: Include information on how proposals are handled.
      
      ### We are proactive
      In general we try to be proactive to detect and eliminate mistakes and vulnerabilities as soon as possible, and to reduce their impact when they do happen. We use a defensive design and coding style to reduce the likelihood of mistakes, a variety of tools that try to detect mistakes early, and an automatic test suite with significant coverage. We also release the software as open source software so others can review it.
      
      Since early detection and impact reduction can never be perfect, we also try to detect and repair problems during deployment as quickly as possible. This is especially true for security issues; see our [security information](#vulnerability-reporting-security-issues) for more information.
      
      ## Vulnerability reporting (security issues)
      Please privately report vulnerabilities you find so we can fix them!
      
      See [SECURITY.md](SECURITY.md) for information on how to privately report vulnerabilities.
      
      ## Acknowledgements
      
      This Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.0.0, available at [http://contributor-covenant.org/version/1/0/0/](http://contributor-covenant.org/version/1/0/0/)
  
    ''',
    'DEVELOPMENT.md': '''
      # Local Development
      
      ## Enlistment
      TODO: Complete this section
      
      ## Development Activities
      TODO: Complete this section
  
    ''',
    'GOVERNANCE.md': '''
      # Governance
      This project is governed by our [Code of Conduct](CODE_OF_CONDUCT.md) and [Contribution Guidelines](CONTRIBUTING.md).
  
    ''',
    'LICENSE.txt': '''
      MIT LICENSE
      
      Copyright (c) 2024 this_is_the_project_name
      
      Permission is hereby granted, free of charge, to any person obtaining a copy
      of this software and associated documentation files (the "Software"), to deal
      in the Software without restriction, including without limitation the rights
      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      copies of the Software, and to permit persons to whom the Software is
      furnished to do so, subject to the following conditions:
      
      The above copyright notice and this permission notice shall be included in all
      copies or substantial portions of the Software.
      
      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
      SOFTWARE.
  
    ''',
    'MAINTAINERS.md': '''
      # Maintainers
      
      This page lists all active maintainers of this repository. If you were a maintainer and would like to add your name to the Emeritus list, please send us a pull request.
      
      See [Code of Conduct](CODE_OF_CONDUCT.md) and [Contributing](CONTRIBUTING.md) for general contribution guidelines.
      
      ## Current Maintainers
      | Maintainer | GitHub ID | Affiliation |
      | --- | --- | --- |
      TODO: Add maintainers
      
      ## Emeritus
      | Maintainer | GitHub ID | Affiliation |
      | --- | --- | --- |
  
    ''',
    'README.md': '''
      # this_is_the_project_name
      
      <!-- BEGIN: Exclude Package -->
      <!-- END: Exclude Package -->
      
      <<project_description>>
      
      <!-- BEGIN: Exclude Package -->
      ## Contents
      - [Overview](#overview)
      - [Installation](#installation)
      - [Development](#development)
      - [Additional Information](#additional-information)
      - [License](#license)
      <!-- END: Exclude Package -->
      
      ## Overview
      TODO: Complete this section
      
      ### How to use this_is_the_project_name
      TODO: Complete this section
      
      <!-- BEGIN: Exclude Package -->
      ## Installation
      TODO: Complete this section
      
      ## Development
      Please visit CONTRIBUTING.md and DEVELOPMENT.md for information on contributing to this project.
      <!-- END: Exclude Package -->
      
      ## Additional Information
      Additional information can be found at these locations.
      
      | Title | Document | Description |
      | --- | --- | --- |
      | Code of Conduct | CODE_OF_CONDUCT.md | Information about the the norms, rules, and responsibilities we adhere to when participating in this open source community. |
      | Contributing | CONTRIBUTING.md | Information about contributing code changes to this project. |
      | Development | DEVELOPMENT.md | Information about development activities involved in making changes to this project. |
      | Governance | GOVERNANCE.md | Information about how this project is governed. |
      | Maintainers | MAINTAINERS.md | Information about individuals who maintain this project. |
      | Security | SECURITY.md | Information about how to privately report security issues associated with this project. |
      ## License
      
      this_is_the_project_name is licensed under the <a href="https://choosealicense.com/licenses/mit/" target="_blank">MIT</a> license.
  
    ''',
    'SECURITY.md': '''
      # Security
      
      If you find a significant vulnerability, or evidence of one, please report it privately.
      
      TODO: Include information on how to securely submit a vulnerability.
      
      We will gladly give credit to anyone who reports a vulnerability so that we can fix it. If you want to remain anonymous or pseudonymous instead, please let us know that; we will gladly respect your wishes.
      
      We gladly welcome patches to fix such vulnerabilities! See [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributions.
  
    ''',
    'post_generation_actions.html': '''
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <meta http-equiv="X-UA-Compatible" content="ie=edge">
          <title>this_is_the_project_name Post Generation Actions</title>
        </head>
        <style>
          body {
            font-family: "Open Sans", sans-serif;
          }
      
          details {
            width: 100%;
            overflow: hidden; /* Keep this line to prevent an odd blue outline around the element in Safari. */
          }
      
          details summary {
            display: block;
          }
      
          details summary::-webkit-details-marker {
            display: none;
          }
      
          details summary span {
            position: relative;
            display: flex;
            align-items: center;
            padding-left: 1rem;
            background: #444;
            color: #fff;
            height: 4rem;
          }
      
          details summary span:hover {
            cursor: pointer;
          }
      
          details summary span::before {
            content: "â–º";
            font-size: 1rem;
            display: flex;
            align-items: center;
            margin-right: 0.5rem;
            transition: rotate 200ms 400ms ease-out;
          }
      
          details[open] summary span::before {
            rotate: 90deg;
            transition: rotate 200ms ease-out;
          }
      
          details summary span input {
            margin-right: 0.75rem;
          }
      
          div.details-content {
            box-sizing: border-box;
            width: 100%;
            max-height: 0;
            overflow: hidden;
            padding: 0 10px;
            border: 2px solid transparent;
            transition: max-height 400ms ease-out, border 0ms 400ms linear;
            background-color: rgba(0, 0, 0, 0.05);
            margin-bottom: 1rem;
          }
      
          details[open] + div.details-content {
            max-height: 800px; /* Set a max-height value enough to show all the content */
            border-color: #888;
            transition: max-height 400ms ease-out, border 0ms linear;
          }
      
          code {
            background-color: rgba(0, 0, 0, 0.10);
          }
      
        </style>
        <body>
          <h1>this_is_the_project_name Post Generation Actions</h1>
          <p>The following steps must be completed in the order listed now that your project has been generated.</p>
      
          
                  <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="initialize-the-git-repository">Initialize the git repository</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>In this step, we will commit the files generated in git and push the changes.</p>
      
      <p>Open a terminal window, navigate to your repository, and run the following commands:</p>
      
      1. <code>git add --all</code><br/>
      2. <code>git commit -m "ðŸŽ‰ Initial commit"</code><br/>
      3. <code>git push</code><br/>
      </p>
      
              </div>
      
          <!-- [BEGIN] After Repository Tool Instruction -->
                  <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-readme.md">Update README.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>README.md</code>.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-maintainers.md">Update MAINTAINERS.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>MAINTAINERS.md</code>.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-contributing.md">Update CONTRIBUTING.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>CONTRIBUTING.md</code>.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-security.md">Update SECURITY.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>SECURITY.md</code>.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-development.md">Update DEVELOPMENT.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>DEVELOPMENT.md</code>.</p>
      
              </div>
      <!-- [END] After Repository Tool Instruction -->
      
          <details>
              <summary>
                  <span role="term"><input type="checkbox" id="delete-this-file">Delete this file</span>
              </summary>
          </details>
          <div role="definition" class="details-content">
              <p>After you have completed all the steps, you can delete this file.</p>
              <p>Now your project is ready to go!</p>
          </div>
      
          <script>
            document.querySelectorAll("details summary span input[type=checkbox]").forEach(
              function(checkbox) {
                var key = `${ location.href }-${ checkbox.id }`;
      
                if(window.localStorage.getItem(key) === "true")
                  checkbox.checked = true;
      
                this.addEventListener(
                  "change",
                  function() {
                    window.localStorage.setItem(key, checkbox.checked ? "true" : "false");
                  },
                );
              }
            );
          </script>
      
          <!-- TODO(copier-ProjectScaffolding): Decorate code elements with a "copy code" button that copies to the clipboard -->
        </body>
      </html>
  
    ''',
  })
# ---
# name: test_All[14-True_git_None_PythonExecutionEnvironment]
  dict({
    '.gitignore': '''
      post_generation_actions.html
      
      Activate*.cmd
      Activate*.sh
      Deactivate*.cmd
      Deactivate*.sh
      
      **/__pycache__/**
      **/Generated/**
  
    ''',
    'Bootstrap.cmd': '''
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  This script downloads and invokes BoostrapImpl.cmd from the PythonBootstrapper
      @REM |  repository (https://github.com/davidbrownell/PythonBootstrapper).
      @REM |
      @REM |  Arguments:
      @REM |
      @REM |      --debug                         Display additional debugging information.
      @REM |
      @REM |      --force                         Ensure that a new python environment is installed, even if it already exists.
      @REM |
      @REM |      --python-version <version>      Specify the python version to install; the default python version is installed if not specified.
      @REM |
      @REM |      --bootstrap-branch <branch>     Specify the branch of the PythonBootstrapper repository to use when downloading BootstrapImpl; "main" is used if not specified.
      @REM |
      @REM ----------------------------------------------------------------------
      @setlocal EnableDelayedExpansion
      @pushd %~dp0
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Parse and Process Arguments
      @REM |
      @REM ----------------------------------------------------------------------
      @set _BOOTSTRAP_BRANCH=main
      @set _COMMAND_LINE_ARGS=
      
      :ParseArgs
      @if '%1' EQU '' @goto :ParseArgs_End
      
      @set ARG=%1
      @set ARG=%ARG:"=%
      
      @if "%ARG%" NEQ "--bootstrap-branch" @goto :ParseArgs_BootstrapBranchEnd
      
      @REM Extract the bootstrap branch
      @shift /1
      
      @set ARG=%1
      @set ARG=%ARG:"=%
      
      @set _BOOTSTRAP_BRANCH=%ARG%
      @goto :ParseArgs_Next
      
      :ParseArgs_BootstrapBranchEnd
      @set _COMMAND_LINE_ARGS=%_COMMAND_LINE_ARGS% %1
      
      :ParseArgs_Next
      @shift /1
      @goto :ParseArgs
      
      :ParseArgs_End
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Download BootstrapImpl.cmd
      @REM |
      @REM ----------------------------------------------------------------------
      @echo Downloading Bootstrap code...
      
      @set _BOOTSTRAPIMPL_URL=https://raw.githubusercontent.com/davidbrownell/PythonBootstrapper/%_BOOTSTRAP_BRANCH%/src/BootstrapImpl.cmd
      
      @call :_CreateTempFileName
      
      @curl --header "Cache-Control: no-cache, no-store" --header "Pragma: no-cache" --location %_BOOTSTRAPIMPL_URL% --output BootstrapImpl.cmd --no-progress-meter --fail-with-body > "%_BOOTSTRAP_TEMP_FILENAME%" 2>&1
      @set _ERRORLEVEL=%ERRORLEVEL%
      
      @if %_ERRORLEVEL% NEQ 0 (
          @echo [1ADownloading Bootstrap code...[31m[1mFAILED[0m ^(%_BOOTSTRAPIMPL_URL%^).
          @echo.
      
          @type "%_BOOTSTRAP_TEMP_FILENAME%"
          @goto :Exit
      )
      
      @call :_DeleteTempFile
      @echo [1ADownloading Bootstrap code...[32m[1mDONE[0m.
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Invoke BootstrapImpl.cmd
      @REM |
      @REM ----------------------------------------------------------------------
      @call BootstrapImpl.cmd %_COMMAND_LINE_ARGS%
      @set _ERRORLEVEL=%ERRORLEVEL%
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Exit
      @REM |
      @REM ----------------------------------------------------------------------
      :Exit
      @if exist BootstrapImpl.cmd del BootstrapImpl.cmd
      @call :_DeleteTempFile
      
      @popd
      
      @endlocal & @exit /B %_ERRORLEVEL%
      
      @REM ----------------------------------------------------------------------
      @REM ----------------------------------------------------------------------
      @REM ----------------------------------------------------------------------
      :_CreateTempFileName
      @set _BOOTSTRAP_TEMP_FILENAME=%CD%\Bootstrap-!RANDOM!-!Time:~6,5!
      @goto :EOF
      
      @REM ----------------------------------------------------------------------
      :_DeleteTempFile
      @if "%_BOOTSTRAP_TEMP_FILENAME%" NEQ "" (
          @if exist "%_BOOTSTRAP_TEMP_FILENAME%" (
              @del "%_BOOTSTRAP_TEMP_FILENAME%"
          )
      )
      @goto :EOF
  
    ''',
    'Bootstrap.sh': '''
      #!/usr/bin/env bash
      # ----------------------------------------------------------------------
      # |
      # |  This script downloads and invokes BootstrapImpl.sh from the PythonBootstrapper
      # |  repository (https://github.com/davidbrownell/PythonBootstrapper).
      # |
      # |  Arguments:
      # |
      # |      --debug                         Display additional debugging information.
      # |
      # |      --force                         Ensure that a new python environment is installed, even if it already exists.
      # |
      # |      --python-version <version>      Specify the python version to install; the default python version is installed if not specified.
      # |
      # |      --bootstrap-branch <branch>     Specify the branch of the PythonBootstrapper repository to use when downloading BootstrapImpl; "main" is used if not specified.
      # |
      # ----------------------------------------------------------------------
      set +v # Continue on errors
      
      this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
      pushd "${this_dir}" > /dev/null || exit
      
      # ----------------------------------------------------------------------
      # |
      # |  Parse and Process Arguments
      # |
      # ----------------------------------------------------------------------
      bootstrap_branch=main
      command_line_args=()
      
      while [[ $# -gt 0 ]]; do
          if [[ "$1" == "--bootstrap-branch" ]]; then
              bootstrap_branch=$2
              shift
          else
              command_line_args+=("$1")
          fi
      
          shift
      done
      
      # ----------------------------------------------------------------------
      # |
      # |  Download BootstrapImpl.sh
      # |
      # ----------------------------------------------------------------------
      echo "Downloading Bootstrap code..."
      
      bootstrap_url=https://raw.githubusercontent.com/davidbrownell/PythonBootstrapper/${bootstrap_branch}/src/BootstrapImpl.sh
      
      temp_script_name=$(mktemp Bootstrap.XXXXXX)
      
      curl --header "Cache-Control: no-cache, no-store" --header "Pragma: no-cache" --location ${bootstrap_url} --output BootstrapImpl.sh --no-progress-meter --fail-with-body > "${temp_script_name}" 2>&1
      error=$?
      
      if [[ ${error} != 0 ]]; then
          echo "[1ADownloading Bootstrap code...[31m[1mFAILED[0m (${bootstrap_url})."
          echo ""
      
          cat "${temp_script_name}"
          rm "${temp_script_name}"
      
          exit ${error}
      fi
      
      chmod u+x BootstrapImpl.sh
      echo "[1ADownloading Bootstrap code...[32m[1mDONE[0m."
      
      # ----------------------------------------------------------------------
      # |
      # |  Invoke BootstrapImpl.sh
      # |
      # ----------------------------------------------------------------------
      ./BootstrapImpl.sh "${command_line_args[@]}"
      error=$?
      
      # ----------------------------------------------------------------------
      # |
      # |  Exit
      # |
      # ----------------------------------------------------------------------
      rm "BootstrapImpl.sh"
      rm "${temp_script_name}"
      
      exit ${error}
  
    ''',
    'BootstrapEpilog.py': '''
      # pylint: disable=missing-module-docstring
      
      import subprocess
      import sys
      
      from pathlib import Path
      
      
      # Parse the arguments
      no_cache = False
      
      display_flags: list[str] = []
      
      # First arg is the script name, second arg is the name of the shell script to write to
      for arg in sys.argv[2:]:
          if arg == "--no-cache":
              no_cache = True
          else:
              raise Exception("'{}' is not a recognized argument.".format(arg))
      
      subprocess.run(
          "pip install --disable-pip-version-check {} --requirement requirements.txt".format(
              "--no-cache-dir" if no_cache else "",
          ),
          check=True,
          shell=True,
          cwd=Path(__file__).parent,
      )
  
    ''',
    'CODE_OF_CONDUCT.md': '''
      # this_is_the_project_name Open Source Code of Conduct
      
      ## Principles
      These principles guide our data, product, and process decisions, architecture, and approach.
      
      - Open means transparent and participatory.
      - We take a modular and modern approach to software development.
      - We build open-source software and open-source process.
      - We value ease of implementation.
      - Fostering community includes building capacity and making our software and processes accessible to participants with diverse backgrounds and skillsets.
      - Data (and data science) is as important as software and process. We build open data sets where possible.
      - We strive for transparency for algorithms and places we might be introducing bias.
      
      ## Community Guidelines
      Information on contributing to this repository is available in our [Contributing file](CONTRIBUTING.md).
      
      When participating in this_is_the_project_name open source community conversations and spaces, we ask individuals to follow the following guidelines:
      
      - Embrace a culture of learning, and educate each other. We are all entering this conversation from different starting points and with different backgrounds. There are no dumb questions.
      - Take space and give space. We strive to create an equitable environment in which all are welcome and able to participate. We hope individuals feel comfortable voicing their opinions and providing contributions and will do our best to recognize and make space for individuals who may be struggling to find space here. Likewise, we expect individuals to recognize when they are taking up significant space and take a step back to allow room for others.
      - Be respectful.
      - Default to positive. Assume others' contributions are legitimate and valuable and that they are made with good intention.
      
      ## Acknowledgements
      This Community Guidelines was adapted from the [United States Digital Service](https://usds.gov) [Justice40](https://thejustice40.com) open source [repository](https://github.com/usds/justice40-tool).
  
    ''',
    'CONTRIBUTING.md': '''
      # Contribution Guidelines
      
      ## Contributor Code of Conduct
      As contributors and maintainers of this project, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities.
      
      We are committed to making participation in this project a harassment-free experience for everyone, regardless of the level of experience, gender, gender identity, expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, or religion.
      
      Examples of unacceptable behavior by participants include the use of sexual language or imagery, derogatory comments or personal attacks, trolling, public or private harassment, insults, or other unprofessional conduct.
      
      [Project maintainers](MAINTAINERS.md) have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned with this Code of Conduct.
      
      Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting one or more of the [project maintainers](MAINTAINERS.md).
      
      ## General information
      TODO: Include information on how to submit pull requests and/or issues.
      
      The [DEVELOPMENT.md](DEVELOPMENT.md) file explains how to install the program locally (highly recommended if you're going to make code changes). It also provides information useful for making changes and validating them locally before submitting a pull request.
      
      ### Pull requests and different branches recommended
      TODO: Include information on how to use branches effectively and create a pull request.
      
      ### How we handle proposals
      TODO: Include information on how proposals are handled.
      
      ### We are proactive
      In general we try to be proactive to detect and eliminate mistakes and vulnerabilities as soon as possible, and to reduce their impact when they do happen. We use a defensive design and coding style to reduce the likelihood of mistakes, a variety of tools that try to detect mistakes early, and an automatic test suite with significant coverage. We also release the software as open source software so others can review it.
      
      Since early detection and impact reduction can never be perfect, we also try to detect and repair problems during deployment as quickly as possible. This is especially true for security issues; see our [security information](#vulnerability-reporting-security-issues) for more information.
      
      ## Vulnerability reporting (security issues)
      Please privately report vulnerabilities you find so we can fix them!
      
      See [SECURITY.md](SECURITY.md) for information on how to privately report vulnerabilities.
      
      ## Acknowledgements
      
      This Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.0.0, available at [http://contributor-covenant.org/version/1/0/0/](http://contributor-covenant.org/version/1/0/0/)
  
    ''',
    'DEVELOPMENT.md': '''
      # Local Development
      
      ## Enlistment
      Enlistment in this repository involves these steps.
      
      <table>
      <tr>
          <th>Step</th>
          <th>Command Line</th>
          <th>Description</th>
      </tr>
      <tr>
          <td>1. Bootstrap the environment</td>
          <td>
              <table>
                  <tr>
                      <th>Linux / MacOS</th>
                      <td><code>./Bootstrap.sh [--python-version &lt;python version&gt;]</code></td>
                  </tr>
                  <tr>
                      <th>Windows</th>
                      <td><code>Bootstrap.cmd [--python-version &lt;python version&gt;]</code></td>
                  </tr>
              </table>
          </td>
          <td>Prepares the repository for local development by enlisting in all dependencies.</td>
      </tr>
      <tr>
          <td>2. Activate the environment</td>
          <td>
              <table>
                  <tr>
                      <th>Linux / MacOS</th>
                      <td><code>. ./Activate.sh</code></td>
                  </tr>
                  <tr>
                      <th>Windows</th>
                      <td><code>Activate.cmd</code></td>
                  </tr>
              </table>
          </td>
          <td>
              <p>Activates the terminal for development. Each new terminal window must be activated.</p>
              <p>Activate.sh/.cmd is actually a shortcut to the most recently bootstrapped version of python (e.g. Activate3.11.sh/.cmd). With this functionality, it is possible to support multiple python versions in the same repository and activate each in a terminal using the python-specific activation script.</p>
          </td>
      </tr>
      <tr>
          <td>3. [Optional] Deactivate the environment</td>
          <td>
              <table>
                  <tr>
                      <th>Linux / MacOS</th>
                      <td><code>. ./Deactivate.sh</code></td>
                  </tr>
                  <tr>
                      <th>Windows</th>
                      <td><code>Deactivate.cmd</code></td>
                  </tr>
              </table>
          </td>
          <td>
              Deactivates the terminal environment. Deactivating is optional, as the terminal window itself may be closed when development activities are complete.
          </td>
      </tr>
      </table>
      
      ## Development Activities
      TODO: Complete this section
  
    ''',
    'GOVERNANCE.md': '''
      # Governance
      This project is governed by our [Code of Conduct](CODE_OF_CONDUCT.md) and [Contribution Guidelines](CONTRIBUTING.md).
  
    ''',
    'LICENSE.txt': '''
      MIT LICENSE
      
      Copyright (c) 2024 this_is_the_project_name
      
      Permission is hereby granted, free of charge, to any person obtaining a copy
      of this software and associated documentation files (the "Software"), to deal
      in the Software without restriction, including without limitation the rights
      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      copies of the Software, and to permit persons to whom the Software is
      furnished to do so, subject to the following conditions:
      
      The above copyright notice and this permission notice shall be included in all
      copies or substantial portions of the Software.
      
      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
      SOFTWARE.
  
    ''',
    'MAINTAINERS.md': '''
      # Maintainers
      
      This page lists all active maintainers of this repository. If you were a maintainer and would like to add your name to the Emeritus list, please send us a pull request.
      
      See [Code of Conduct](CODE_OF_CONDUCT.md) and [Contributing](CONTRIBUTING.md) for general contribution guidelines.
      
      ## Current Maintainers
      | Maintainer | GitHub ID | Affiliation |
      | --- | --- | --- |
      TODO: Add maintainers
      
      ## Emeritus
      | Maintainer | GitHub ID | Affiliation |
      | --- | --- | --- |
  
    ''',
    'README.md': '''
      # this_is_the_project_name
      
      <!-- BEGIN: Exclude Package -->
      <!-- END: Exclude Package -->
      
      <<project_description>>
      
      <!-- BEGIN: Exclude Package -->
      ## Contents
      - [Overview](#overview)
      - [Installation](#installation)
      - [Development](#development)
      - [Additional Information](#additional-information)
      - [License](#license)
      <!-- END: Exclude Package -->
      
      ## Overview
      TODO: Complete this section
      
      ### How to use this_is_the_project_name
      TODO: Complete this section
      
      <!-- BEGIN: Exclude Package -->
      ## Installation
      No additional setup is required to use this project.
      
      ## Development
      Please visit CONTRIBUTING.md and DEVELOPMENT.md for information on contributing to this project.
      <!-- END: Exclude Package -->
      
      ## Additional Information
      Additional information can be found at these locations.
      
      | Title | Document | Description |
      | --- | --- | --- |
      | Code of Conduct | CODE_OF_CONDUCT.md | Information about the the norms, rules, and responsibilities we adhere to when participating in this open source community. |
      | Contributing | CONTRIBUTING.md | Information about contributing code changes to this project. |
      | Development | DEVELOPMENT.md | Information about development activities involved in making changes to this project. |
      | Governance | GOVERNANCE.md | Information about how this project is governed. |
      | Maintainers | MAINTAINERS.md | Information about individuals who maintain this project. |
      | Security | SECURITY.md | Information about how to privately report security issues associated with this project. |
      ## License
      
      this_is_the_project_name is licensed under the <a href="https://choosealicense.com/licenses/mit/" target="_blank">MIT</a> license.
  
    ''',
    'SECURITY.md': '''
      # Security
      
      If you find a significant vulnerability, or evidence of one, please report it privately.
      
      TODO: Include information on how to securely submit a vulnerability.
      
      We will gladly give credit to anyone who reports a vulnerability so that we can fix it. If you want to remain anonymous or pseudonymous instead, please let us know that; we will gladly respect your wishes.
      
      We gladly welcome patches to fix such vulnerabilities! See [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributions.
  
    ''',
    'post_generation_actions.html': '''
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <meta http-equiv="X-UA-Compatible" content="ie=edge">
          <title>this_is_the_project_name Post Generation Actions</title>
        </head>
        <style>
          body {
            font-family: "Open Sans", sans-serif;
          }
      
          details {
            width: 100%;
            overflow: hidden; /* Keep this line to prevent an odd blue outline around the element in Safari. */
          }
      
          details summary {
            display: block;
          }
      
          details summary::-webkit-details-marker {
            display: none;
          }
      
          details summary span {
            position: relative;
            display: flex;
            align-items: center;
            padding-left: 1rem;
            background: #444;
            color: #fff;
            height: 4rem;
          }
      
          details summary span:hover {
            cursor: pointer;
          }
      
          details summary span::before {
            content: "â–º";
            font-size: 1rem;
            display: flex;
            align-items: center;
            margin-right: 0.5rem;
            transition: rotate 200ms 400ms ease-out;
          }
      
          details[open] summary span::before {
            rotate: 90deg;
            transition: rotate 200ms ease-out;
          }
      
          details summary span input {
            margin-right: 0.75rem;
          }
      
          div.details-content {
            box-sizing: border-box;
            width: 100%;
            max-height: 0;
            overflow: hidden;
            padding: 0 10px;
            border: 2px solid transparent;
            transition: max-height 400ms ease-out, border 0ms 400ms linear;
            background-color: rgba(0, 0, 0, 0.05);
            margin-bottom: 1rem;
          }
      
          details[open] + div.details-content {
            max-height: 800px; /* Set a max-height value enough to show all the content */
            border-color: #888;
            transition: max-height 400ms ease-out, border 0ms linear;
          }
      
          code {
            background-color: rgba(0, 0, 0, 0.10);
          }
      
        </style>
        <body>
          <h1>this_is_the_project_name Post Generation Actions</h1>
          <p>The following steps must be completed in the order listed now that your project has been generated.</p>
      
          
                  <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="initialize-the-git-repository">Initialize the git repository</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>In this step, we will commit the files generated in git and push the changes.</p>
      
      <p>Open a terminal window, navigate to your repository, and run the following commands:</p>
      
      1. <code>git add --all</code><br/>
      2. <code>git commit -m "ðŸŽ‰ Initial commit"</code><br/>
      3. <code>git push</code><br/>
      </p>
      
              </div>
      
          <!-- [BEGIN] After Repository Tool Instruction -->
                  <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-readme.md">Update README.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>README.md</code>.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-maintainers.md">Update MAINTAINERS.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>MAINTAINERS.md</code>.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-contributing.md">Update CONTRIBUTING.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>CONTRIBUTING.md</code>.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-security.md">Update SECURITY.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>SECURITY.md</code>.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-requirements.txt">Update requirements.txt</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Python package dependencies can be added to <code>requirements.txt</code>. These packages will be automatically installed when the environment is <a href="https://github.com/davidbrownell/PythonBootstrapper" target="_blank">bootstrapped</a>.</p>
      <p>Please visit <a href="https://pip.pypa.io/en/stable/reference/requirements-file-format/" target="_blank">this link</a> for more information on requirements files and how they can be used.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-development.md">Update DEVELOPMENT.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>DEVELOPMENT.md</code>.</p>
      
              </div>
      <!-- [END] After Repository Tool Instruction -->
      
          <details>
              <summary>
                  <span role="term"><input type="checkbox" id="delete-this-file">Delete this file</span>
              </summary>
          </details>
          <div role="definition" class="details-content">
              <p>After you have completed all the steps, you can delete this file.</p>
              <p>Now your project is ready to go!</p>
          </div>
      
          <script>
            document.querySelectorAll("details summary span input[type=checkbox]").forEach(
              function(checkbox) {
                var key = `${ location.href }-${ checkbox.id }`;
      
                if(window.localStorage.getItem(key) === "true")
                  checkbox.checked = true;
      
                this.addEventListener(
                  "change",
                  function() {
                    window.localStorage.setItem(key, checkbox.checked ? "true" : "false");
                  },
                );
              }
            );
          </script>
      
          <!-- TODO(copier-ProjectScaffolding): Decorate code elements with a "copy code" button that copies to the clipboard -->
        </body>
      </html>
  
    ''',
    'requirements.txt': '''
      # TODO: Add your custom package requirements here
  
    ''',
  })
# ---
# name: test_All[15-True_git_None_PythonPackage]
  dict({
    '.gitignore': '''
      post_generation_actions.html
      
      Activate*.cmd
      Activate*.sh
      Deactivate*.cmd
      Deactivate*.sh
      
      **/__pycache__/**
      **/Generated/**
      
      **/.coverage
      **/lcov.info
      **/.vscode
      
      build/**
      dist/**
      src/this_is_the_project_name.egg-info/**
  
    ''',
    'ActivateEpilog.py': '''
      import json
      import os
      import sys
      
      from pathlib import Path
      
      with (Path(os.environ["PYTHON_BOOTSTRAPPER_GENERATED_DIR"]) / "bootstrap_flags.json").open() as f:
          flags = json.load(f)
      
      if flags:
          sys.stdout.write("\nBootstrapped with {}.\n".format(", ".join(f"'{flag}'" for flag in flags)))
  
    ''',
    'Bootstrap.cmd': '''
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  This script downloads and invokes BoostrapImpl.cmd from the PythonBootstrapper
      @REM |  repository (https://github.com/davidbrownell/PythonBootstrapper).
      @REM |
      @REM |  Arguments:
      @REM |
      @REM |      --debug                         Display additional debugging information.
      @REM |
      @REM |      --force                         Ensure that a new python environment is installed, even if it already exists.
      @REM |
      @REM |      --python-version <version>      Specify the python version to install; the default python version is installed if not specified.
      @REM |
      @REM |      --bootstrap-branch <branch>     Specify the branch of the PythonBootstrapper repository to use when downloading BootstrapImpl; "main" is used if not specified.
      @REM |
      @REM ----------------------------------------------------------------------
      @setlocal EnableDelayedExpansion
      @pushd %~dp0
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Parse and Process Arguments
      @REM |
      @REM ----------------------------------------------------------------------
      @set _BOOTSTRAP_BRANCH=main
      @set _COMMAND_LINE_ARGS=
      
      :ParseArgs
      @if '%1' EQU '' @goto :ParseArgs_End
      
      @set ARG=%1
      @set ARG=%ARG:"=%
      
      @if "%ARG%" NEQ "--bootstrap-branch" @goto :ParseArgs_BootstrapBranchEnd
      
      @REM Extract the bootstrap branch
      @shift /1
      
      @set ARG=%1
      @set ARG=%ARG:"=%
      
      @set _BOOTSTRAP_BRANCH=%ARG%
      @goto :ParseArgs_Next
      
      :ParseArgs_BootstrapBranchEnd
      @set _COMMAND_LINE_ARGS=%_COMMAND_LINE_ARGS% %1
      
      :ParseArgs_Next
      @shift /1
      @goto :ParseArgs
      
      :ParseArgs_End
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Download BootstrapImpl.cmd
      @REM |
      @REM ----------------------------------------------------------------------
      @echo Downloading Bootstrap code...
      
      @set _BOOTSTRAPIMPL_URL=https://raw.githubusercontent.com/davidbrownell/PythonBootstrapper/%_BOOTSTRAP_BRANCH%/src/BootstrapImpl.cmd
      
      @call :_CreateTempFileName
      
      @curl --header "Cache-Control: no-cache, no-store" --header "Pragma: no-cache" --location %_BOOTSTRAPIMPL_URL% --output BootstrapImpl.cmd --no-progress-meter --fail-with-body > "%_BOOTSTRAP_TEMP_FILENAME%" 2>&1
      @set _ERRORLEVEL=%ERRORLEVEL%
      
      @if %_ERRORLEVEL% NEQ 0 (
          @echo [1ADownloading Bootstrap code...[31m[1mFAILED[0m ^(%_BOOTSTRAPIMPL_URL%^).
          @echo.
      
          @type "%_BOOTSTRAP_TEMP_FILENAME%"
          @goto :Exit
      )
      
      @call :_DeleteTempFile
      @echo [1ADownloading Bootstrap code...[32m[1mDONE[0m.
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Invoke BootstrapImpl.cmd
      @REM |
      @REM ----------------------------------------------------------------------
      @call BootstrapImpl.cmd %_COMMAND_LINE_ARGS%
      @set _ERRORLEVEL=%ERRORLEVEL%
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Exit
      @REM |
      @REM ----------------------------------------------------------------------
      :Exit
      @if exist BootstrapImpl.cmd del BootstrapImpl.cmd
      @call :_DeleteTempFile
      
      @popd
      
      @endlocal & @exit /B %_ERRORLEVEL%
      
      @REM ----------------------------------------------------------------------
      @REM ----------------------------------------------------------------------
      @REM ----------------------------------------------------------------------
      :_CreateTempFileName
      @set _BOOTSTRAP_TEMP_FILENAME=%CD%\Bootstrap-!RANDOM!-!Time:~6,5!
      @goto :EOF
      
      @REM ----------------------------------------------------------------------
      :_DeleteTempFile
      @if "%_BOOTSTRAP_TEMP_FILENAME%" NEQ "" (
          @if exist "%_BOOTSTRAP_TEMP_FILENAME%" (
              @del "%_BOOTSTRAP_TEMP_FILENAME%"
          )
      )
      @goto :EOF
  
    ''',
    'Bootstrap.sh': '''
      #!/usr/bin/env bash
      # ----------------------------------------------------------------------
      # |
      # |  This script downloads and invokes BootstrapImpl.sh from the PythonBootstrapper
      # |  repository (https://github.com/davidbrownell/PythonBootstrapper).
      # |
      # |  Arguments:
      # |
      # |      --debug                         Display additional debugging information.
      # |
      # |      --force                         Ensure that a new python environment is installed, even if it already exists.
      # |
      # |      --python-version <version>      Specify the python version to install; the default python version is installed if not specified.
      # |
      # |      --bootstrap-branch <branch>     Specify the branch of the PythonBootstrapper repository to use when downloading BootstrapImpl; "main" is used if not specified.
      # |
      # ----------------------------------------------------------------------
      set +v # Continue on errors
      
      this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
      pushd "${this_dir}" > /dev/null || exit
      
      # ----------------------------------------------------------------------
      # |
      # |  Parse and Process Arguments
      # |
      # ----------------------------------------------------------------------
      bootstrap_branch=main
      command_line_args=()
      
      while [[ $# -gt 0 ]]; do
          if [[ "$1" == "--bootstrap-branch" ]]; then
              bootstrap_branch=$2
              shift
          else
              command_line_args+=("$1")
          fi
      
          shift
      done
      
      # ----------------------------------------------------------------------
      # |
      # |  Download BootstrapImpl.sh
      # |
      # ----------------------------------------------------------------------
      echo "Downloading Bootstrap code..."
      
      bootstrap_url=https://raw.githubusercontent.com/davidbrownell/PythonBootstrapper/${bootstrap_branch}/src/BootstrapImpl.sh
      
      temp_script_name=$(mktemp Bootstrap.XXXXXX)
      
      curl --header "Cache-Control: no-cache, no-store" --header "Pragma: no-cache" --location ${bootstrap_url} --output BootstrapImpl.sh --no-progress-meter --fail-with-body > "${temp_script_name}" 2>&1
      error=$?
      
      if [[ ${error} != 0 ]]; then
          echo "[1ADownloading Bootstrap code...[31m[1mFAILED[0m (${bootstrap_url})."
          echo ""
      
          cat "${temp_script_name}"
          rm "${temp_script_name}"
      
          exit ${error}
      fi
      
      chmod u+x BootstrapImpl.sh
      echo "[1ADownloading Bootstrap code...[32m[1mDONE[0m."
      
      # ----------------------------------------------------------------------
      # |
      # |  Invoke BootstrapImpl.sh
      # |
      # ----------------------------------------------------------------------
      ./BootstrapImpl.sh "${command_line_args[@]}"
      error=$?
      
      # ----------------------------------------------------------------------
      # |
      # |  Exit
      # |
      # ----------------------------------------------------------------------
      rm "BootstrapImpl.sh"
      rm "${temp_script_name}"
      
      exit ${error}
  
    ''',
    'BootstrapEpilog.py': '''
      # pylint: disable=missing-module-docstring
      
      import os
      import subprocess
      import sys
      
      from pathlib import Path
      
      
      # Parse the arguments
      is_debug = False
      is_force = False
      is_verbose = False
      is_package = False
      no_cache = False
      
      display_flags: list[str] = []
      
      # First arg is the script name, second arg is the name of the shell script to write to
      for arg in sys.argv[2:]:
          if arg == "--debug":
              is_debug = True
          elif arg == "--force":
              is_force = True
          elif arg == "--verbose":
              is_verbose = True
          elif arg == "--package":
              is_package = True
              display_flags.append("package")
          elif arg == "--no-cache":
              no_cache = True
          else:
              raise Exception("'{}' is not a recognized argument.".format(arg))
      
      if is_debug:
          is_verbose = True
      
      subprocess.run(
          'pip install --disable-pip-version-check {} --editable ".[dev{}]"'.format(
              "--no-cache-dir" if no_cache else "",
              ", package" if is_package else "",
          ),
          check=True,
          shell=True,
      )
      
      with (
          Path(__file__).parent / os.environ["PYTHON_BOOTSTRAPPER_GENERATED_DIR"] / "bootstrap_flags.json"
      ).open("w") as f:
          f.write("[{}]".format(", ".join(f'"{flag}"' for flag in display_flags)))
  
    ''',
    'Build.py': '''
      """Build tasks for this python project."""
      
      import sys
      
      from pathlib import Path
      
      import typer
      
      from dbrownell_Common import PathEx
      from dbrownell_DevTools.RepoBuildTools import Python as RepoBuildTools
      from typer.core import TyperGroup
      
      
      # ----------------------------------------------------------------------
      class NaturalOrderGrouper(TyperGroup):
          # pylint: disable=missing-class-docstring
          # ----------------------------------------------------------------------
          def list_commands(self, *args, **kwargs):  # pylint: disable=unused-argument
              return self.commands.keys()
      
      
      # ----------------------------------------------------------------------
      app = typer.Typer(
          cls=NaturalOrderGrouper,
          help=__doc__,
          no_args_is_help=True,
          pretty_exceptions_show_locals=False,
          pretty_exceptions_enable=False,
      )
      
      
      # ----------------------------------------------------------------------
      this_dir = PathEx.EnsureDir(Path(__file__).parent)
      src_dir = PathEx.EnsureDir(this_dir / "src")
      package_dir = PathEx.EnsureDir(src_dir / "this_is_the_project_name")
      
      
      # ----------------------------------------------------------------------
      Black = RepoBuildTools.BlackFuncFactory(this_dir, app)
      
      Pylint = RepoBuildTools.PylintFuncFactory(
          package_dir,
          app,
          default_min_score=9.5,
      )
      
      Pytest = RepoBuildTools.PytestFuncFactory(
          this_dir,
          package_dir.name,
          app,
          default_min_coverage=90.0,
      )
      
      UpdateVersion = RepoBuildTools.UpdateVersionFuncFactory(
          src_dir,
          PathEx.EnsureFile(package_dir / "__init__.py"),
          app,
      )
      
      Package = RepoBuildTools.PackageFuncFactory(this_dir, app)
      Publish = RepoBuildTools.PublishFuncFactory(this_dir, app)
      
      BuildBinary = RepoBuildTools.BuildBinaryFuncFactory(
          this_dir,
          PathEx.EnsureFile(src_dir / "BuildBinary.py"),
          app,
      )
      
      CreateDockerImage = RepoBuildTools.CreateDockerImageFuncFactory(
          this_dir,
          app,
      )
      
      
      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
      if __name__ == "__main__":
          sys.exit(app())
  
    ''',
    'CODE_OF_CONDUCT.md': '''
      # this_is_the_project_name Open Source Code of Conduct
      
      ## Principles
      These principles guide our data, product, and process decisions, architecture, and approach.
      
      - Open means transparent and participatory.
      - We take a modular and modern approach to software development.
      - We build open-source software and open-source process.
      - We value ease of implementation.
      - Fostering community includes building capacity and making our software and processes accessible to participants with diverse backgrounds and skillsets.
      - Data (and data science) is as important as software and process. We build open data sets where possible.
      - We strive for transparency for algorithms and places we might be introducing bias.
      
      ## Community Guidelines
      Information on contributing to this repository is available in our [Contributing file](CONTRIBUTING.md).
      
      When participating in this_is_the_project_name open source community conversations and spaces, we ask individuals to follow the following guidelines:
      
      - Embrace a culture of learning, and educate each other. We are all entering this conversation from different starting points and with different backgrounds. There are no dumb questions.
      - Take space and give space. We strive to create an equitable environment in which all are welcome and able to participate. We hope individuals feel comfortable voicing their opinions and providing contributions and will do our best to recognize and make space for individuals who may be struggling to find space here. Likewise, we expect individuals to recognize when they are taking up significant space and take a step back to allow room for others.
      - Be respectful.
      - Default to positive. Assume others' contributions are legitimate and valuable and that they are made with good intention.
      
      ## Acknowledgements
      This Community Guidelines was adapted from the [United States Digital Service](https://usds.gov) [Justice40](https://thejustice40.com) open source [repository](https://github.com/usds/justice40-tool).
  
    ''',
    'CONTRIBUTING.md': '''
      # Contribution Guidelines
      
      ## Contributor Code of Conduct
      As contributors and maintainers of this project, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities.
      
      We are committed to making participation in this project a harassment-free experience for everyone, regardless of the level of experience, gender, gender identity, expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, or religion.
      
      Examples of unacceptable behavior by participants include the use of sexual language or imagery, derogatory comments or personal attacks, trolling, public or private harassment, insults, or other unprofessional conduct.
      
      [Project maintainers](MAINTAINERS.md) have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned with this Code of Conduct.
      
      Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting one or more of the [project maintainers](MAINTAINERS.md).
      
      ## General information
      TODO: Include information on how to submit pull requests and/or issues.
      
      The [DEVELOPMENT.md](DEVELOPMENT.md) file explains how to install the program locally (highly recommended if you're going to make code changes). It also provides information useful for making changes and validating them locally before submitting a pull request.
      
      ### Pull requests and different branches recommended
      TODO: Include information on how to use branches effectively and create a pull request.
      
      ### How we handle proposals
      TODO: Include information on how proposals are handled.
      
      ### We are proactive
      In general we try to be proactive to detect and eliminate mistakes and vulnerabilities as soon as possible, and to reduce their impact when they do happen. We use a defensive design and coding style to reduce the likelihood of mistakes, a variety of tools that try to detect mistakes early, and an automatic test suite with significant coverage. We also release the software as open source software so others can review it.
      
      Since early detection and impact reduction can never be perfect, we also try to detect and repair problems during deployment as quickly as possible. This is especially true for security issues; see our [security information](#vulnerability-reporting-security-issues) for more information.
      
      ## Vulnerability reporting (security issues)
      Please privately report vulnerabilities you find so we can fix them!
      
      See [SECURITY.md](SECURITY.md) for information on how to privately report vulnerabilities.
      
      ## Acknowledgements
      
      This Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.0.0, available at [http://contributor-covenant.org/version/1/0/0/](http://contributor-covenant.org/version/1/0/0/)
  
    ''',
    'DEVELOPMENT.md': '''
      # Local Development
      
      ## Enlistment
      Enlistment in this repository involves these steps.
      
      <table>
      <tr>
          <th>Step</th>
          <th>Command Line</th>
          <th>Description</th>
      </tr>
      <tr>
          <td>1. Bootstrap the environment</td>
          <td>
              <table>
                  <tr>
                      <th>Linux / MacOS</th>
                      <td><code>./Bootstrap.sh [--python-version &lt;python version&gt;]</code></td>
                  </tr>
                  <tr>
                      <th>Windows</th>
                      <td><code>Bootstrap.cmd [--python-version &lt;python version&gt;]</code></td>
                  </tr>
              </table>
          </td>
          <td>Prepares the repository for local development by enlisting in all dependencies.</td>
      </tr>
      <tr>
          <td>2. Activate the environment</td>
          <td>
              <table>
                  <tr>
                      <th>Linux / MacOS</th>
                      <td><code>. ./Activate.sh</code></td>
                  </tr>
                  <tr>
                      <th>Windows</th>
                      <td><code>Activate.cmd</code></td>
                  </tr>
              </table>
          </td>
          <td>
              <p>Activates the terminal for development. Each new terminal window must be activated.</p>
              <p>Activate.sh/.cmd is actually a shortcut to the most recently bootstrapped version of python (e.g. Activate3.11.sh/.cmd). With this functionality, it is possible to support multiple python versions in the same repository and activate each in a terminal using the python-specific activation script.</p>
          </td>
      </tr>
      <tr>
          <td>3. [Optional] Deactivate the environment</td>
          <td>
              <table>
                  <tr>
                      <th>Linux / MacOS</th>
                      <td><code>. ./Deactivate.sh</code></td>
                  </tr>
                  <tr>
                      <th>Windows</th>
                      <td><code>Deactivate.cmd</code></td>
                  </tr>
              </table>
          </td>
          <td>
              Deactivates the terminal environment. Deactivating is optional, as the terminal window itself may be closed when development activities are complete.
          </td>
      </tr>
      </table>
      
      ## Development Activities
      Each of these activities can be invoked from an activated terminal on your local machine.
      
      | Activity | Command Line | Description | Invoked by Continuous Integration |
      | --- | --- | --- | --- |
      | Code Formatting | `python Build.py black [--format]` | Format source code using [black](https://github.com/psf/black) based on settings in `pyproject.toml`. | |
      | Static Code Analysis | `python Build.py pylint` | Validate source code using [pylint](https://github.com/pylint-dev/pylint) based on settings in `pyproject.toml`. | |
      | Automated Testing | `python Build.py pytest [--code-coverage]` | Run automated tests using [pytest](https://docs.pytest.org/) and (optionally) extract code coverage information using [coverage](https://coverage.readthedocs.io/) based on settings in `pyproject.toml`. | |
      | Semantic Version Generation | `python Build.py update_version` | Generate a new [Semantic Version](https://semver.org) based on git commits using [AutoGitSemVer](https://github.com/davidbrownell/AutoGitSemVer). Version information is stored in `/src/this_is_the_project_name/__init__.py`. | |
      | Python Package Creation | <p><code>python Build.py package</code></p><p>Requires that the repository was bootstrapped with the <code>--package</code> flag. | Create a python package using [setuptools](https://github.com/pypa/setuptools) based on settings in `pyproject.toml`. | |
      | Python Package Publishing | <p><code>python Build.py publish</code></p><p>Requires that the repository was bootstrapped with the <code>--package</code> flag. | Publish a python package to [PyPi](https://pypi.org). | |
      | Build Binaries | `python Build.py build_binaries` |  Create a python binary for your current operating system using [cx_Freeze](https://cx-freeze.readthedocs.io/) based on settings in `src/BuildBinary.py`. | |
      | Development Docker Image | `python Build.py create_docker_image` | Create a [docker](https://docker.com) image for a bootstrapped development environment. This functionality is useful when adhering to the [FAIR principles for research software](https://doi.org/10.1038/s41597-022-01710-x) by supporting the creation of a development environment and its dependencies as they existed at the moment when the image was created. | |
  
    ''',
    'GOVERNANCE.md': '''
      # Governance
      This project is governed by our [Code of Conduct](CODE_OF_CONDUCT.md) and [Contribution Guidelines](CONTRIBUTING.md).
  
    ''',
    'LICENSE.txt': '''
      MIT LICENSE
      
      Copyright (c) 2024 this_is_the_project_name
      
      Permission is hereby granted, free of charge, to any person obtaining a copy
      of this software and associated documentation files (the "Software"), to deal
      in the Software without restriction, including without limitation the rights
      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      copies of the Software, and to permit persons to whom the Software is
      furnished to do so, subject to the following conditions:
      
      The above copyright notice and this permission notice shall be included in all
      copies or substantial portions of the Software.
      
      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
      SOFTWARE.
  
    ''',
    'MAINTAINERS.md': '''
      # Maintainers
      
      This page lists all active maintainers of this repository. If you were a maintainer and would like to add your name to the Emeritus list, please send us a pull request.
      
      See [Code of Conduct](CODE_OF_CONDUCT.md) and [Contributing](CONTRIBUTING.md) for general contribution guidelines.
      
      ## Current Maintainers
      | Maintainer | GitHub ID | Affiliation |
      | --- | --- | --- |
      TODO: Add maintainers
      
      ## Emeritus
      | Maintainer | GitHub ID | Affiliation |
      | --- | --- | --- |
  
    ''',
    'README.md': '''
      # this_is_the_project_name
      
      <!-- BEGIN: Exclude Package -->
      <!-- [BEGIN] Badges -->
      <!-- [END] Badges -->
      <!-- END: Exclude Package -->
      
      <<project_description>>
      
      <!-- BEGIN: Exclude Package -->
      ## Contents
      - [Overview](#overview)
      - [Installation](#installation)
      - [Development](#development)
      - [Additional Information](#additional-information)
      - [License](#license)
      <!-- END: Exclude Package -->
      
      ## Overview
      TODO: Complete this section
      
      ### How to use this_is_the_project_name
      TODO: Complete this section
      
      <!-- BEGIN: Exclude Package -->
      ## Installation
      ### Installation via pip
      To install the this_is_the_project_name package via [pip](https://pip.pypa.io/en/stable/) (Python Installer for Python) for use with your python code:
      
      `pip install this_is_the_project_name`
      
      ## Development
      Please visit CONTRIBUTING.md and DEVELOPMENT.md for information on contributing to this project.
      <!-- END: Exclude Package -->
      
      ## Additional Information
      Additional information can be found at these locations.
      
      | Title | Document | Description |
      | --- | --- | --- |
      | Code of Conduct | CODE_OF_CONDUCT.md | Information about the the norms, rules, and responsibilities we adhere to when participating in this open source community. |
      | Contributing | CONTRIBUTING.md | Information about contributing code changes to this project. |
      | Development | DEVELOPMENT.md | Information about development activities involved in making changes to this project. |
      | Governance | GOVERNANCE.md | Information about how this project is governed. |
      | Maintainers | MAINTAINERS.md | Information about individuals who maintain this project. |
      | Security | SECURITY.md | Information about how to privately report security issues associated with this project. |
      ## License
      
      this_is_the_project_name is licensed under the <a href="https://choosealicense.com/licenses/mit/" target="_blank">MIT</a> license.
  
    ''',
    'SECURITY.md': '''
      # Security
      
      If you find a significant vulnerability, or evidence of one, please report it privately.
      
      TODO: Include information on how to securely submit a vulnerability.
      
      We will gladly give credit to anyone who reports a vulnerability so that we can fix it. If you want to remain anonymous or pseudonymous instead, please let us know that; we will gladly respect your wishes.
      
      We gladly welcome patches to fix such vulnerabilities! See [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributions.
  
    ''',
    'post_generation_actions.html': '''
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <meta http-equiv="X-UA-Compatible" content="ie=edge">
          <title>this_is_the_project_name Post Generation Actions</title>
        </head>
        <style>
          body {
            font-family: "Open Sans", sans-serif;
          }
      
          details {
            width: 100%;
            overflow: hidden; /* Keep this line to prevent an odd blue outline around the element in Safari. */
          }
      
          details summary {
            display: block;
          }
      
          details summary::-webkit-details-marker {
            display: none;
          }
      
          details summary span {
            position: relative;
            display: flex;
            align-items: center;
            padding-left: 1rem;
            background: #444;
            color: #fff;
            height: 4rem;
          }
      
          details summary span:hover {
            cursor: pointer;
          }
      
          details summary span::before {
            content: "â–º";
            font-size: 1rem;
            display: flex;
            align-items: center;
            margin-right: 0.5rem;
            transition: rotate 200ms 400ms ease-out;
          }
      
          details[open] summary span::before {
            rotate: 90deg;
            transition: rotate 200ms ease-out;
          }
      
          details summary span input {
            margin-right: 0.75rem;
          }
      
          div.details-content {
            box-sizing: border-box;
            width: 100%;
            max-height: 0;
            overflow: hidden;
            padding: 0 10px;
            border: 2px solid transparent;
            transition: max-height 400ms ease-out, border 0ms 400ms linear;
            background-color: rgba(0, 0, 0, 0.05);
            margin-bottom: 1rem;
          }
      
          details[open] + div.details-content {
            max-height: 800px; /* Set a max-height value enough to show all the content */
            border-color: #888;
            transition: max-height 400ms ease-out, border 0ms linear;
          }
      
          code {
            background-color: rgba(0, 0, 0, 0.10);
          }
      
        </style>
        <body>
          <h1>this_is_the_project_name Post Generation Actions</h1>
          <p>The following steps must be completed in the order listed now that your project has been generated.</p>
      
          <!-- [BEGIN] Before Repository Tool Instruction -->
          <!-- [END] Before Repository Tool Instruction -->
      
                  <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="initialize-the-git-repository">Initialize the git repository</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>In this step, we will commit the files generated in git and push the changes.</p>
      
      <p>Open a terminal window, navigate to your repository, and run the following commands:</p>
      
      1. <code>git add --all</code><br/>
      2. <code>git commit -m "ðŸŽ‰ Initial commit"</code><br/>
      3. <code>git push</code><br/>
      </p>
      
              </div>
      
          <!-- [BEGIN] After Repository Tool Instruction -->
                  <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-readme.md">Update README.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>README.md</code>.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-maintainers.md">Update MAINTAINERS.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>MAINTAINERS.md</code>.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-contributing.md">Update CONTRIBUTING.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>CONTRIBUTING.md</code>.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-security.md">Update SECURITY.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>SECURITY.md</code>.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-pyproject.toml">Update pyproject.toml</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Python development tools, package dependencies, and packaging instructions are configured in <code>pyproject.toml</code>. Please visit <a href="https://packaging.python.org/en/latest/guides/writing-pyproject-toml/" target="_blank">this link</a> for more information on these files.</p>
      <p>Please search for and replace all <code>TODO:</code> comments in <code>pyproject.toml</code>.</p>
      
              </div>
      <!-- [END] After Repository Tool Instruction -->
      
          <details>
              <summary>
                  <span role="term"><input type="checkbox" id="delete-this-file">Delete this file</span>
              </summary>
          </details>
          <div role="definition" class="details-content">
              <p>After you have completed all the steps, you can delete this file.</p>
              <p>Now your project is ready to go!</p>
          </div>
      
          <script>
            document.querySelectorAll("details summary span input[type=checkbox]").forEach(
              function(checkbox) {
                var key = `${ location.href }-${ checkbox.id }`;
      
                if(window.localStorage.getItem(key) === "true")
                  checkbox.checked = true;
      
                this.addEventListener(
                  "change",
                  function() {
                    window.localStorage.setItem(key, checkbox.checked ? "true" : "false");
                  },
                );
              }
            );
          </script>
      
          <!-- TODO(copier-ProjectScaffolding): Decorate code elements with a "copy code" button that copies to the clipboard -->
        </body>
      </html>
  
    ''',
    'pyproject.toml': '''
      # https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
      
      [build-system]
      requires = ["setuptools >= 63.0"]
      build-backend = "setuptools.build_meta"
      
      # ----------------------------------------------------------------------
      # |
      # |  Project
      # |
      # ----------------------------------------------------------------------
      [project]
      name = "this_is_the_project_name"
      description = "<<project_description>>"
      
      license = { text = "MIT" }
      
      authors = [
          { name = "<<author_name>>", email = "<<author_email>>" },
      ]
      
      keywords = [
          # TODO: Add keywords specific to your project.
      ]
      
      # https://pypi.org/classifiers/
      classifiers = [
          # TODO: Add additional classifiers specific to your project.
          "License :: OSI Approved :: MIT License",
          "Operating System :: MacOS",
          "Operating System :: Microsoft :: Windows",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
      ]
      
      dependencies = [
          # TODO: Add additional package dependencies specific to your project.
          "typer ~= 0.9"
      ]
      
      dynamic = [
          "version",
      ]
      
      readme = "README.md"
      
      [project.optional-dependencies]
      dev = [
          "dbrownell_DevTools",
      ]
      
      package = [
          "build ~= 1.2",
          "cx_Freeze ~= 6.15",
          "twine ~= 5.1",
      ]
      
      [project.urls]
      Homepage = "TODO: Enter the homepage link for your project."
      Documentation = "TODO: Enter the documetnation link for your project."
      Repository = "TODO: Enter the repository link for your project."
      
      
      [project.scripts]
      this_is_the_project_name = "this_is_the_project_name:EntryPoint.app"
      
      # ----------------------------------------------------------------------
      # |
      # |  black
      # |
      # ----------------------------------------------------------------------
      [tool.black]
      line-length = 100
      
      # ----------------------------------------------------------------------
      # |
      # |  pylint
      # |
      # ----------------------------------------------------------------------
      [tool.pylint.basic]
      class-const-naming-style = "any"
      function-naming-style = "PascalCase"
      good-names = [
          "i",
          "j",
          "k",
          "ex",
          "Run",
          "_",
          "dm",                                   # added
          "f",                                    # added
      ]
      method-naming-style = "any"
      module-naming-style = "PascalCase"
      
      [tool.pylint.design]
      max-args = 10
      max-parents = 15
      
      [tool.pylint.main]
      ignore-paths = [
          # Note that the pylint vscode extension has trouble with wrapping these patterns in quotes
          # (which is required to parse the file correctly). Because of this, each pattern must be
          # converted to a glob pattern and specified in the pylint vscode settings as well.
          "^.+?Tests/.*$",
      ]
      
      [tool.pylint."messages control"]
      disable = [
          "raw-checker-failed",
          "bad-inline-option",
          "locally-disabled",
          "file-ignored",
          "suppressed-message",
          "useless-suppression",
          "deprecated-pragma",
          "use-symbolic-message-instead",
          "assignment-from-no-return",            # added
          "broad-except",                         # added
          "broad-exception-raised",               # added
          "cell-var-from-loop",                   # added
          "consider-using-f-string",              # added
          "import-outside-toplevel",              # added
          "line-too-long",                        # added
          "missing-function-docstring",           # added
          "subprocess-run-check",                 # added
          "super-with-arguments",                 # added
          "too-few-public-methods",               # added
          "unnecessary-lambda-assignment",        # added
          "unspecified-encoding",                 # added
      ]
      
      # ----------------------------------------------------------------------
      # |
      # |  pyright
      # |
      # ----------------------------------------------------------------------
      [tool.pyright]
      exclude = [
          "**/*Tests/*",
          "**/Generated/*",
      ]
      
      reportMissingImports = true
      reportMissingTypeStubs = false
      
      # ----------------------------------------------------------------------
      # |
      # |  pytest
      # |
      # ----------------------------------------------------------------------
      [tool.pytest.ini_options]
      python_files = [
          "**/*Test.py",
      ]
      
      # ----------------------------------------------------------------------
      # |
      # |  setuptools
      # |
      # ----------------------------------------------------------------------
      [tool.setuptools.dynamic]
      version = { attr = "this_is_the_project_name.__version__" }
      
      [tool.setuptools.packages.find]
      where = ["src"]
  
    ''',
    'src/AutoGitSemVer.yaml': '''
      # This file is used by AutoGitSemVer to configure the semantic version of the this_is_the_project_name package.
      # It indicates that AutoGitSemVer should only look at changes in this directory, its descendants, and files specified in
      # additional_dependencies when calculating the semantic version for the package.
      additional_dependencies:
        - "../pyproject.toml"
        - "../README.md"
  
    ''',
    'src/BuildBinary.py': '''
      """Builds the binary for this project."""
      
      import datetime
      import importlib
      import re
      
      from functools import cache
      from pathlib import Path
      
      from cx_Freeze import setup, Executable
      from dbrownell_Common import PathEx
      
      
      # ----------------------------------------------------------------------
      @cache
      def _GetName() -> str:
          return "this_is_the_project_name"
      
      
      # ----------------------------------------------------------------------
      @cache
      def _GetVersionAndDocstring() -> tuple[str, str]:
          mod = importlib.import_module(_GetName())
          return mod.__version__, mod.__doc__ or ""
      
      
      # ----------------------------------------------------------------------
      @cache
      def _GetEntryPoint() -> Path:
          return PathEx.EnsureFile(Path(__file__).parent / _GetName() / "EntryPoint.py")
      
      
      # ----------------------------------------------------------------------
      @cache
      def _GetCopyright() -> str:
          match = re.search(
              r"""(?#
              Copyright                           )Copyright(?#
              Mark [Optional]                     )(?P<mark>\s+\([cC]\))?(?#
              Year                                )\s+(?P<year>\d{4})(?#
              Year Range [Optional]               )(?:\s*-\s*\d{2,4})?(?#
              Suffix                              )(?P<suffix>.+)(?#
              End of line                         )$(?#
              )""",
              PathEx.EnsureFile(Path(__file__).parent.parent / "LICENSE.txt").read_text(),
              flags=re.MULTILINE,
          )
      
          current_year = datetime.datetime.now().year
      
          if not match:
              return f"Copyright {current_year} <<author_name>>"
      
          initial_year = int(match.group("year"))
      
          if current_year == initial_year:
              year_suffix = ""
          elif current_year // 100 != initial_year // 100:
              year_suffix = f"-{current_year}"
          else:
              year_suffix = f"-{current_year % 100}"
      
          return f"Copyright{match.group('mark')} {initial_year}{year_suffix} <<author_name>>"
      
      
      # ----------------------------------------------------------------------
      setup(
          name=_GetName(),
          version=_GetVersionAndDocstring()[0],
          description=_GetVersionAndDocstring()[1],
          executables=[
              Executable(
                  _GetEntryPoint(),
                  base="console",
                  copyright=_GetCopyright(),
                  # icon=<icon_filename>,
                  target_name=_GetName(),
                  # trademarks=<trademarks>,
              ),
          ],
          options={
              "build_exe": {
                  "excludes": [
                      "tcl",
                      "tkinter",
                  ],
                  "no_compress": False,
                  "optimize": 0,
                  # "packages": [],
                  # "include_files": [],
              },
          },
      )
  
    ''',
    'src/this_is_the_project_name/EntryPoint.py': '''
      """This file serves as an example of how to create scripts that can be invoked from the command line once the package is installed."""
      
      import sys
      
      import typer
      
      from typer.core import TyperGroup  # type: ignore [import-untyped]
      
      from this_is_the_project_name import Math, __version__
      
      
      # ----------------------------------------------------------------------
      class NaturalOrderGrouper(TyperGroup):
          # pylint: disable=missing-class-docstring
          # ----------------------------------------------------------------------
          def list_commands(self, *args, **kwargs):  # pylint: disable=unused-argument
              return self.commands.keys()
      
      
      # ----------------------------------------------------------------------
      app = typer.Typer(
          cls=NaturalOrderGrouper,
          help=__doc__,
          no_args_is_help=True,
          pretty_exceptions_show_locals=False,
          pretty_exceptions_enable=False,
      )
      
      
      # ----------------------------------------------------------------------
      @app.command("Add")
      def Add(
          x: int,
          y: int,
      ) -> None:
          """Adds 2 values."""
      
          sys.stdout.write(str(Math.Add(x, y)))
      
      
      # ----------------------------------------------------------------------
      @app.command("Sub")
      def Sub(
          x: int,
          y: int,
      ) -> None:
          """Subtracts 2 values."""
      
          sys.stdout.write(str(Math.Sub(x, y)))
      
      
      # ----------------------------------------------------------------------
      @app.command("Mult")
      def Mult(
          x: int,
          y: int,
      ) -> None:
          """Multiplies 2 values."""
      
          sys.stdout.write(str(Math.Mult(x, y)))
      
      
      # ----------------------------------------------------------------------
      @app.command("Div")
      def Div(
          x: int,
          y: int,
      ) -> None:
          """Divides 1 value by another."""
      
          sys.stdout.write(str(Math.Div(x, y)))
      
      
      # ----------------------------------------------------------------------
      @app.command("Version")
      def Version() -> None:
          """Prints the version of the package."""
      
          sys.stdout.write(__version__)
      
      
      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
      if __name__ == "__main__":
          app()  # pragma: no cover
  
    ''',
    'src/this_is_the_project_name/Math.py': '''
      """Basic math functions. This file illustrates how to create a python package that contains functions that can be invoked by other python code."""
      
      
      # ----------------------------------------------------------------------
      def Add(x, y):
          return x + y
      
      
      # ----------------------------------------------------------------------
      def Sub(x, y):
          return x - y
      
      
      # ----------------------------------------------------------------------
      def Mult(x, y):
          return x * y
      
      
      # ----------------------------------------------------------------------
      def Div(x, y):
          return x / y
  
    ''',
    'src/this_is_the_project_name/__init__.py': '''
      # pylint: disable=missing-module-docstring,invalid-name
      
      # Note that this value will be overwritten by calls to `python ../../Build.py update_version` based
      # on changes observed in the git repository. The default value below will be used until the value
      # here is explicitly updated by the Continuous Integration system.
      __version__ = "0.1.0"
      
      from .Math import Add, Sub, Mult, Div
  
    ''',
    'tests/EntryPoint_UnitTest.py': '''
      """Unit tests for EntryPoint.py"""
      
      from typer.testing import CliRunner
      
      from this_is_the_project_name import __version__
      from this_is_the_project_name.EntryPoint import app
      
      
      # ----------------------------------------------------------------------
      def test_Add():
          result = CliRunner().invoke(app, ["Add", "1", "20"])
          assert result.exit_code == 0
          assert result.stdout == "21"
      
      
      # ----------------------------------------------------------------------
      def test_Sub():
          result = CliRunner().invoke(app, ["Sub", "1", "20"])
          assert result.exit_code == 0
          assert result.stdout == "-19"
      
      
      # ----------------------------------------------------------------------
      def test_Mult():
          result = CliRunner().invoke(app, ["Mult", "2", "15"])
          assert result.exit_code == 0
          assert result.stdout == "30"
      
      
      # ----------------------------------------------------------------------
      def test_Div():
          result = CliRunner().invoke(app, ["Div", "6", "3"])
          assert result.exit_code == 0
          assert result.stdout == "2.0"
      
      
      # ----------------------------------------------------------------------
      def test_Version():
          result = CliRunner().invoke(app, ["Version"])
          assert result.exit_code == 0
          assert result.stdout == __version__
      
      
      # ----------------------------------------------------------------------
      def test_NoArgs():
          result = CliRunner().invoke(app, [])
          assert result.exit_code == 0
          assert "Add" in result.stdout
          assert "Sub" in result.stdout
          assert "Mult" in result.stdout
          assert "Div" in result.stdout
          assert "Version" in result.stdout
  
    ''',
    'tests/Math_UnitTest.py': '''
      """Unit tests for Math.py"""
      
      from this_is_the_project_name.Math import *
      
      
      # ----------------------------------------------------------------------
      def test_Add():
          assert Add(1, 20) == 21
      
      
      # ----------------------------------------------------------------------
      def test_Sub():
          assert Sub(1, 20) == -19
      
      
      # ----------------------------------------------------------------------
      def test_Mult():
          assert Mult(2, 15) == 30
      
      
      # ----------------------------------------------------------------------
      def test_Div():
          assert Div(6, 3) == 2
  
    ''',
  })
# ---
# name: test_All[16-True_git_GitHub_None]
  dict({
    '.github/CODEOWNERS': '''
      * @<<github_username>>
  
    ''',
    '.github/ISSUE_TEMPLATE/bug_report.md': '''
      ---
      name: Bug report
      about: Create a report to help us improve.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Describe the bug
      A clear and concise description of what the bug is.
      
      ## To Reproduce
      Steps to reproduce the behavior:
      1. Go to '...'
      2. Click on '....'
      3. Scroll down to '....'
      4. See error
      
      ## Expected behavior
      A clear and concise description of what you expected to happen.
      
      ## Screenshots
      If applicable, add screenshots to help explain your problem.
      
      ## Environment (please complete the following information):
       - OS: [e.g. iOS]
       - Python Version: [e.g. 3.12, 3.11, etc.]
       - this_is_the_project_name Version [e.g. 1.2.3]
      
      ## Additional context
      Add any other context about the problem here.
  
    ''',
    '.github/ISSUE_TEMPLATE/config.yml': '''
      blank_issues_enabled: false
  
    ''',
    '.github/ISSUE_TEMPLATE/custom.md': '''
      ---
      name: Custom issue template
      about: Create an issue that isn't a bug or feature request.
      title: ''
      labels: ''
      assignees: ''
      
      ---
  
    ''',
    '.github/ISSUE_TEMPLATE/feature_request.md': '''
      ---
      name: Feature request
      about: Suggest an idea for this project.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Is your feature request related to a problem? Please describe.
      A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]
      
      ## Describe the solution you'd like
      A clear and concise description of what you want to happen.
      
      ## Describe alternatives you've considered
      A clear and concise description of any alternative solutions or features you've considered.
      
      ## Additional context
      Add any other context or screenshots about the feature request here.
  
    ''',
    '.github/pull_request_template.md': '''
      ## :pencil: Description
      Please include a summary of the change and the work item associated with it.
      
      ## :gear: Work Item
      Please include link to the corresponding GitHub Issue or Project work item.
      
      ## :movie_camera: Demo
      Please provide any images, GIFs, or videos that show the effect of your changes (if applicable). A picture is worth a thousand words.
  
    ''',
    '.gitignore': '''
      post_generation_actions.html
  
    ''',
    'CODE_OF_CONDUCT.md': '''
      # this_is_the_project_name Open Source Code of Conduct
      
      ## Principles
      These principles guide our data, product, and process decisions, architecture, and approach.
      
      - Open means transparent and participatory.
      - We take a modular and modern approach to software development.
      - We build open-source software and open-source process.
      - We value ease of implementation.
      - Fostering community includes building capacity and making our software and processes accessible to participants with diverse backgrounds and skillsets.
      - Data (and data science) is as important as software and process. We build open data sets where possible.
      - We strive for transparency for algorithms and places we might be introducing bias.
      
      ## Community Guidelines
      Information on contributing to this repository is available in our [Contributing file](CONTRIBUTING.md).
      
      When participating in this_is_the_project_name open source community conversations and spaces, we ask individuals to follow the following guidelines:
      
      - Embrace a culture of learning, and educate each other. We are all entering this conversation from different starting points and with different backgrounds. There are no dumb questions.
      - Take space and give space. We strive to create an equitable environment in which all are welcome and able to participate. We hope individuals feel comfortable voicing their opinions and providing contributions and will do our best to recognize and make space for individuals who may be struggling to find space here. Likewise, we expect individuals to recognize when they are taking up significant space and take a step back to allow room for others.
      - Be respectful.
      - Default to positive. Assume others' contributions are legitimate and valuable and that they are made with good intention.
      
      ## Acknowledgements
      This Community Guidelines was adapted from the [United States Digital Service](https://usds.gov) [Justice40](https://thejustice40.com) open source [repository](https://github.com/usds/justice40-tool).
  
    ''',
    'CONTRIBUTING.md': '''
      # Contribution Guidelines
      
      ## Contributor Code of Conduct
      As contributors and maintainers of this project, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities.
      
      We are committed to making participation in this project a harassment-free experience for everyone, regardless of the level of experience, gender, gender identity, expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, or religion.
      
      Examples of unacceptable behavior by participants include the use of sexual language or imagery, derogatory comments or personal attacks, trolling, public or private harassment, insults, or other unprofessional conduct.
      
      [Project maintainers](MAINTAINERS.md) have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned with this Code of Conduct.
      
      Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting one or more of the [project maintainers](MAINTAINERS.md).
      
      ## General information
      For specific proposals, please provide them as [pull requests](https://github.com/coreinfrastructure/best-practices-badge/pulls) or [issues](https://github.com/coreinfrastructure/best-practices-badge/issues) via our [GitHub site](https://github.com/<<github_username>>/<<github_repo_name>>).
      
      The [DEVELOPMENT.md](DEVELOPMENT.md) file explains how to install the program locally (highly recommended if you're going to make code changes). It also provides information useful for making changes and validating them locally before submitting a pull request.
      
      ### Pull requests and different branches recommended
      Pull requests are preferred, since they are specific. For more about how to create a pull request, see https://help.github.com/articles/using-pull-requests/.
      
      We recommend creating different branches for different (logical) changes, and creating a pull request into the `main` branch when you're done. See the GitHub documentation on [creating branches](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/) and [using pull requests](https://help.github.com/articles/using-pull-requests/).
      
      ### How we handle proposals
      We use GitHub to track proposed changes via its [issue tracker](https://github.com/coreinfrastructure/best-practices-badge/issues) and [pull requests](https://github.com/coreinfrastructure/best-practices-badge/pulls). Specific changes are proposed using those mechanisms. Issues are assigned to an individual, who works and then marks it complete. If there are questions or objections, the conversation of that issue or pull request is used to resolve it.
      
      ### We are proactive
      In general we try to be proactive to detect and eliminate mistakes and vulnerabilities as soon as possible, and to reduce their impact when they do happen. We use a defensive design and coding style to reduce the likelihood of mistakes, a variety of tools that try to detect mistakes early, and an automatic test suite with significant coverage. We also release the software as open source software so others can review it.
      
      Since early detection and impact reduction can never be perfect, we also try to detect and repair problems during deployment as quickly as possible. This is especially true for security issues; see our [security information](#vulnerability-reporting-security-issues) for more information.
      
      ## Vulnerability reporting (security issues)
      Please privately report vulnerabilities you find so we can fix them!
      
      See [SECURITY.md](SECURITY.md) for information on how to privately report vulnerabilities.
      
      ## Acknowledgements
      
      This Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.0.0, available at [http://contributor-covenant.org/version/1/0/0/](http://contributor-covenant.org/version/1/0/0/)
  
    ''',
    'DEVELOPMENT.md': '''
      # Local Development
      
      ## Enlistment
      TODO: Complete this section
      
      ## Development Activities
      TODO: Complete this section
  
    ''',
    'GOVERNANCE.md': '''
      # Governance
      This project is governed by our [Code of Conduct](CODE_OF_CONDUCT.md) and [Contribution Guidelines](CONTRIBUTING.md).
  
    ''',
    'LICENSE.txt': '''
      MIT LICENSE
      
      Copyright (c) 2024 this_is_the_project_name
      
      Permission is hereby granted, free of charge, to any person obtaining a copy
      of this software and associated documentation files (the "Software"), to deal
      in the Software without restriction, including without limitation the rights
      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      copies of the Software, and to permit persons to whom the Software is
      furnished to do so, subject to the following conditions:
      
      The above copyright notice and this permission notice shall be included in all
      copies or substantial portions of the Software.
      
      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
      SOFTWARE.
  
    ''',
    'MAINTAINERS.md': '''
      # Maintainers
      
      This page lists all active maintainers of this repository. If you were a maintainer and would like to add your name to the Emeritus list, please send us a pull request.
      
      See [Code of Conduct](CODE_OF_CONDUCT.md) and [Contributing](CONTRIBUTING.md) for general contribution guidelines.
      
      ## Current Maintainers
      | Maintainer | GitHub ID | Affiliation |
      | --- | --- | --- |
      TODO: Add maintainers
      
      ## Emeritus
      | Maintainer | GitHub ID | Affiliation |
      | --- | --- | --- |
  
    ''',
    'README.md': '''
      # this_is_the_project_name
      
      <!-- BEGIN: Exclude Package -->
      [![License](https://img.shields.io/github/license/<<github_username>>/<<github_repo_name>>?color=dark-green)](https://github.com/<<github_username>>/<<github_repo_name>>/blob/master/LICENSE.txt)
      [![GitHub commit activity](https://img.shields.io/github/commit-activity/y/<<github_username>>/<<github_repo_name>>?color=dark-green)](https://github.com/<<github_username>>/<<github_repo_name>>/commits/main/)
      <!-- END: Exclude Package -->
      
      <<project_description>>
      
      <!-- BEGIN: Exclude Package -->
      ## Contents
      - [Overview](#overview)
      - [Installation](#installation)
      - [Development](#development)
      - [Additional Information](#additional-information)
      - [License](#license)
      <!-- END: Exclude Package -->
      
      ## Overview
      TODO: Complete this section
      
      ### How to use this_is_the_project_name
      TODO: Complete this section
      
      <!-- BEGIN: Exclude Package -->
      ## Installation
      TODO: Complete this section
      
      ## Development
      Please visit [Contributing](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CONTRIBUTING.md) and [Development](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/DEVELOPMENT.md) for information on contributing to this project.
      <!-- END: Exclude Package -->
      
      ## Additional Information
      Additional information can be found at these locations.
      
      | Title | Document | Description |
      | --- | --- | --- |
      | Code of Conduct | [CODE_OF_CONDUCT.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CODE_OF_CONDUCT.md) | Information about the the norms, rules, and responsibilities we adhere to when participating in this open source community. |
      | Contributing | [CONTRIBUTING.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CONTRIBUTING.md) | Information about contributing code changes to this project. |
      | Development | [DEVELOPMENT.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/DEVELOPMENT.md) | Information about development activities involved in making changes to this project. |
      | Governance | [GOVERNANCE.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/GOVERNANCE.md) | Information about how this project is governed. |
      | Maintainers | [MAINTAINERS.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/MAINTAINERS.md) | Information about individuals who maintain this project. |
      | Security | [SECURITY.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/SECURITY.md) | Information about how to privately report security issues associated with this project. |
      ## License
      
      this_is_the_project_name is licensed under the <a href="https://choosealicense.com/licenses/mit/" target="_blank">MIT</a> license.
  
    ''',
    'SECURITY.md': '''
      # Security
      
      If you find a significant vulnerability, or evidence of one, please report it privately.
      
      We prefer that you use the [GitHub mechanism for privately reporting a vulnerability](https://docs.github.com/en/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability#privately-reporting-a-security-vulnerability). Under the [main repository's security tab](https://github.com/<<github_username>>/<<github_repo_name>>/security), in the left sidebar, under "Reporting", click "Advisories", click the "New draft security advisory" button to open the advisory form.
      [issues](https://github.com/coreinfrastructure/best-practices-badge/issues) via our [GitHub site](https://github.com/<<github_username>>/<<github_repo_name>>).
      
      We will gladly give credit to anyone who reports a vulnerability so that we can fix it. If you want to remain anonymous or pseudonymous instead, please let us know that; we will gladly respect your wishes.
      
      We gladly welcome patches to fix such vulnerabilities! See [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributions.
  
    ''',
    'post_generation_actions.html': '''
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <meta http-equiv="X-UA-Compatible" content="ie=edge">
          <title>this_is_the_project_name Post Generation Actions</title>
        </head>
        <style>
          body {
            font-family: "Open Sans", sans-serif;
          }
      
          details {
            width: 100%;
            overflow: hidden; /* Keep this line to prevent an odd blue outline around the element in Safari. */
          }
      
          details summary {
            display: block;
          }
      
          details summary::-webkit-details-marker {
            display: none;
          }
      
          details summary span {
            position: relative;
            display: flex;
            align-items: center;
            padding-left: 1rem;
            background: #444;
            color: #fff;
            height: 4rem;
          }
      
          details summary span:hover {
            cursor: pointer;
          }
      
          details summary span::before {
            content: "â–º";
            font-size: 1rem;
            display: flex;
            align-items: center;
            margin-right: 0.5rem;
            transition: rotate 200ms 400ms ease-out;
          }
      
          details[open] summary span::before {
            rotate: 90deg;
            transition: rotate 200ms ease-out;
          }
      
          details summary span input {
            margin-right: 0.75rem;
          }
      
          div.details-content {
            box-sizing: border-box;
            width: 100%;
            max-height: 0;
            overflow: hidden;
            padding: 0 10px;
            border: 2px solid transparent;
            transition: max-height 400ms ease-out, border 0ms 400ms linear;
            background-color: rgba(0, 0, 0, 0.05);
            margin-bottom: 1rem;
          }
      
          details[open] + div.details-content {
            max-height: 800px; /* Set a max-height value enough to show all the content */
            border-color: #888;
            transition: max-height 400ms ease-out, border 0ms linear;
          }
      
          code {
            background-color: rgba(0, 0, 0, 0.10);
          }
      
        </style>
        <body>
          <h1>this_is_the_project_name Post Generation Actions</h1>
          <p>The following steps must be completed in the order listed now that your project has been generated.</p>
      
          
                  <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="initialize-the-git-repository">Initialize the git repository</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>In this step, we will commit the files generated in git and push the changes.</p>
      
      <p>Open a terminal window, navigate to your repository, and run the following commands:</p>
      
      1. <code>git add --all</code><br/>
      2. <code>git commit -m "ðŸŽ‰ Initial commit"</code><br/>
      3. <code>git push</code><br/>
      </p>
      
              </div>
      
          <!-- [BEGIN] After Repository Tool Instruction -->
                  <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-readme.md">Update README.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>README.md</code>.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-maintainers.md">Update MAINTAINERS.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>MAINTAINERS.md</code>.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-development.md">Update DEVELOPMENT.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>DEVELOPMENT.md</code>.</p>
      
              </div>
      <!-- [END] After Repository Tool Instruction -->
      
          <details>
              <summary>
                  <span role="term"><input type="checkbox" id="delete-this-file">Delete this file</span>
              </summary>
          </details>
          <div role="definition" class="details-content">
              <p>After you have completed all the steps, you can delete this file.</p>
              <p>Now your project is ready to go!</p>
          </div>
      
          <script>
            document.querySelectorAll("details summary span input[type=checkbox]").forEach(
              function(checkbox) {
                var key = `${ location.href }-${ checkbox.id }`;
      
                if(window.localStorage.getItem(key) === "true")
                  checkbox.checked = true;
      
                this.addEventListener(
                  "change",
                  function() {
                    window.localStorage.setItem(key, checkbox.checked ? "true" : "false");
                  },
                );
              }
            );
          </script>
      
          <!-- TODO(copier-ProjectScaffolding): Decorate code elements with a "copy code" button that copies to the clipboard -->
        </body>
      </html>
  
    ''',
  })
# ---
# name: test_All[17-True_git_GitHub_PythonExecutionEnvironment]
  dict({
    '.github/CODEOWNERS': '''
      * @<<github_username>>
  
    ''',
    '.github/ISSUE_TEMPLATE/bug_report.md': '''
      ---
      name: Bug report
      about: Create a report to help us improve.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Describe the bug
      A clear and concise description of what the bug is.
      
      ## To Reproduce
      Steps to reproduce the behavior:
      1. Go to '...'
      2. Click on '....'
      3. Scroll down to '....'
      4. See error
      
      ## Expected behavior
      A clear and concise description of what you expected to happen.
      
      ## Screenshots
      If applicable, add screenshots to help explain your problem.
      
      ## Environment (please complete the following information):
       - OS: [e.g. iOS]
       - Python Version: [e.g. 3.12, 3.11, etc.]
       - this_is_the_project_name Version [e.g. 1.2.3]
      
      ## Additional context
      Add any other context about the problem here.
  
    ''',
    '.github/ISSUE_TEMPLATE/config.yml': '''
      blank_issues_enabled: false
  
    ''',
    '.github/ISSUE_TEMPLATE/custom.md': '''
      ---
      name: Custom issue template
      about: Create an issue that isn't a bug or feature request.
      title: ''
      labels: ''
      assignees: ''
      
      ---
  
    ''',
    '.github/ISSUE_TEMPLATE/feature_request.md': '''
      ---
      name: Feature request
      about: Suggest an idea for this project.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Is your feature request related to a problem? Please describe.
      A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]
      
      ## Describe the solution you'd like
      A clear and concise description of what you want to happen.
      
      ## Describe alternatives you've considered
      A clear and concise description of any alternative solutions or features you've considered.
      
      ## Additional context
      Add any other context or screenshots about the feature request here.
  
    ''',
    '.github/pull_request_template.md': '''
      ## :pencil: Description
      Please include a summary of the change and the work item associated with it.
      
      ## :gear: Work Item
      Please include link to the corresponding GitHub Issue or Project work item.
      
      ## :movie_camera: Demo
      Please provide any images, GIFs, or videos that show the effect of your changes (if applicable). A picture is worth a thousand words.
  
    ''',
    '.gitignore': '''
      post_generation_actions.html
      
      Activate*.cmd
      Activate*.sh
      Deactivate*.cmd
      Deactivate*.sh
      
      **/__pycache__/**
      **/Generated/**
  
    ''',
    'Bootstrap.cmd': '''
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  This script downloads and invokes BoostrapImpl.cmd from the PythonBootstrapper
      @REM |  repository (https://github.com/davidbrownell/PythonBootstrapper).
      @REM |
      @REM |  Arguments:
      @REM |
      @REM |      --debug                         Display additional debugging information.
      @REM |
      @REM |      --force                         Ensure that a new python environment is installed, even if it already exists.
      @REM |
      @REM |      --python-version <version>      Specify the python version to install; the default python version is installed if not specified.
      @REM |
      @REM |      --bootstrap-branch <branch>     Specify the branch of the PythonBootstrapper repository to use when downloading BootstrapImpl; "main" is used if not specified.
      @REM |
      @REM ----------------------------------------------------------------------
      @setlocal EnableDelayedExpansion
      @pushd %~dp0
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Parse and Process Arguments
      @REM |
      @REM ----------------------------------------------------------------------
      @set _BOOTSTRAP_BRANCH=main
      @set _COMMAND_LINE_ARGS=
      
      :ParseArgs
      @if '%1' EQU '' @goto :ParseArgs_End
      
      @set ARG=%1
      @set ARG=%ARG:"=%
      
      @if "%ARG%" NEQ "--bootstrap-branch" @goto :ParseArgs_BootstrapBranchEnd
      
      @REM Extract the bootstrap branch
      @shift /1
      
      @set ARG=%1
      @set ARG=%ARG:"=%
      
      @set _BOOTSTRAP_BRANCH=%ARG%
      @goto :ParseArgs_Next
      
      :ParseArgs_BootstrapBranchEnd
      @set _COMMAND_LINE_ARGS=%_COMMAND_LINE_ARGS% %1
      
      :ParseArgs_Next
      @shift /1
      @goto :ParseArgs
      
      :ParseArgs_End
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Download BootstrapImpl.cmd
      @REM |
      @REM ----------------------------------------------------------------------
      @echo Downloading Bootstrap code...
      
      @set _BOOTSTRAPIMPL_URL=https://raw.githubusercontent.com/davidbrownell/PythonBootstrapper/%_BOOTSTRAP_BRANCH%/src/BootstrapImpl.cmd
      
      @call :_CreateTempFileName
      
      @curl --header "Cache-Control: no-cache, no-store" --header "Pragma: no-cache" --location %_BOOTSTRAPIMPL_URL% --output BootstrapImpl.cmd --no-progress-meter --fail-with-body > "%_BOOTSTRAP_TEMP_FILENAME%" 2>&1
      @set _ERRORLEVEL=%ERRORLEVEL%
      
      @if %_ERRORLEVEL% NEQ 0 (
          @echo [1ADownloading Bootstrap code...[31m[1mFAILED[0m ^(%_BOOTSTRAPIMPL_URL%^).
          @echo.
      
          @type "%_BOOTSTRAP_TEMP_FILENAME%"
          @goto :Exit
      )
      
      @call :_DeleteTempFile
      @echo [1ADownloading Bootstrap code...[32m[1mDONE[0m.
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Invoke BootstrapImpl.cmd
      @REM |
      @REM ----------------------------------------------------------------------
      @call BootstrapImpl.cmd %_COMMAND_LINE_ARGS%
      @set _ERRORLEVEL=%ERRORLEVEL%
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Exit
      @REM |
      @REM ----------------------------------------------------------------------
      :Exit
      @if exist BootstrapImpl.cmd del BootstrapImpl.cmd
      @call :_DeleteTempFile
      
      @popd
      
      @endlocal & @exit /B %_ERRORLEVEL%
      
      @REM ----------------------------------------------------------------------
      @REM ----------------------------------------------------------------------
      @REM ----------------------------------------------------------------------
      :_CreateTempFileName
      @set _BOOTSTRAP_TEMP_FILENAME=%CD%\Bootstrap-!RANDOM!-!Time:~6,5!
      @goto :EOF
      
      @REM ----------------------------------------------------------------------
      :_DeleteTempFile
      @if "%_BOOTSTRAP_TEMP_FILENAME%" NEQ "" (
          @if exist "%_BOOTSTRAP_TEMP_FILENAME%" (
              @del "%_BOOTSTRAP_TEMP_FILENAME%"
          )
      )
      @goto :EOF
  
    ''',
    'Bootstrap.sh': '''
      #!/usr/bin/env bash
      # ----------------------------------------------------------------------
      # |
      # |  This script downloads and invokes BootstrapImpl.sh from the PythonBootstrapper
      # |  repository (https://github.com/davidbrownell/PythonBootstrapper).
      # |
      # |  Arguments:
      # |
      # |      --debug                         Display additional debugging information.
      # |
      # |      --force                         Ensure that a new python environment is installed, even if it already exists.
      # |
      # |      --python-version <version>      Specify the python version to install; the default python version is installed if not specified.
      # |
      # |      --bootstrap-branch <branch>     Specify the branch of the PythonBootstrapper repository to use when downloading BootstrapImpl; "main" is used if not specified.
      # |
      # ----------------------------------------------------------------------
      set +v # Continue on errors
      
      this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
      pushd "${this_dir}" > /dev/null || exit
      
      # ----------------------------------------------------------------------
      # |
      # |  Parse and Process Arguments
      # |
      # ----------------------------------------------------------------------
      bootstrap_branch=main
      command_line_args=()
      
      while [[ $# -gt 0 ]]; do
          if [[ "$1" == "--bootstrap-branch" ]]; then
              bootstrap_branch=$2
              shift
          else
              command_line_args+=("$1")
          fi
      
          shift
      done
      
      # ----------------------------------------------------------------------
      # |
      # |  Download BootstrapImpl.sh
      # |
      # ----------------------------------------------------------------------
      echo "Downloading Bootstrap code..."
      
      bootstrap_url=https://raw.githubusercontent.com/davidbrownell/PythonBootstrapper/${bootstrap_branch}/src/BootstrapImpl.sh
      
      temp_script_name=$(mktemp Bootstrap.XXXXXX)
      
      curl --header "Cache-Control: no-cache, no-store" --header "Pragma: no-cache" --location ${bootstrap_url} --output BootstrapImpl.sh --no-progress-meter --fail-with-body > "${temp_script_name}" 2>&1
      error=$?
      
      if [[ ${error} != 0 ]]; then
          echo "[1ADownloading Bootstrap code...[31m[1mFAILED[0m (${bootstrap_url})."
          echo ""
      
          cat "${temp_script_name}"
          rm "${temp_script_name}"
      
          exit ${error}
      fi
      
      chmod u+x BootstrapImpl.sh
      echo "[1ADownloading Bootstrap code...[32m[1mDONE[0m."
      
      # ----------------------------------------------------------------------
      # |
      # |  Invoke BootstrapImpl.sh
      # |
      # ----------------------------------------------------------------------
      ./BootstrapImpl.sh "${command_line_args[@]}"
      error=$?
      
      # ----------------------------------------------------------------------
      # |
      # |  Exit
      # |
      # ----------------------------------------------------------------------
      rm "BootstrapImpl.sh"
      rm "${temp_script_name}"
      
      exit ${error}
  
    ''',
    'BootstrapEpilog.py': '''
      # pylint: disable=missing-module-docstring
      
      import subprocess
      import sys
      
      from pathlib import Path
      
      
      # Parse the arguments
      no_cache = False
      
      display_flags: list[str] = []
      
      # First arg is the script name, second arg is the name of the shell script to write to
      for arg in sys.argv[2:]:
          if arg == "--no-cache":
              no_cache = True
          else:
              raise Exception("'{}' is not a recognized argument.".format(arg))
      
      subprocess.run(
          "pip install --disable-pip-version-check {} --requirement requirements.txt".format(
              "--no-cache-dir" if no_cache else "",
          ),
          check=True,
          shell=True,
          cwd=Path(__file__).parent,
      )
  
    ''',
    'CODE_OF_CONDUCT.md': '''
      # this_is_the_project_name Open Source Code of Conduct
      
      ## Principles
      These principles guide our data, product, and process decisions, architecture, and approach.
      
      - Open means transparent and participatory.
      - We take a modular and modern approach to software development.
      - We build open-source software and open-source process.
      - We value ease of implementation.
      - Fostering community includes building capacity and making our software and processes accessible to participants with diverse backgrounds and skillsets.
      - Data (and data science) is as important as software and process. We build open data sets where possible.
      - We strive for transparency for algorithms and places we might be introducing bias.
      
      ## Community Guidelines
      Information on contributing to this repository is available in our [Contributing file](CONTRIBUTING.md).
      
      When participating in this_is_the_project_name open source community conversations and spaces, we ask individuals to follow the following guidelines:
      
      - Embrace a culture of learning, and educate each other. We are all entering this conversation from different starting points and with different backgrounds. There are no dumb questions.
      - Take space and give space. We strive to create an equitable environment in which all are welcome and able to participate. We hope individuals feel comfortable voicing their opinions and providing contributions and will do our best to recognize and make space for individuals who may be struggling to find space here. Likewise, we expect individuals to recognize when they are taking up significant space and take a step back to allow room for others.
      - Be respectful.
      - Default to positive. Assume others' contributions are legitimate and valuable and that they are made with good intention.
      
      ## Acknowledgements
      This Community Guidelines was adapted from the [United States Digital Service](https://usds.gov) [Justice40](https://thejustice40.com) open source [repository](https://github.com/usds/justice40-tool).
  
    ''',
    'CONTRIBUTING.md': '''
      # Contribution Guidelines
      
      ## Contributor Code of Conduct
      As contributors and maintainers of this project, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities.
      
      We are committed to making participation in this project a harassment-free experience for everyone, regardless of the level of experience, gender, gender identity, expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, or religion.
      
      Examples of unacceptable behavior by participants include the use of sexual language or imagery, derogatory comments or personal attacks, trolling, public or private harassment, insults, or other unprofessional conduct.
      
      [Project maintainers](MAINTAINERS.md) have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned with this Code of Conduct.
      
      Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting one or more of the [project maintainers](MAINTAINERS.md).
      
      ## General information
      For specific proposals, please provide them as [pull requests](https://github.com/coreinfrastructure/best-practices-badge/pulls) or [issues](https://github.com/coreinfrastructure/best-practices-badge/issues) via our [GitHub site](https://github.com/<<github_username>>/<<github_repo_name>>).
      
      The [DEVELOPMENT.md](DEVELOPMENT.md) file explains how to install the program locally (highly recommended if you're going to make code changes). It also provides information useful for making changes and validating them locally before submitting a pull request.
      
      ### Pull requests and different branches recommended
      Pull requests are preferred, since they are specific. For more about how to create a pull request, see https://help.github.com/articles/using-pull-requests/.
      
      We recommend creating different branches for different (logical) changes, and creating a pull request into the `main` branch when you're done. See the GitHub documentation on [creating branches](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/) and [using pull requests](https://help.github.com/articles/using-pull-requests/).
      
      ### How we handle proposals
      We use GitHub to track proposed changes via its [issue tracker](https://github.com/coreinfrastructure/best-practices-badge/issues) and [pull requests](https://github.com/coreinfrastructure/best-practices-badge/pulls). Specific changes are proposed using those mechanisms. Issues are assigned to an individual, who works and then marks it complete. If there are questions or objections, the conversation of that issue or pull request is used to resolve it.
      
      ### We are proactive
      In general we try to be proactive to detect and eliminate mistakes and vulnerabilities as soon as possible, and to reduce their impact when they do happen. We use a defensive design and coding style to reduce the likelihood of mistakes, a variety of tools that try to detect mistakes early, and an automatic test suite with significant coverage. We also release the software as open source software so others can review it.
      
      Since early detection and impact reduction can never be perfect, we also try to detect and repair problems during deployment as quickly as possible. This is especially true for security issues; see our [security information](#vulnerability-reporting-security-issues) for more information.
      
      ## Vulnerability reporting (security issues)
      Please privately report vulnerabilities you find so we can fix them!
      
      See [SECURITY.md](SECURITY.md) for information on how to privately report vulnerabilities.
      
      ## Acknowledgements
      
      This Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.0.0, available at [http://contributor-covenant.org/version/1/0/0/](http://contributor-covenant.org/version/1/0/0/)
  
    ''',
    'DEVELOPMENT.md': '''
      # Local Development
      
      ## Enlistment
      Enlistment in this repository involves these steps.
      
      <table>
      <tr>
          <th>Step</th>
          <th>Command Line</th>
          <th>Description</th>
      </tr>
      <tr>
          <td>1. Clone the repository locally</td>
          <td><code>git clone https://github.com/<<github_username>>/<<github_repo_name>></code></td>
          <td><a href="https://git-scm.com/docs/git-clone" target="_blank">https://git-scm.com/docs/git-clone</a></td>
      </tr>
      <tr>
          <td>2. Bootstrap the environment</td>
          <td>
              <table>
                  <tr>
                      <th>Linux / MacOS</th>
                      <td><code>./Bootstrap.sh [--python-version &lt;python version&gt;]</code></td>
                  </tr>
                  <tr>
                      <th>Windows</th>
                      <td><code>Bootstrap.cmd [--python-version &lt;python version&gt;]</code></td>
                  </tr>
              </table>
          </td>
          <td>Prepares the repository for local development by enlisting in all dependencies.</td>
      </tr>
      <tr>
          <td>3. Activate the environment</td>
          <td>
              <table>
                  <tr>
                      <th>Linux / MacOS</th>
                      <td><code>. ./Activate.sh</code></td>
                  </tr>
                  <tr>
                      <th>Windows</th>
                      <td><code>Activate.cmd</code></td>
                  </tr>
              </table>
          </td>
          <td>
              <p>Activates the terminal for development. Each new terminal window must be activated.</p>
              <p>Activate.sh/.cmd is actually a shortcut to the most recently bootstrapped version of python (e.g. Activate3.11.sh/.cmd). With this functionality, it is possible to support multiple python versions in the same repository and activate each in a terminal using the python-specific activation script.</p>
          </td>
      </tr>
      <tr>
          <td>4. [Optional] Deactivate the environment</td>
          <td>
              <table>
                  <tr>
                      <th>Linux / MacOS</th>
                      <td><code>. ./Deactivate.sh</code></td>
                  </tr>
                  <tr>
                      <th>Windows</th>
                      <td><code>Deactivate.cmd</code></td>
                  </tr>
              </table>
          </td>
          <td>
              Deactivates the terminal environment. Deactivating is optional, as the terminal window itself may be closed when development activities are complete.
          </td>
      </tr>
      </table>
      
      ## Development Activities
      TODO: Complete this section
  
    ''',
    'GOVERNANCE.md': '''
      # Governance
      This project is governed by our [Code of Conduct](CODE_OF_CONDUCT.md) and [Contribution Guidelines](CONTRIBUTING.md).
  
    ''',
    'LICENSE.txt': '''
      MIT LICENSE
      
      Copyright (c) 2024 this_is_the_project_name
      
      Permission is hereby granted, free of charge, to any person obtaining a copy
      of this software and associated documentation files (the "Software"), to deal
      in the Software without restriction, including without limitation the rights
      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      copies of the Software, and to permit persons to whom the Software is
      furnished to do so, subject to the following conditions:
      
      The above copyright notice and this permission notice shall be included in all
      copies or substantial portions of the Software.
      
      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
      SOFTWARE.
  
    ''',
    'MAINTAINERS.md': '''
      # Maintainers
      
      This page lists all active maintainers of this repository. If you were a maintainer and would like to add your name to the Emeritus list, please send us a pull request.
      
      See [Code of Conduct](CODE_OF_CONDUCT.md) and [Contributing](CONTRIBUTING.md) for general contribution guidelines.
      
      ## Current Maintainers
      | Maintainer | GitHub ID | Affiliation |
      | --- | --- | --- |
      TODO: Add maintainers
      
      ## Emeritus
      | Maintainer | GitHub ID | Affiliation |
      | --- | --- | --- |
  
    ''',
    'README.md': '''
      # this_is_the_project_name
      
      <!-- BEGIN: Exclude Package -->
      [![License](https://img.shields.io/github/license/<<github_username>>/<<github_repo_name>>?color=dark-green)](https://github.com/<<github_username>>/<<github_repo_name>>/blob/master/LICENSE.txt)
      [![GitHub commit activity](https://img.shields.io/github/commit-activity/y/<<github_username>>/<<github_repo_name>>?color=dark-green)](https://github.com/<<github_username>>/<<github_repo_name>>/commits/main/)
      <!-- END: Exclude Package -->
      
      <<project_description>>
      
      <!-- BEGIN: Exclude Package -->
      ## Contents
      - [Overview](#overview)
      - [Installation](#installation)
      - [Development](#development)
      - [Additional Information](#additional-information)
      - [License](#license)
      <!-- END: Exclude Package -->
      
      ## Overview
      TODO: Complete this section
      
      ### How to use this_is_the_project_name
      TODO: Complete this section
      
      <!-- BEGIN: Exclude Package -->
      ## Installation
      No additional setup is required to use this project.
      
      ## Development
      Please visit [Contributing](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CONTRIBUTING.md) and [Development](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/DEVELOPMENT.md) for information on contributing to this project.
      <!-- END: Exclude Package -->
      
      ## Additional Information
      Additional information can be found at these locations.
      
      | Title | Document | Description |
      | --- | --- | --- |
      | Code of Conduct | [CODE_OF_CONDUCT.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CODE_OF_CONDUCT.md) | Information about the the norms, rules, and responsibilities we adhere to when participating in this open source community. |
      | Contributing | [CONTRIBUTING.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CONTRIBUTING.md) | Information about contributing code changes to this project. |
      | Development | [DEVELOPMENT.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/DEVELOPMENT.md) | Information about development activities involved in making changes to this project. |
      | Governance | [GOVERNANCE.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/GOVERNANCE.md) | Information about how this project is governed. |
      | Maintainers | [MAINTAINERS.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/MAINTAINERS.md) | Information about individuals who maintain this project. |
      | Security | [SECURITY.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/SECURITY.md) | Information about how to privately report security issues associated with this project. |
      ## License
      
      this_is_the_project_name is licensed under the <a href="https://choosealicense.com/licenses/mit/" target="_blank">MIT</a> license.
  
    ''',
    'SECURITY.md': '''
      # Security
      
      If you find a significant vulnerability, or evidence of one, please report it privately.
      
      We prefer that you use the [GitHub mechanism for privately reporting a vulnerability](https://docs.github.com/en/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability#privately-reporting-a-security-vulnerability). Under the [main repository's security tab](https://github.com/<<github_username>>/<<github_repo_name>>/security), in the left sidebar, under "Reporting", click "Advisories", click the "New draft security advisory" button to open the advisory form.
      [issues](https://github.com/coreinfrastructure/best-practices-badge/issues) via our [GitHub site](https://github.com/<<github_username>>/<<github_repo_name>>).
      
      We will gladly give credit to anyone who reports a vulnerability so that we can fix it. If you want to remain anonymous or pseudonymous instead, please let us know that; we will gladly respect your wishes.
      
      We gladly welcome patches to fix such vulnerabilities! See [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributions.
  
    ''',
    'post_generation_actions.html': '''
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <meta http-equiv="X-UA-Compatible" content="ie=edge">
          <title>this_is_the_project_name Post Generation Actions</title>
        </head>
        <style>
          body {
            font-family: "Open Sans", sans-serif;
          }
      
          details {
            width: 100%;
            overflow: hidden; /* Keep this line to prevent an odd blue outline around the element in Safari. */
          }
      
          details summary {
            display: block;
          }
      
          details summary::-webkit-details-marker {
            display: none;
          }
      
          details summary span {
            position: relative;
            display: flex;
            align-items: center;
            padding-left: 1rem;
            background: #444;
            color: #fff;
            height: 4rem;
          }
      
          details summary span:hover {
            cursor: pointer;
          }
      
          details summary span::before {
            content: "â–º";
            font-size: 1rem;
            display: flex;
            align-items: center;
            margin-right: 0.5rem;
            transition: rotate 200ms 400ms ease-out;
          }
      
          details[open] summary span::before {
            rotate: 90deg;
            transition: rotate 200ms ease-out;
          }
      
          details summary span input {
            margin-right: 0.75rem;
          }
      
          div.details-content {
            box-sizing: border-box;
            width: 100%;
            max-height: 0;
            overflow: hidden;
            padding: 0 10px;
            border: 2px solid transparent;
            transition: max-height 400ms ease-out, border 0ms 400ms linear;
            background-color: rgba(0, 0, 0, 0.05);
            margin-bottom: 1rem;
          }
      
          details[open] + div.details-content {
            max-height: 800px; /* Set a max-height value enough to show all the content */
            border-color: #888;
            transition: max-height 400ms ease-out, border 0ms linear;
          }
      
          code {
            background-color: rgba(0, 0, 0, 0.10);
          }
      
        </style>
        <body>
          <h1>this_is_the_project_name Post Generation Actions</h1>
          <p>The following steps must be completed in the order listed now that your project has been generated.</p>
      
          
                  <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="initialize-the-git-repository">Initialize the git repository</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>In this step, we will commit the files generated in git and push the changes.</p>
      
      <p>Open a terminal window, navigate to your repository, and run the following commands:</p>
      
      1. <code>git add --all</code><br/>
      2. <code>git commit -m "ðŸŽ‰ Initial commit"</code><br/>
      3. <code>git push</code><br/>
      </p>
      
              </div>
      
          <!-- [BEGIN] After Repository Tool Instruction -->
                  <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-readme.md">Update README.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>README.md</code>.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-maintainers.md">Update MAINTAINERS.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>MAINTAINERS.md</code>.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-requirements.txt">Update requirements.txt</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Python package dependencies can be added to <code>requirements.txt</code>. These packages will be automatically installed when the environment is <a href="https://github.com/davidbrownell/PythonBootstrapper" target="_blank">bootstrapped</a>.</p>
      <p>Please visit <a href="https://pip.pypa.io/en/stable/reference/requirements-file-format/" target="_blank">this link</a> for more information on requirements files and how they can be used.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-development.md">Update DEVELOPMENT.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>DEVELOPMENT.md</code>.</p>
      
              </div>
      <!-- [END] After Repository Tool Instruction -->
      
          <details>
              <summary>
                  <span role="term"><input type="checkbox" id="delete-this-file">Delete this file</span>
              </summary>
          </details>
          <div role="definition" class="details-content">
              <p>After you have completed all the steps, you can delete this file.</p>
              <p>Now your project is ready to go!</p>
          </div>
      
          <script>
            document.querySelectorAll("details summary span input[type=checkbox]").forEach(
              function(checkbox) {
                var key = `${ location.href }-${ checkbox.id }`;
      
                if(window.localStorage.getItem(key) === "true")
                  checkbox.checked = true;
      
                this.addEventListener(
                  "change",
                  function() {
                    window.localStorage.setItem(key, checkbox.checked ? "true" : "false");
                  },
                );
              }
            );
          </script>
      
          <!-- TODO(copier-ProjectScaffolding): Decorate code elements with a "copy code" button that copies to the clipboard -->
        </body>
      </html>
  
    ''',
    'requirements.txt': '''
      # TODO: Add your custom package requirements here
  
    ''',
  })
# ---
# name: test_All[18-True_git_GitHub_PythonPackage]
  dict({
    '.github/CODEOWNERS': '''
      * @<<github_username>>
  
    ''',
    '.github/ISSUE_TEMPLATE/bug_report.md': '''
      ---
      name: Bug report
      about: Create a report to help us improve.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Describe the bug
      A clear and concise description of what the bug is.
      
      ## To Reproduce
      Steps to reproduce the behavior:
      1. Go to '...'
      2. Click on '....'
      3. Scroll down to '....'
      4. See error
      
      ## Expected behavior
      A clear and concise description of what you expected to happen.
      
      ## Screenshots
      If applicable, add screenshots to help explain your problem.
      
      ## Environment (please complete the following information):
       - OS: [e.g. iOS]
       - Python Version: [e.g. 3.12, 3.11, etc.]
       - this_is_the_project_name Version [e.g. 1.2.3]
      
      ## Additional context
      Add any other context about the problem here.
  
    ''',
    '.github/ISSUE_TEMPLATE/config.yml': '''
      blank_issues_enabled: false
  
    ''',
    '.github/ISSUE_TEMPLATE/custom.md': '''
      ---
      name: Custom issue template
      about: Create an issue that isn't a bug or feature request.
      title: ''
      labels: ''
      assignees: ''
      
      ---
  
    ''',
    '.github/ISSUE_TEMPLATE/feature_request.md': '''
      ---
      name: Feature request
      about: Suggest an idea for this project.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Is your feature request related to a problem? Please describe.
      A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]
      
      ## Describe the solution you'd like
      A clear and concise description of what you want to happen.
      
      ## Describe alternatives you've considered
      A clear and concise description of any alternative solutions or features you've considered.
      
      ## Additional context
      Add any other context or screenshots about the feature request here.
  
    ''',
    '.github/pull_request_template.md': '''
      ## :pencil: Description
      Please include a summary of the change and the work item associated with it.
      
      ## :gear: Work Item
      Please include link to the corresponding GitHub Issue or Project work item.
      
      ## :movie_camera: Demo
      Please provide any images, GIFs, or videos that show the effect of your changes (if applicable). A picture is worth a thousand words.
  
    ''',
    '.gitignore': '''
      post_generation_actions.html
      
      Activate*.cmd
      Activate*.sh
      Deactivate*.cmd
      Deactivate*.sh
      
      **/__pycache__/**
      **/Generated/**
      
      **/.coverage
      **/lcov.info
      **/.vscode
      
      build/**
      dist/**
      src/this_is_the_project_name.egg-info/**
  
    ''',
    'ActivateEpilog.py': '''
      import json
      import os
      import sys
      
      from pathlib import Path
      
      with (Path(os.environ["PYTHON_BOOTSTRAPPER_GENERATED_DIR"]) / "bootstrap_flags.json").open() as f:
          flags = json.load(f)
      
      if flags:
          sys.stdout.write("\nBootstrapped with {}.\n".format(", ".join(f"'{flag}'" for flag in flags)))
  
    ''',
    'Bootstrap.cmd': '''
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  This script downloads and invokes BoostrapImpl.cmd from the PythonBootstrapper
      @REM |  repository (https://github.com/davidbrownell/PythonBootstrapper).
      @REM |
      @REM |  Arguments:
      @REM |
      @REM |      --debug                         Display additional debugging information.
      @REM |
      @REM |      --force                         Ensure that a new python environment is installed, even if it already exists.
      @REM |
      @REM |      --python-version <version>      Specify the python version to install; the default python version is installed if not specified.
      @REM |
      @REM |      --bootstrap-branch <branch>     Specify the branch of the PythonBootstrapper repository to use when downloading BootstrapImpl; "main" is used if not specified.
      @REM |
      @REM ----------------------------------------------------------------------
      @setlocal EnableDelayedExpansion
      @pushd %~dp0
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Parse and Process Arguments
      @REM |
      @REM ----------------------------------------------------------------------
      @set _BOOTSTRAP_BRANCH=main
      @set _COMMAND_LINE_ARGS=
      
      :ParseArgs
      @if '%1' EQU '' @goto :ParseArgs_End
      
      @set ARG=%1
      @set ARG=%ARG:"=%
      
      @if "%ARG%" NEQ "--bootstrap-branch" @goto :ParseArgs_BootstrapBranchEnd
      
      @REM Extract the bootstrap branch
      @shift /1
      
      @set ARG=%1
      @set ARG=%ARG:"=%
      
      @set _BOOTSTRAP_BRANCH=%ARG%
      @goto :ParseArgs_Next
      
      :ParseArgs_BootstrapBranchEnd
      @set _COMMAND_LINE_ARGS=%_COMMAND_LINE_ARGS% %1
      
      :ParseArgs_Next
      @shift /1
      @goto :ParseArgs
      
      :ParseArgs_End
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Download BootstrapImpl.cmd
      @REM |
      @REM ----------------------------------------------------------------------
      @echo Downloading Bootstrap code...
      
      @set _BOOTSTRAPIMPL_URL=https://raw.githubusercontent.com/davidbrownell/PythonBootstrapper/%_BOOTSTRAP_BRANCH%/src/BootstrapImpl.cmd
      
      @call :_CreateTempFileName
      
      @curl --header "Cache-Control: no-cache, no-store" --header "Pragma: no-cache" --location %_BOOTSTRAPIMPL_URL% --output BootstrapImpl.cmd --no-progress-meter --fail-with-body > "%_BOOTSTRAP_TEMP_FILENAME%" 2>&1
      @set _ERRORLEVEL=%ERRORLEVEL%
      
      @if %_ERRORLEVEL% NEQ 0 (
          @echo [1ADownloading Bootstrap code...[31m[1mFAILED[0m ^(%_BOOTSTRAPIMPL_URL%^).
          @echo.
      
          @type "%_BOOTSTRAP_TEMP_FILENAME%"
          @goto :Exit
      )
      
      @call :_DeleteTempFile
      @echo [1ADownloading Bootstrap code...[32m[1mDONE[0m.
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Invoke BootstrapImpl.cmd
      @REM |
      @REM ----------------------------------------------------------------------
      @call BootstrapImpl.cmd %_COMMAND_LINE_ARGS%
      @set _ERRORLEVEL=%ERRORLEVEL%
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Exit
      @REM |
      @REM ----------------------------------------------------------------------
      :Exit
      @if exist BootstrapImpl.cmd del BootstrapImpl.cmd
      @call :_DeleteTempFile
      
      @popd
      
      @endlocal & @exit /B %_ERRORLEVEL%
      
      @REM ----------------------------------------------------------------------
      @REM ----------------------------------------------------------------------
      @REM ----------------------------------------------------------------------
      :_CreateTempFileName
      @set _BOOTSTRAP_TEMP_FILENAME=%CD%\Bootstrap-!RANDOM!-!Time:~6,5!
      @goto :EOF
      
      @REM ----------------------------------------------------------------------
      :_DeleteTempFile
      @if "%_BOOTSTRAP_TEMP_FILENAME%" NEQ "" (
          @if exist "%_BOOTSTRAP_TEMP_FILENAME%" (
              @del "%_BOOTSTRAP_TEMP_FILENAME%"
          )
      )
      @goto :EOF
  
    ''',
    'Bootstrap.sh': '''
      #!/usr/bin/env bash
      # ----------------------------------------------------------------------
      # |
      # |  This script downloads and invokes BootstrapImpl.sh from the PythonBootstrapper
      # |  repository (https://github.com/davidbrownell/PythonBootstrapper).
      # |
      # |  Arguments:
      # |
      # |      --debug                         Display additional debugging information.
      # |
      # |      --force                         Ensure that a new python environment is installed, even if it already exists.
      # |
      # |      --python-version <version>      Specify the python version to install; the default python version is installed if not specified.
      # |
      # |      --bootstrap-branch <branch>     Specify the branch of the PythonBootstrapper repository to use when downloading BootstrapImpl; "main" is used if not specified.
      # |
      # ----------------------------------------------------------------------
      set +v # Continue on errors
      
      this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
      pushd "${this_dir}" > /dev/null || exit
      
      # ----------------------------------------------------------------------
      # |
      # |  Parse and Process Arguments
      # |
      # ----------------------------------------------------------------------
      bootstrap_branch=main
      command_line_args=()
      
      while [[ $# -gt 0 ]]; do
          if [[ "$1" == "--bootstrap-branch" ]]; then
              bootstrap_branch=$2
              shift
          else
              command_line_args+=("$1")
          fi
      
          shift
      done
      
      # ----------------------------------------------------------------------
      # |
      # |  Download BootstrapImpl.sh
      # |
      # ----------------------------------------------------------------------
      echo "Downloading Bootstrap code..."
      
      bootstrap_url=https://raw.githubusercontent.com/davidbrownell/PythonBootstrapper/${bootstrap_branch}/src/BootstrapImpl.sh
      
      temp_script_name=$(mktemp Bootstrap.XXXXXX)
      
      curl --header "Cache-Control: no-cache, no-store" --header "Pragma: no-cache" --location ${bootstrap_url} --output BootstrapImpl.sh --no-progress-meter --fail-with-body > "${temp_script_name}" 2>&1
      error=$?
      
      if [[ ${error} != 0 ]]; then
          echo "[1ADownloading Bootstrap code...[31m[1mFAILED[0m (${bootstrap_url})."
          echo ""
      
          cat "${temp_script_name}"
          rm "${temp_script_name}"
      
          exit ${error}
      fi
      
      chmod u+x BootstrapImpl.sh
      echo "[1ADownloading Bootstrap code...[32m[1mDONE[0m."
      
      # ----------------------------------------------------------------------
      # |
      # |  Invoke BootstrapImpl.sh
      # |
      # ----------------------------------------------------------------------
      ./BootstrapImpl.sh "${command_line_args[@]}"
      error=$?
      
      # ----------------------------------------------------------------------
      # |
      # |  Exit
      # |
      # ----------------------------------------------------------------------
      rm "BootstrapImpl.sh"
      rm "${temp_script_name}"
      
      exit ${error}
  
    ''',
    'BootstrapEpilog.py': '''
      # pylint: disable=missing-module-docstring
      
      import os
      import subprocess
      import sys
      
      from pathlib import Path
      
      
      # Parse the arguments
      is_debug = False
      is_force = False
      is_verbose = False
      is_package = False
      no_cache = False
      
      display_flags: list[str] = []
      
      # First arg is the script name, second arg is the name of the shell script to write to
      for arg in sys.argv[2:]:
          if arg == "--debug":
              is_debug = True
          elif arg == "--force":
              is_force = True
          elif arg == "--verbose":
              is_verbose = True
          elif arg == "--package":
              is_package = True
              display_flags.append("package")
          elif arg == "--no-cache":
              no_cache = True
          else:
              raise Exception("'{}' is not a recognized argument.".format(arg))
      
      if is_debug:
          is_verbose = True
      
      subprocess.run(
          'pip install --disable-pip-version-check {} --editable ".[dev{}]"'.format(
              "--no-cache-dir" if no_cache else "",
              ", package" if is_package else "",
          ),
          check=True,
          shell=True,
      )
      
      with (
          Path(__file__).parent / os.environ["PYTHON_BOOTSTRAPPER_GENERATED_DIR"] / "bootstrap_flags.json"
      ).open("w") as f:
          f.write("[{}]".format(", ".join(f'"{flag}"' for flag in display_flags)))
  
    ''',
    'Build.py': '''
      """Build tasks for this python project."""
      
      import sys
      
      from pathlib import Path
      
      import typer
      
      from dbrownell_Common import PathEx
      from dbrownell_DevTools.RepoBuildTools import Python as RepoBuildTools
      from typer.core import TyperGroup
      
      
      # ----------------------------------------------------------------------
      class NaturalOrderGrouper(TyperGroup):
          # pylint: disable=missing-class-docstring
          # ----------------------------------------------------------------------
          def list_commands(self, *args, **kwargs):  # pylint: disable=unused-argument
              return self.commands.keys()
      
      
      # ----------------------------------------------------------------------
      app = typer.Typer(
          cls=NaturalOrderGrouper,
          help=__doc__,
          no_args_is_help=True,
          pretty_exceptions_show_locals=False,
          pretty_exceptions_enable=False,
      )
      
      
      # ----------------------------------------------------------------------
      this_dir = PathEx.EnsureDir(Path(__file__).parent)
      src_dir = PathEx.EnsureDir(this_dir / "src")
      package_dir = PathEx.EnsureDir(src_dir / "this_is_the_project_name")
      
      
      # ----------------------------------------------------------------------
      Black = RepoBuildTools.BlackFuncFactory(this_dir, app)
      
      Pylint = RepoBuildTools.PylintFuncFactory(
          package_dir,
          app,
          default_min_score=9.5,
      )
      
      Pytest = RepoBuildTools.PytestFuncFactory(
          this_dir,
          package_dir.name,
          app,
          default_min_coverage=90.0,
      )
      
      UpdateVersion = RepoBuildTools.UpdateVersionFuncFactory(
          src_dir,
          PathEx.EnsureFile(package_dir / "__init__.py"),
          app,
      )
      
      Package = RepoBuildTools.PackageFuncFactory(this_dir, app)
      Publish = RepoBuildTools.PublishFuncFactory(this_dir, app)
      
      BuildBinary = RepoBuildTools.BuildBinaryFuncFactory(
          this_dir,
          PathEx.EnsureFile(src_dir / "BuildBinary.py"),
          app,
      )
      
      CreateDockerImage = RepoBuildTools.CreateDockerImageFuncFactory(
          this_dir,
          app,
      )
      
      
      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
      if __name__ == "__main__":
          sys.exit(app())
  
    ''',
    'CODE_OF_CONDUCT.md': '''
      # this_is_the_project_name Open Source Code of Conduct
      
      ## Principles
      These principles guide our data, product, and process decisions, architecture, and approach.
      
      - Open means transparent and participatory.
      - We take a modular and modern approach to software development.
      - We build open-source software and open-source process.
      - We value ease of implementation.
      - Fostering community includes building capacity and making our software and processes accessible to participants with diverse backgrounds and skillsets.
      - Data (and data science) is as important as software and process. We build open data sets where possible.
      - We strive for transparency for algorithms and places we might be introducing bias.
      
      ## Community Guidelines
      Information on contributing to this repository is available in our [Contributing file](CONTRIBUTING.md).
      
      When participating in this_is_the_project_name open source community conversations and spaces, we ask individuals to follow the following guidelines:
      
      - Embrace a culture of learning, and educate each other. We are all entering this conversation from different starting points and with different backgrounds. There are no dumb questions.
      - Take space and give space. We strive to create an equitable environment in which all are welcome and able to participate. We hope individuals feel comfortable voicing their opinions and providing contributions and will do our best to recognize and make space for individuals who may be struggling to find space here. Likewise, we expect individuals to recognize when they are taking up significant space and take a step back to allow room for others.
      - Be respectful.
      - Default to positive. Assume others' contributions are legitimate and valuable and that they are made with good intention.
      
      ## Acknowledgements
      This Community Guidelines was adapted from the [United States Digital Service](https://usds.gov) [Justice40](https://thejustice40.com) open source [repository](https://github.com/usds/justice40-tool).
  
    ''',
    'CONTRIBUTING.md': '''
      # Contribution Guidelines
      
      ## Contributor Code of Conduct
      As contributors and maintainers of this project, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities.
      
      We are committed to making participation in this project a harassment-free experience for everyone, regardless of the level of experience, gender, gender identity, expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, or religion.
      
      Examples of unacceptable behavior by participants include the use of sexual language or imagery, derogatory comments or personal attacks, trolling, public or private harassment, insults, or other unprofessional conduct.
      
      [Project maintainers](MAINTAINERS.md) have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned with this Code of Conduct.
      
      Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting one or more of the [project maintainers](MAINTAINERS.md).
      
      ## General information
      For specific proposals, please provide them as [pull requests](https://github.com/coreinfrastructure/best-practices-badge/pulls) or [issues](https://github.com/coreinfrastructure/best-practices-badge/issues) via our [GitHub site](https://github.com/<<github_username>>/<<github_repo_name>>).
      
      The [DEVELOPMENT.md](DEVELOPMENT.md) file explains how to install the program locally (highly recommended if you're going to make code changes). It also provides information useful for making changes and validating them locally before submitting a pull request.
      
      ### Pull requests and different branches recommended
      Pull requests are preferred, since they are specific. For more about how to create a pull request, see https://help.github.com/articles/using-pull-requests/.
      
      We recommend creating different branches for different (logical) changes, and creating a pull request into the `main` branch when you're done. See the GitHub documentation on [creating branches](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/) and [using pull requests](https://help.github.com/articles/using-pull-requests/).
      
      ### How we handle proposals
      We use GitHub to track proposed changes via its [issue tracker](https://github.com/coreinfrastructure/best-practices-badge/issues) and [pull requests](https://github.com/coreinfrastructure/best-practices-badge/pulls). Specific changes are proposed using those mechanisms. Issues are assigned to an individual, who works and then marks it complete. If there are questions or objections, the conversation of that issue or pull request is used to resolve it.
      
      ### We are proactive
      In general we try to be proactive to detect and eliminate mistakes and vulnerabilities as soon as possible, and to reduce their impact when they do happen. We use a defensive design and coding style to reduce the likelihood of mistakes, a variety of tools that try to detect mistakes early, and an automatic test suite with significant coverage. We also release the software as open source software so others can review it.
      
      Since early detection and impact reduction can never be perfect, we also try to detect and repair problems during deployment as quickly as possible. This is especially true for security issues; see our [security information](#vulnerability-reporting-security-issues) for more information.
      
      ## Vulnerability reporting (security issues)
      Please privately report vulnerabilities you find so we can fix them!
      
      See [SECURITY.md](SECURITY.md) for information on how to privately report vulnerabilities.
      
      ## Acknowledgements
      
      This Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.0.0, available at [http://contributor-covenant.org/version/1/0/0/](http://contributor-covenant.org/version/1/0/0/)
  
    ''',
    'DEVELOPMENT.md': '''
      # Local Development
      
      ## Enlistment
      Enlistment in this repository involves these steps.
      
      <table>
      <tr>
          <th>Step</th>
          <th>Command Line</th>
          <th>Description</th>
      </tr>
      <tr>
          <td>1. Clone the repository locally</td>
          <td><code>git clone https://github.com/<<github_username>>/<<github_repo_name>></code></td>
          <td><a href="https://git-scm.com/docs/git-clone" target="_blank">https://git-scm.com/docs/git-clone</a></td>
      </tr>
      <tr>
          <td>2. Bootstrap the environment</td>
          <td>
              <table>
                  <tr>
                      <th>Linux / MacOS</th>
                      <td><code>./Bootstrap.sh [--python-version &lt;python version&gt;]</code></td>
                  </tr>
                  <tr>
                      <th>Windows</th>
                      <td><code>Bootstrap.cmd [--python-version &lt;python version&gt;]</code></td>
                  </tr>
              </table>
          </td>
          <td>Prepares the repository for local development by enlisting in all dependencies.</td>
      </tr>
      <tr>
          <td>3. Activate the environment</td>
          <td>
              <table>
                  <tr>
                      <th>Linux / MacOS</th>
                      <td><code>. ./Activate.sh</code></td>
                  </tr>
                  <tr>
                      <th>Windows</th>
                      <td><code>Activate.cmd</code></td>
                  </tr>
              </table>
          </td>
          <td>
              <p>Activates the terminal for development. Each new terminal window must be activated.</p>
              <p>Activate.sh/.cmd is actually a shortcut to the most recently bootstrapped version of python (e.g. Activate3.11.sh/.cmd). With this functionality, it is possible to support multiple python versions in the same repository and activate each in a terminal using the python-specific activation script.</p>
          </td>
      </tr>
      <tr>
          <td>4. [Optional] Deactivate the environment</td>
          <td>
              <table>
                  <tr>
                      <th>Linux / MacOS</th>
                      <td><code>. ./Deactivate.sh</code></td>
                  </tr>
                  <tr>
                      <th>Windows</th>
                      <td><code>Deactivate.cmd</code></td>
                  </tr>
              </table>
          </td>
          <td>
              Deactivates the terminal environment. Deactivating is optional, as the terminal window itself may be closed when development activities are complete.
          </td>
      </tr>
      </table>
      
      ## Development Activities
      Each of these activities can be invoked from an activated terminal on your local machine.
      
      | Activity | Command Line | Description | Invoked by Continuous Integration |
      | --- | --- | --- | --- |
      | Code Formatting | `python Build.py black [--format]` | Format source code using [black](https://github.com/psf/black) based on settings in `pyproject.toml`. | |
      | Static Code Analysis | `python Build.py pylint` | Validate source code using [pylint](https://github.com/pylint-dev/pylint) based on settings in `pyproject.toml`. | |
      | Automated Testing | `python Build.py pytest [--code-coverage]` | Run automated tests using [pytest](https://docs.pytest.org/) and (optionally) extract code coverage information using [coverage](https://coverage.readthedocs.io/) based on settings in `pyproject.toml`. | |
      | Semantic Version Generation | `python Build.py update_version` | Generate a new [Semantic Version](https://semver.org) based on git commits using [AutoGitSemVer](https://github.com/davidbrownell/AutoGitSemVer). Version information is stored in `/src/this_is_the_project_name/__init__.py`. | |
      | Python Package Creation | <p><code>python Build.py package</code></p><p>Requires that the repository was bootstrapped with the <code>--package</code> flag. | Create a python package using [setuptools](https://github.com/pypa/setuptools) based on settings in `pyproject.toml`. | |
      | Python Package Publishing | <p><code>python Build.py publish</code></p><p>Requires that the repository was bootstrapped with the <code>--package</code> flag. | Publish a python package to [PyPi](https://pypi.org). | |
      | Build Binaries | `python Build.py build_binaries` |  Create a python binary for your current operating system using [cx_Freeze](https://cx-freeze.readthedocs.io/) based on settings in `src/BuildBinary.py`. | |
      | Development Docker Image | `python Build.py create_docker_image` | Create a [docker](https://docker.com) image for a bootstrapped development environment. This functionality is useful when adhering to the [FAIR principles for research software](https://doi.org/10.1038/s41597-022-01710-x) by supporting the creation of a development environment and its dependencies as they existed at the moment when the image was created. | |
  
    ''',
    'GOVERNANCE.md': '''
      # Governance
      This project is governed by our [Code of Conduct](CODE_OF_CONDUCT.md) and [Contribution Guidelines](CONTRIBUTING.md).
  
    ''',
    'LICENSE.txt': '''
      MIT LICENSE
      
      Copyright (c) 2024 this_is_the_project_name
      
      Permission is hereby granted, free of charge, to any person obtaining a copy
      of this software and associated documentation files (the "Software"), to deal
      in the Software without restriction, including without limitation the rights
      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      copies of the Software, and to permit persons to whom the Software is
      furnished to do so, subject to the following conditions:
      
      The above copyright notice and this permission notice shall be included in all
      copies or substantial portions of the Software.
      
      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
      SOFTWARE.
  
    ''',
    'MAINTAINERS.md': '''
      # Maintainers
      
      This page lists all active maintainers of this repository. If you were a maintainer and would like to add your name to the Emeritus list, please send us a pull request.
      
      See [Code of Conduct](CODE_OF_CONDUCT.md) and [Contributing](CONTRIBUTING.md) for general contribution guidelines.
      
      ## Current Maintainers
      | Maintainer | GitHub ID | Affiliation |
      | --- | --- | --- |
      TODO: Add maintainers
      
      ## Emeritus
      | Maintainer | GitHub ID | Affiliation |
      | --- | --- | --- |
  
    ''',
    'README.md': '''
      # this_is_the_project_name
      
      <!-- BEGIN: Exclude Package -->
      [![License](https://img.shields.io/github/license/<<github_username>>/<<github_repo_name>>?color=dark-green)](https://github.com/<<github_username>>/<<github_repo_name>>/blob/master/LICENSE.txt)
      [![GitHub commit activity](https://img.shields.io/github/commit-activity/y/<<github_username>>/<<github_repo_name>>?color=dark-green)](https://github.com/<<github_username>>/<<github_repo_name>>/commits/main/)
      <!-- [BEGIN] Badges -->
      <!-- [END] Badges -->
      <!-- END: Exclude Package -->
      
      <<project_description>>
      
      <!-- BEGIN: Exclude Package -->
      ## Contents
      - [Overview](#overview)
      - [Installation](#installation)
      - [Development](#development)
      - [Additional Information](#additional-information)
      - [License](#license)
      <!-- END: Exclude Package -->
      
      ## Overview
      TODO: Complete this section
      
      ### How to use this_is_the_project_name
      TODO: Complete this section
      
      <!-- BEGIN: Exclude Package -->
      ## Installation
      this_is_the_project_name can be installed via one of these methods:
      
      - [Installation via Executable](#installation-via-executable)
      - [Installation via pip](#installation-via-pip)
      
      ### Installation via Executable
      Download an executable for Linux, MacOS, or Windows to the the functionality provided by this repository without a dependency on python.
      
      1. Download the archive for the latest release [here](https://github.com/<<github_username>>/<<github_repo_name>>/releases/latest). The filename will begin with `exe.` and contain the name of your operating system.
      2. Decompress the archive.
      
      ### Installation via pip
      To install the this_is_the_project_name package via [pip](https://pip.pypa.io/en/stable/) (Python Installer for Python) for use with your python code:
      
      `pip install this_is_the_project_name`
      
      
      ## Development
      Please visit [Contributing](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CONTRIBUTING.md) and [Development](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/DEVELOPMENT.md) for information on contributing to this project.
      <!-- END: Exclude Package -->
      
      ## Additional Information
      Additional information can be found at these locations.
      
      | Title | Document | Description |
      | --- | --- | --- |
      | Code of Conduct | [CODE_OF_CONDUCT.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CODE_OF_CONDUCT.md) | Information about the the norms, rules, and responsibilities we adhere to when participating in this open source community. |
      | Contributing | [CONTRIBUTING.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/CONTRIBUTING.md) | Information about contributing code changes to this project. |
      | Development | [DEVELOPMENT.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/DEVELOPMENT.md) | Information about development activities involved in making changes to this project. |
      | Governance | [GOVERNANCE.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/GOVERNANCE.md) | Information about how this project is governed. |
      | Maintainers | [MAINTAINERS.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/MAINTAINERS.md) | Information about individuals who maintain this project. |
      | Security | [SECURITY.md](https://github.com/<<github_username>>/<<github_repo_name>>/blob/main/SECURITY.md) | Information about how to privately report security issues associated with this project. |
      ## License
      
      this_is_the_project_name is licensed under the <a href="https://choosealicense.com/licenses/mit/" target="_blank">MIT</a> license.
  
    ''',
    'SECURITY.md': '''
      # Security
      
      If you find a significant vulnerability, or evidence of one, please report it privately.
      
      We prefer that you use the [GitHub mechanism for privately reporting a vulnerability](https://docs.github.com/en/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability#privately-reporting-a-security-vulnerability). Under the [main repository's security tab](https://github.com/<<github_username>>/<<github_repo_name>>/security), in the left sidebar, under "Reporting", click "Advisories", click the "New draft security advisory" button to open the advisory form.
      [issues](https://github.com/coreinfrastructure/best-practices-badge/issues) via our [GitHub site](https://github.com/<<github_username>>/<<github_repo_name>>).
      
      We will gladly give credit to anyone who reports a vulnerability so that we can fix it. If you want to remain anonymous or pseudonymous instead, please let us know that; we will gladly respect your wishes.
      
      We gladly welcome patches to fix such vulnerabilities! See [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributions.
  
    ''',
    'post_generation_actions.html': '''
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <meta http-equiv="X-UA-Compatible" content="ie=edge">
          <title>this_is_the_project_name Post Generation Actions</title>
        </head>
        <style>
          body {
            font-family: "Open Sans", sans-serif;
          }
      
          details {
            width: 100%;
            overflow: hidden; /* Keep this line to prevent an odd blue outline around the element in Safari. */
          }
      
          details summary {
            display: block;
          }
      
          details summary::-webkit-details-marker {
            display: none;
          }
      
          details summary span {
            position: relative;
            display: flex;
            align-items: center;
            padding-left: 1rem;
            background: #444;
            color: #fff;
            height: 4rem;
          }
      
          details summary span:hover {
            cursor: pointer;
          }
      
          details summary span::before {
            content: "â–º";
            font-size: 1rem;
            display: flex;
            align-items: center;
            margin-right: 0.5rem;
            transition: rotate 200ms 400ms ease-out;
          }
      
          details[open] summary span::before {
            rotate: 90deg;
            transition: rotate 200ms ease-out;
          }
      
          details summary span input {
            margin-right: 0.75rem;
          }
      
          div.details-content {
            box-sizing: border-box;
            width: 100%;
            max-height: 0;
            overflow: hidden;
            padding: 0 10px;
            border: 2px solid transparent;
            transition: max-height 400ms ease-out, border 0ms 400ms linear;
            background-color: rgba(0, 0, 0, 0.05);
            margin-bottom: 1rem;
          }
      
          details[open] + div.details-content {
            max-height: 800px; /* Set a max-height value enough to show all the content */
            border-color: #888;
            transition: max-height 400ms ease-out, border 0ms linear;
          }
      
          code {
            background-color: rgba(0, 0, 0, 0.10);
          }
      
        </style>
        <body>
          <h1>this_is_the_project_name Post Generation Actions</h1>
          <p>The following steps must be completed in the order listed now that your project has been generated.</p>
      
          <!-- [BEGIN] Before Repository Tool Instruction -->
          <!-- [END] Before Repository Tool Instruction -->
      
                  <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="initialize-the-git-repository">Initialize the git repository</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>In this step, we will commit the files generated in git and push the changes.</p>
      
      <p>Open a terminal window, navigate to your repository, and run the following commands:</p>
      
      1. <code>git add --all</code><br/>
      2. <code>git commit -m "ðŸŽ‰ Initial commit"</code><br/>
      3. <code>git push</code><br/>
      </p>
      
              </div>
      
          <!-- [BEGIN] After Repository Tool Instruction -->
                  <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-readme.md">Update README.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>README.md</code>.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-maintainers.md">Update MAINTAINERS.md</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Please search for and replace all <code>TODO:</code> comments in <code>MAINTAINERS.md</code>.</p>
      
              </div>
              <details>
                  <summary>
                      <span role="term"><input type="checkbox" id="update-pyproject.toml">Update pyproject.toml</span>
                  </summary>
              </details>
              <div role="definition" class="details-content">
      <p>Python development tools, package dependencies, and packaging instructions are configured in <code>pyproject.toml</code>. Please visit <a href="https://packaging.python.org/en/latest/guides/writing-pyproject-toml/" target="_blank">this link</a> for more information on these files.</p>
      <p>Please search for and replace all <code>TODO:</code> comments in <code>pyproject.toml</code>.</p>
      
              </div>
      <!-- [END] After Repository Tool Instruction -->
      
          <details>
              <summary>
                  <span role="term"><input type="checkbox" id="delete-this-file">Delete this file</span>
              </summary>
          </details>
          <div role="definition" class="details-content">
              <p>After you have completed all the steps, you can delete this file.</p>
              <p>Now your project is ready to go!</p>
          </div>
      
          <script>
            document.querySelectorAll("details summary span input[type=checkbox]").forEach(
              function(checkbox) {
                var key = `${ location.href }-${ checkbox.id }`;
      
                if(window.localStorage.getItem(key) === "true")
                  checkbox.checked = true;
      
                this.addEventListener(
                  "change",
                  function() {
                    window.localStorage.setItem(key, checkbox.checked ? "true" : "false");
                  },
                );
              }
            );
          </script>
      
          <!-- TODO(copier-ProjectScaffolding): Decorate code elements with a "copy code" button that copies to the clipboard -->
        </body>
      </html>
  
    ''',
    'pyproject.toml': '''
      # https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
      
      [build-system]
      requires = ["setuptools >= 63.0"]
      build-backend = "setuptools.build_meta"
      
      # ----------------------------------------------------------------------
      # |
      # |  Project
      # |
      # ----------------------------------------------------------------------
      [project]
      name = "this_is_the_project_name"
      description = "<<project_description>>"
      
      license = { text = "MIT" }
      
      authors = [
          { name = "<<author_name>>", email = "<<author_email>>" },
      ]
      
      keywords = [
          # TODO: Add keywords specific to your project.
      ]
      
      # https://pypi.org/classifiers/
      classifiers = [
          # TODO: Add additional classifiers specific to your project.
          "License :: OSI Approved :: MIT License",
          "Operating System :: MacOS",
          "Operating System :: Microsoft :: Windows",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
      ]
      
      dependencies = [
          # TODO: Add additional package dependencies specific to your project.
          "typer ~= 0.9"
      ]
      
      dynamic = [
          "version",
      ]
      
      readme = "README.md"
      
      [project.optional-dependencies]
      dev = [
          "dbrownell_DevTools",
      ]
      
      package = [
          "build ~= 1.2",
          "cx_Freeze ~= 6.15",
          "twine ~= 5.1",
      ]
      
      [project.urls]
      Homepage = "https://github.com/<<github_username>>/<<github_repo_name>>"
      Documentation = "https://github.com/<<github_username>>/<<github_repo_name>>"
      Repository = "https://github.com/<<github_username>>/<<github_repo_name>>"
      
      
      [project.scripts]
      this_is_the_project_name = "this_is_the_project_name:EntryPoint.app"
      
      # ----------------------------------------------------------------------
      # |
      # |  black
      # |
      # ----------------------------------------------------------------------
      [tool.black]
      line-length = 100
      
      # ----------------------------------------------------------------------
      # |
      # |  pylint
      # |
      # ----------------------------------------------------------------------
      [tool.pylint.basic]
      class-const-naming-style = "any"
      function-naming-style = "PascalCase"
      good-names = [
          "i",
          "j",
          "k",
          "ex",
          "Run",
          "_",
          "dm",                                   # added
          "f",                                    # added
      ]
      method-naming-style = "any"
      module-naming-style = "PascalCase"
      
      [tool.pylint.design]
      max-args = 10
      max-parents = 15
      
      [tool.pylint.main]
      ignore-paths = [
          # Note that the pylint vscode extension has trouble with wrapping these patterns in quotes
          # (which is required to parse the file correctly). Because of this, each pattern must be
          # converted to a glob pattern and specified in the pylint vscode settings as well.
          "^.+?Tests/.*$",
      ]
      
      [tool.pylint."messages control"]
      disable = [
          "raw-checker-failed",
          "bad-inline-option",
          "locally-disabled",
          "file-ignored",
          "suppressed-message",
          "useless-suppression",
          "deprecated-pragma",
          "use-symbolic-message-instead",
          "assignment-from-no-return",            # added
          "broad-except",                         # added
          "broad-exception-raised",               # added
          "cell-var-from-loop",                   # added
          "consider-using-f-string",              # added
          "import-outside-toplevel",              # added
          "line-too-long",                        # added
          "missing-function-docstring",           # added
          "subprocess-run-check",                 # added
          "super-with-arguments",                 # added
          "too-few-public-methods",               # added
          "unnecessary-lambda-assignment",        # added
          "unspecified-encoding",                 # added
      ]
      
      # ----------------------------------------------------------------------
      # |
      # |  pyright
      # |
      # ----------------------------------------------------------------------
      [tool.pyright]
      exclude = [
          "**/*Tests/*",
          "**/Generated/*",
      ]
      
      reportMissingImports = true
      reportMissingTypeStubs = false
      
      # ----------------------------------------------------------------------
      # |
      # |  pytest
      # |
      # ----------------------------------------------------------------------
      [tool.pytest.ini_options]
      python_files = [
          "**/*Test.py",
      ]
      
      # ----------------------------------------------------------------------
      # |
      # |  setuptools
      # |
      # ----------------------------------------------------------------------
      [tool.setuptools.dynamic]
      version = { attr = "this_is_the_project_name.__version__" }
      
      [tool.setuptools.packages.find]
      where = ["src"]
  
    ''',
    'src/AutoGitSemVer.yaml': '''
      # This file is used by AutoGitSemVer to configure the semantic version of the this_is_the_project_name package.
      # It indicates that AutoGitSemVer should only look at changes in this directory, its descendants, and files specified in
      # additional_dependencies when calculating the semantic version for the package.
      additional_dependencies:
        - "../pyproject.toml"
        - "../README.md"
  
    ''',
    'src/BuildBinary.py': '''
      """Builds the binary for this project."""
      
      import datetime
      import importlib
      import re
      
      from functools import cache
      from pathlib import Path
      
      from cx_Freeze import setup, Executable
      from dbrownell_Common import PathEx
      
      
      # ----------------------------------------------------------------------
      @cache
      def _GetName() -> str:
          return "this_is_the_project_name"
      
      
      # ----------------------------------------------------------------------
      @cache
      def _GetVersionAndDocstring() -> tuple[str, str]:
          mod = importlib.import_module(_GetName())
          return mod.__version__, mod.__doc__ or ""
      
      
      # ----------------------------------------------------------------------
      @cache
      def _GetEntryPoint() -> Path:
          return PathEx.EnsureFile(Path(__file__).parent / _GetName() / "EntryPoint.py")
      
      
      # ----------------------------------------------------------------------
      @cache
      def _GetCopyright() -> str:
          match = re.search(
              r"""(?#
              Copyright                           )Copyright(?#
              Mark [Optional]                     )(?P<mark>\s+\([cC]\))?(?#
              Year                                )\s+(?P<year>\d{4})(?#
              Year Range [Optional]               )(?:\s*-\s*\d{2,4})?(?#
              Suffix                              )(?P<suffix>.+)(?#
              End of line                         )$(?#
              )""",
              PathEx.EnsureFile(Path(__file__).parent.parent / "LICENSE.txt").read_text(),
              flags=re.MULTILINE,
          )
      
          current_year = datetime.datetime.now().year
      
          if not match:
              return f"Copyright {current_year} <<author_name>>"
      
          initial_year = int(match.group("year"))
      
          if current_year == initial_year:
              year_suffix = ""
          elif current_year // 100 != initial_year // 100:
              year_suffix = f"-{current_year}"
          else:
              year_suffix = f"-{current_year % 100}"
      
          return f"Copyright{match.group('mark')} {initial_year}{year_suffix} <<author_name>>"
      
      
      # ----------------------------------------------------------------------
      setup(
          name=_GetName(),
          version=_GetVersionAndDocstring()[0],
          description=_GetVersionAndDocstring()[1],
          executables=[
              Executable(
                  _GetEntryPoint(),
                  base="console",
                  copyright=_GetCopyright(),
                  # icon=<icon_filename>,
                  target_name=_GetName(),
                  # trademarks=<trademarks>,
              ),
          ],
          options={
              "build_exe": {
                  "excludes": [
                      "tcl",
                      "tkinter",
                  ],
                  "no_compress": False,
                  "optimize": 0,
                  # "packages": [],
                  # "include_files": [],
              },
          },
      )
  
    ''',
    'src/this_is_the_project_name/EntryPoint.py': '''
      """This file serves as an example of how to create scripts that can be invoked from the command line once the package is installed."""
      
      import sys
      
      import typer
      
      from typer.core import TyperGroup  # type: ignore [import-untyped]
      
      from this_is_the_project_name import Math, __version__
      
      
      # ----------------------------------------------------------------------
      class NaturalOrderGrouper(TyperGroup):
          # pylint: disable=missing-class-docstring
          # ----------------------------------------------------------------------
          def list_commands(self, *args, **kwargs):  # pylint: disable=unused-argument
              return self.commands.keys()
      
      
      # ----------------------------------------------------------------------
      app = typer.Typer(
          cls=NaturalOrderGrouper,
          help=__doc__,
          no_args_is_help=True,
          pretty_exceptions_show_locals=False,
          pretty_exceptions_enable=False,
      )
      
      
      # ----------------------------------------------------------------------
      @app.command("Add")
      def Add(
          x: int,
          y: int,
      ) -> None:
          """Adds 2 values."""
      
          sys.stdout.write(str(Math.Add(x, y)))
      
      
      # ----------------------------------------------------------------------
      @app.command("Sub")
      def Sub(
          x: int,
          y: int,
      ) -> None:
          """Subtracts 2 values."""
      
          sys.stdout.write(str(Math.Sub(x, y)))
      
      
      # ----------------------------------------------------------------------
      @app.command("Mult")
      def Mult(
          x: int,
          y: int,
      ) -> None:
          """Multiplies 2 values."""
      
          sys.stdout.write(str(Math.Mult(x, y)))
      
      
      # ----------------------------------------------------------------------
      @app.command("Div")
      def Div(
          x: int,
          y: int,
      ) -> None:
          """Divides 1 value by another."""
      
          sys.stdout.write(str(Math.Div(x, y)))
      
      
      # ----------------------------------------------------------------------
      @app.command("Version")
      def Version() -> None:
          """Prints the version of the package."""
      
          sys.stdout.write(__version__)
      
      
      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
      # ----------------------------------------------------------------------
      if __name__ == "__main__":
          app()  # pragma: no cover
  
    ''',
    'src/this_is_the_project_name/Math.py': '''
      """Basic math functions. This file illustrates how to create a python package that contains functions that can be invoked by other python code."""
      
      
      # ----------------------------------------------------------------------
      def Add(x, y):
          return x + y
      
      
      # ----------------------------------------------------------------------
      def Sub(x, y):
          return x - y
      
      
      # ----------------------------------------------------------------------
      def Mult(x, y):
          return x * y
      
      
      # ----------------------------------------------------------------------
      def Div(x, y):
          return x / y
  
    ''',
    'src/this_is_the_project_name/__init__.py': '''
      # pylint: disable=missing-module-docstring,invalid-name
      
      # Note that this value will be overwritten by calls to `python ../../Build.py update_version` based
      # on changes observed in the git repository. The default value below will be used until the value
      # here is explicitly updated by the Continuous Integration system.
      __version__ = "0.1.0"
      
      from .Math import Add, Sub, Mult, Div
  
    ''',
    'tests/EntryPoint_UnitTest.py': '''
      """Unit tests for EntryPoint.py"""
      
      from typer.testing import CliRunner
      
      from this_is_the_project_name import __version__
      from this_is_the_project_name.EntryPoint import app
      
      
      # ----------------------------------------------------------------------
      def test_Add():
          result = CliRunner().invoke(app, ["Add", "1", "20"])
          assert result.exit_code == 0
          assert result.stdout == "21"
      
      
      # ----------------------------------------------------------------------
      def test_Sub():
          result = CliRunner().invoke(app, ["Sub", "1", "20"])
          assert result.exit_code == 0
          assert result.stdout == "-19"
      
      
      # ----------------------------------------------------------------------
      def test_Mult():
          result = CliRunner().invoke(app, ["Mult", "2", "15"])
          assert result.exit_code == 0
          assert result.stdout == "30"
      
      
      # ----------------------------------------------------------------------
      def test_Div():
          result = CliRunner().invoke(app, ["Div", "6", "3"])
          assert result.exit_code == 0
          assert result.stdout == "2.0"
      
      
      # ----------------------------------------------------------------------
      def test_Version():
          result = CliRunner().invoke(app, ["Version"])
          assert result.exit_code == 0
          assert result.stdout == __version__
      
      
      # ----------------------------------------------------------------------
      def test_NoArgs():
          result = CliRunner().invoke(app, [])
          assert result.exit_code == 0
          assert "Add" in result.stdout
          assert "Sub" in result.stdout
          assert "Mult" in result.stdout
          assert "Div" in result.stdout
          assert "Version" in result.stdout
  
    ''',
    'tests/Math_UnitTest.py': '''
      """Unit tests for Math.py"""
      
      from this_is_the_project_name.Math import *
      
      
      # ----------------------------------------------------------------------
      def test_Add():
          assert Add(1, 20) == 21
      
      
      # ----------------------------------------------------------------------
      def test_Sub():
          assert Sub(1, 20) == -19
      
      
      # ----------------------------------------------------------------------
      def test_Mult():
          assert Mult(2, 15) == 30
      
      
      # ----------------------------------------------------------------------
      def test_Div():
          assert Div(6, 3) == 2
  
    ''',
  })
# ---
