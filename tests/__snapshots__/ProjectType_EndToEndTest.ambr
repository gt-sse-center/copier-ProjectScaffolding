# serializer version: 1
# name: test_Files[None-None-None]
  dict({
  })
# ---
# name: test_Files[None-None-PythonExecutionEnvironment]
  dict({
    'Bootstrap.cmd': '''
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  This script downloads and invokes BoostrapImpl.cmd from the PythonBootstrapper
      @REM |  repository (https://github.com/davidbrownell/PythonBootstrapper).
      @REM |
      @REM |  Arguments:
      @REM |
      @REM |      --debug                         Display additional debugging information.
      @REM |
      @REM |      --force                         Ensure that a new python environment is installed, even if it already exists.
      @REM |
      @REM |      --python-version <version>      Specify the python version to install; the default python version is installed if not specified.
      @REM |
      @REM |      --bootstrap-branch <branch>     Specify the branch of the PythonBootstrapper repository to use when downloading BootstrapImpl; "main" is used if not specified.
      @REM |
      @REM ----------------------------------------------------------------------
      @setlocal EnableDelayedExpansion
      @pushd %~dp0
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Parse and Process Arguments
      @REM |
      @REM ----------------------------------------------------------------------
      @set _BOOTSTRAP_BRANCH=main
      @set _COMMAND_LINE_ARGS=
      
      :ParseArgs
      @if '%1' EQU '' @goto :ParseArgs_End
      
      @set ARG=%1
      @set ARG=%ARG:"=%
      
      @if "%ARG%" NEQ "--bootstrap-branch" @goto :ParseArgs_BootstrapBranchEnd
      
      @REM Extract the bootstrap branch
      @shift /1
      
      @set ARG=%1
      @set ARG=%ARG:"=%
      
      @set _BOOTSTRAP_BRANCH=%ARG%
      @goto :ParseArgs_Next
      
      :ParseArgs_BootstrapBranchEnd
      @set _COMMAND_LINE_ARGS=%_COMMAND_LINE_ARGS% %1
      
      :ParseArgs_Next
      @shift /1
      @goto :ParseArgs
      
      :ParseArgs_End
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Download BootstrapImpl.cmd
      @REM |
      @REM ----------------------------------------------------------------------
      @echo Downloading Bootstrap code...
      
      @set _BOOTSTRAPIMPL_URL=https://raw.githubusercontent.com/davidbrownell/PythonBootstrapper/%_BOOTSTRAP_BRANCH%/src/BootstrapImpl.cmd
      
      @call :_CreateTempFileName
      
      @curl --header "Cache-Control: no-cache, no-store" --header "Pragma: no-cache" --location %_BOOTSTRAPIMPL_URL% --output BootstrapImpl.cmd --no-progress-meter --fail-with-body > "%_BOOTSTRAP_TEMP_FILENAME%" 2>&1
      @set _ERRORLEVEL=%ERRORLEVEL%
      
      @if %_ERRORLEVEL% NEQ 0 (
          @echo [1ADownloading Bootstrap code...[31m[1mFAILED[0m ^(%_BOOTSTRAPIMPL_URL%^).
          @echo.
      
          @type "%_BOOTSTRAP_TEMP_FILENAME%"
          @goto :Exit
      )
      
      @call :_DeleteTempFile
      @echo [1ADownloading Bootstrap code...[32m[1mDONE[0m.
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Invoke BootstrapImpl.cmd
      @REM |
      @REM ----------------------------------------------------------------------
      @call BootstrapImpl.cmd %_COMMAND_LINE_ARGS%
      @set _ERRORLEVEL=%ERRORLEVEL%
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Exit
      @REM |
      @REM ----------------------------------------------------------------------
      :Exit
      @if exist BootstrapImpl.cmd del BootstrapImpl.cmd
      @call :_DeleteTempFile
      
      @popd
      
      @endlocal & @exit /B %_ERRORLEVEL%
      
      @REM ----------------------------------------------------------------------
      @REM ----------------------------------------------------------------------
      @REM ----------------------------------------------------------------------
      :_CreateTempFileName
      @set _BOOTSTRAP_TEMP_FILENAME=%CD%\Bootstrap-!RANDOM!-!Time:~6,5!
      @goto :EOF
      
      @REM ----------------------------------------------------------------------
      :_DeleteTempFile
      @if "%_BOOTSTRAP_TEMP_FILENAME%" NEQ "" (
          @if exist "%_BOOTSTRAP_TEMP_FILENAME%" (
              @del "%_BOOTSTRAP_TEMP_FILENAME%"
          )
      )
      @goto :EOF
  
    ''',
    'Bootstrap.sh': '''
      #!/usr/bin/env bash
      # ----------------------------------------------------------------------
      # |
      # |  This script downloads and invokes BootstrapImpl.sh from the PythonBootstrapper
      # |  repository (https://github.com/davidbrownell/PythonBootstrapper).
      # |
      # |  Arguments:
      # |
      # |      --debug                         Display additional debugging information.
      # |
      # |      --force                         Ensure that a new python environment is installed, even if it already exists.
      # |
      # |      --python-version <version>      Specify the python version to install; the default python version is installed if not specified.
      # |
      # |      --bootstrap-branch <branch>     Specify the branch of the PythonBootstrapper repository to use when downloading BootstrapImpl; "main" is used if not specified.
      # |
      # ----------------------------------------------------------------------
      set +v # Continue on errors
      
      this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
      pushd "${this_dir}" > /dev/null || exit
      
      # ----------------------------------------------------------------------
      # |
      # |  Parse and Process Arguments
      # |
      # ----------------------------------------------------------------------
      bootstrap_branch=main
      command_line_args=()
      
      while [[ $# -gt 0 ]]; do
          if [[ "$1" == "--bootstrap-branch" ]]; then
              bootstrap_branch=$2
              shift
          else
              command_line_args+=("$1")
          fi
      
          shift
      done
      
      # ----------------------------------------------------------------------
      # |
      # |  Download BootstrapImpl.sh
      # |
      # ----------------------------------------------------------------------
      echo "Downloading Bootstrap code..."
      
      bootstrap_url=https://raw.githubusercontent.com/davidbrownell/PythonBootstrapper/${bootstrap_branch}/src/BootstrapImpl.sh
      
      temp_script_name=$(mktemp Bootstrap.XXXXXX)
      
      curl --header "Cache-Control: no-cache, no-store" --header "Pragma: no-cache" --location ${bootstrap_url} --output BootstrapImpl.sh --no-progress-meter --fail-with-body > "${temp_script_name}" 2>&1
      error=$?
      
      if [[ ${error} != 0 ]]; then
          echo "[1ADownloading Bootstrap code...[31m[1mFAILED[0m (${bootstrap_url})."
          echo ""
      
          cat "${temp_script_name}"
          rm "${temp_script_name}"
      
          exit ${error}
      fi
      
      chmod u+x BootstrapImpl.sh
      echo "[1ADownloading Bootstrap code...[32m[1mDONE[0m."
      
      # ----------------------------------------------------------------------
      # |
      # |  Invoke BootstrapImpl.sh
      # |
      # ----------------------------------------------------------------------
      ./BootstrapImpl.sh "${command_line_args[@]}"
      error=$?
      
      # ----------------------------------------------------------------------
      # |
      # |  Exit
      # |
      # ----------------------------------------------------------------------
      rm "BootstrapImpl.sh"
      rm "${temp_script_name}"
      
      exit ${error}
  
    ''',
    'BootstrapEpilog.py': '''
      # pylint: disable=missing-module-docstring
      
      import subprocess
      import sys
      
      from pathlib import Path
      
      
      # Parse the arguments
      no_cache = False
      
      display_flags: list[str] = []
      
      # First arg is the script name, second arg is the name of the shell script to write to
      for arg in sys.argv[2:]:
          if arg == "--no-cache":
              no_cache = True
          else:
              raise Exception("'{}' is not a recognized argument.".format(arg))
      
      subprocess.run(
          "pip install --disable-pip-version-check {} --requirement requirements.txt".format(
              "--no-cache-dir" if no_cache else "",
          ),
          check=True,
          shell=True,
          cwd=Path(__file__).parent,
      )
  
    ''',
    'requirements.txt': '''
      # TODO: Add your custom package requirements here
  
    ''',
  })
# ---
# name: test_Files[git-GitHub-None]
  dict({
    '.github/CODEOWNERS': '''
      * @<<github_username>>
  
    ''',
    '.github/ISSUE_TEMPLATE/bug_report.md': '''
      ---
      name: Bug report
      about: Create a report to help us improve.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Describe the bug
      A clear and concise description of what the bug is.
      
      ## To Reproduce
      Steps to reproduce the behavior:
      1. Go to '...'
      2. Click on '....'
      3. Scroll down to '....'
      4. See error
      
      ## Expected behavior
      A clear and concise description of what you expected to happen.
      
      ## Screenshots
      If applicable, add screenshots to help explain your problem.
      
      ## Environment (please complete the following information):
       - OS: [e.g. iOS]
       - Python Version: [e.g. 3.12, 3.11, etc.]
       - <<project_name>> Version [e.g. 1.2.3]
      
      ## Additional context
      Add any other context about the problem here.
  
    ''',
    '.github/ISSUE_TEMPLATE/config.yml': '''
      blank_issues_enabled: false
  
    ''',
    '.github/ISSUE_TEMPLATE/custom.md': '''
      ---
      name: Custom issue template
      about: Create an issue that isn't a bug or feature request.
      title: ''
      labels: ''
      assignees: ''
      
      ---
  
    ''',
    '.github/ISSUE_TEMPLATE/feature_request.md': '''
      ---
      name: Feature request
      about: Suggest an idea for this project.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Is your feature request related to a problem? Please describe.
      A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]
      
      ## Describe the solution you'd like
      A clear and concise description of what you want to happen.
      
      ## Describe alternatives you've considered
      A clear and concise description of any alternative solutions or features you've considered.
      
      ## Additional context
      Add any other context or screenshots about the feature request here.
  
    ''',
    '.github/pull_request_template.md': '''
      ## :pencil: Description
      Please include a summary of the change and the work item associated with it.
      
      ## :gear: Work Item
      Please include link to the corresponding GitHub Issue or Project work item.
      
      ## :movie_camera: Demo
      Please provide any images, GIFs, or videos that show the effect of your changes (if applicable). A picture is worth a thousand words.
  
    ''',
    '.gitignore': '''
      post_generation_actions.html
      
  
    ''',
  })
# ---
# name: test_Files[git-GitHub-PythonExecutionEnvironment]
  dict({
    '.github/CODEOWNERS': '''
      * @<<github_username>>
  
    ''',
    '.github/ISSUE_TEMPLATE/bug_report.md': '''
      ---
      name: Bug report
      about: Create a report to help us improve.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Describe the bug
      A clear and concise description of what the bug is.
      
      ## To Reproduce
      Steps to reproduce the behavior:
      1. Go to '...'
      2. Click on '....'
      3. Scroll down to '....'
      4. See error
      
      ## Expected behavior
      A clear and concise description of what you expected to happen.
      
      ## Screenshots
      If applicable, add screenshots to help explain your problem.
      
      ## Environment (please complete the following information):
       - OS: [e.g. iOS]
       - Python Version: [e.g. 3.12, 3.11, etc.]
       - <<project_name>> Version [e.g. 1.2.3]
      
      ## Additional context
      Add any other context about the problem here.
  
    ''',
    '.github/ISSUE_TEMPLATE/config.yml': '''
      blank_issues_enabled: false
  
    ''',
    '.github/ISSUE_TEMPLATE/custom.md': '''
      ---
      name: Custom issue template
      about: Create an issue that isn't a bug or feature request.
      title: ''
      labels: ''
      assignees: ''
      
      ---
  
    ''',
    '.github/ISSUE_TEMPLATE/feature_request.md': '''
      ---
      name: Feature request
      about: Suggest an idea for this project.
      title: ''
      labels: ''
      assignees: ''
      
      ---
      
      ## Is your feature request related to a problem? Please describe.
      A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]
      
      ## Describe the solution you'd like
      A clear and concise description of what you want to happen.
      
      ## Describe alternatives you've considered
      A clear and concise description of any alternative solutions or features you've considered.
      
      ## Additional context
      Add any other context or screenshots about the feature request here.
  
    ''',
    '.github/pull_request_template.md': '''
      ## :pencil: Description
      Please include a summary of the change and the work item associated with it.
      
      ## :gear: Work Item
      Please include link to the corresponding GitHub Issue or Project work item.
      
      ## :movie_camera: Demo
      Please provide any images, GIFs, or videos that show the effect of your changes (if applicable). A picture is worth a thousand words.
  
    ''',
    '.gitignore': '''
      post_generation_actions.html
      
      Activate*.cmd
      Activate*.sh
      Deactivate*.cmd
      Deactivate*.sh
      
      **/__pycache__/**
      **/Generated/**
      
  
    ''',
    'Bootstrap.cmd': '''
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  This script downloads and invokes BoostrapImpl.cmd from the PythonBootstrapper
      @REM |  repository (https://github.com/davidbrownell/PythonBootstrapper).
      @REM |
      @REM |  Arguments:
      @REM |
      @REM |      --debug                         Display additional debugging information.
      @REM |
      @REM |      --force                         Ensure that a new python environment is installed, even if it already exists.
      @REM |
      @REM |      --python-version <version>      Specify the python version to install; the default python version is installed if not specified.
      @REM |
      @REM |      --bootstrap-branch <branch>     Specify the branch of the PythonBootstrapper repository to use when downloading BootstrapImpl; "main" is used if not specified.
      @REM |
      @REM ----------------------------------------------------------------------
      @setlocal EnableDelayedExpansion
      @pushd %~dp0
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Parse and Process Arguments
      @REM |
      @REM ----------------------------------------------------------------------
      @set _BOOTSTRAP_BRANCH=main
      @set _COMMAND_LINE_ARGS=
      
      :ParseArgs
      @if '%1' EQU '' @goto :ParseArgs_End
      
      @set ARG=%1
      @set ARG=%ARG:"=%
      
      @if "%ARG%" NEQ "--bootstrap-branch" @goto :ParseArgs_BootstrapBranchEnd
      
      @REM Extract the bootstrap branch
      @shift /1
      
      @set ARG=%1
      @set ARG=%ARG:"=%
      
      @set _BOOTSTRAP_BRANCH=%ARG%
      @goto :ParseArgs_Next
      
      :ParseArgs_BootstrapBranchEnd
      @set _COMMAND_LINE_ARGS=%_COMMAND_LINE_ARGS% %1
      
      :ParseArgs_Next
      @shift /1
      @goto :ParseArgs
      
      :ParseArgs_End
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Download BootstrapImpl.cmd
      @REM |
      @REM ----------------------------------------------------------------------
      @echo Downloading Bootstrap code...
      
      @set _BOOTSTRAPIMPL_URL=https://raw.githubusercontent.com/davidbrownell/PythonBootstrapper/%_BOOTSTRAP_BRANCH%/src/BootstrapImpl.cmd
      
      @call :_CreateTempFileName
      
      @curl --header "Cache-Control: no-cache, no-store" --header "Pragma: no-cache" --location %_BOOTSTRAPIMPL_URL% --output BootstrapImpl.cmd --no-progress-meter --fail-with-body > "%_BOOTSTRAP_TEMP_FILENAME%" 2>&1
      @set _ERRORLEVEL=%ERRORLEVEL%
      
      @if %_ERRORLEVEL% NEQ 0 (
          @echo [1ADownloading Bootstrap code...[31m[1mFAILED[0m ^(%_BOOTSTRAPIMPL_URL%^).
          @echo.
      
          @type "%_BOOTSTRAP_TEMP_FILENAME%"
          @goto :Exit
      )
      
      @call :_DeleteTempFile
      @echo [1ADownloading Bootstrap code...[32m[1mDONE[0m.
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Invoke BootstrapImpl.cmd
      @REM |
      @REM ----------------------------------------------------------------------
      @call BootstrapImpl.cmd %_COMMAND_LINE_ARGS%
      @set _ERRORLEVEL=%ERRORLEVEL%
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Exit
      @REM |
      @REM ----------------------------------------------------------------------
      :Exit
      @if exist BootstrapImpl.cmd del BootstrapImpl.cmd
      @call :_DeleteTempFile
      
      @popd
      
      @endlocal & @exit /B %_ERRORLEVEL%
      
      @REM ----------------------------------------------------------------------
      @REM ----------------------------------------------------------------------
      @REM ----------------------------------------------------------------------
      :_CreateTempFileName
      @set _BOOTSTRAP_TEMP_FILENAME=%CD%\Bootstrap-!RANDOM!-!Time:~6,5!
      @goto :EOF
      
      @REM ----------------------------------------------------------------------
      :_DeleteTempFile
      @if "%_BOOTSTRAP_TEMP_FILENAME%" NEQ "" (
          @if exist "%_BOOTSTRAP_TEMP_FILENAME%" (
              @del "%_BOOTSTRAP_TEMP_FILENAME%"
          )
      )
      @goto :EOF
  
    ''',
    'Bootstrap.sh': '''
      #!/usr/bin/env bash
      # ----------------------------------------------------------------------
      # |
      # |  This script downloads and invokes BootstrapImpl.sh from the PythonBootstrapper
      # |  repository (https://github.com/davidbrownell/PythonBootstrapper).
      # |
      # |  Arguments:
      # |
      # |      --debug                         Display additional debugging information.
      # |
      # |      --force                         Ensure that a new python environment is installed, even if it already exists.
      # |
      # |      --python-version <version>      Specify the python version to install; the default python version is installed if not specified.
      # |
      # |      --bootstrap-branch <branch>     Specify the branch of the PythonBootstrapper repository to use when downloading BootstrapImpl; "main" is used if not specified.
      # |
      # ----------------------------------------------------------------------
      set +v # Continue on errors
      
      this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
      pushd "${this_dir}" > /dev/null || exit
      
      # ----------------------------------------------------------------------
      # |
      # |  Parse and Process Arguments
      # |
      # ----------------------------------------------------------------------
      bootstrap_branch=main
      command_line_args=()
      
      while [[ $# -gt 0 ]]; do
          if [[ "$1" == "--bootstrap-branch" ]]; then
              bootstrap_branch=$2
              shift
          else
              command_line_args+=("$1")
          fi
      
          shift
      done
      
      # ----------------------------------------------------------------------
      # |
      # |  Download BootstrapImpl.sh
      # |
      # ----------------------------------------------------------------------
      echo "Downloading Bootstrap code..."
      
      bootstrap_url=https://raw.githubusercontent.com/davidbrownell/PythonBootstrapper/${bootstrap_branch}/src/BootstrapImpl.sh
      
      temp_script_name=$(mktemp Bootstrap.XXXXXX)
      
      curl --header "Cache-Control: no-cache, no-store" --header "Pragma: no-cache" --location ${bootstrap_url} --output BootstrapImpl.sh --no-progress-meter --fail-with-body > "${temp_script_name}" 2>&1
      error=$?
      
      if [[ ${error} != 0 ]]; then
          echo "[1ADownloading Bootstrap code...[31m[1mFAILED[0m (${bootstrap_url})."
          echo ""
      
          cat "${temp_script_name}"
          rm "${temp_script_name}"
      
          exit ${error}
      fi
      
      chmod u+x BootstrapImpl.sh
      echo "[1ADownloading Bootstrap code...[32m[1mDONE[0m."
      
      # ----------------------------------------------------------------------
      # |
      # |  Invoke BootstrapImpl.sh
      # |
      # ----------------------------------------------------------------------
      ./BootstrapImpl.sh "${command_line_args[@]}"
      error=$?
      
      # ----------------------------------------------------------------------
      # |
      # |  Exit
      # |
      # ----------------------------------------------------------------------
      rm "BootstrapImpl.sh"
      rm "${temp_script_name}"
      
      exit ${error}
  
    ''',
    'BootstrapEpilog.py': '''
      # pylint: disable=missing-module-docstring
      
      import subprocess
      import sys
      
      from pathlib import Path
      
      
      # Parse the arguments
      no_cache = False
      
      display_flags: list[str] = []
      
      # First arg is the script name, second arg is the name of the shell script to write to
      for arg in sys.argv[2:]:
          if arg == "--no-cache":
              no_cache = True
          else:
              raise Exception("'{}' is not a recognized argument.".format(arg))
      
      subprocess.run(
          "pip install --disable-pip-version-check {} --requirement requirements.txt".format(
              "--no-cache-dir" if no_cache else "",
          ),
          check=True,
          shell=True,
          cwd=Path(__file__).parent,
      )
  
    ''',
    'requirements.txt': '''
      # TODO: Add your custom package requirements here
  
    ''',
  })
# ---
# name: test_Files[git-None-None]
  dict({
    '.gitignore': '''
      post_generation_actions.html
      
  
    ''',
  })
# ---
# name: test_Files[git-None-PythonExecutionEnvironment]
  dict({
    '.gitignore': '''
      post_generation_actions.html
      
      Activate*.cmd
      Activate*.sh
      Deactivate*.cmd
      Deactivate*.sh
      
      **/__pycache__/**
      **/Generated/**
      
  
    ''',
    'Bootstrap.cmd': '''
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  This script downloads and invokes BoostrapImpl.cmd from the PythonBootstrapper
      @REM |  repository (https://github.com/davidbrownell/PythonBootstrapper).
      @REM |
      @REM |  Arguments:
      @REM |
      @REM |      --debug                         Display additional debugging information.
      @REM |
      @REM |      --force                         Ensure that a new python environment is installed, even if it already exists.
      @REM |
      @REM |      --python-version <version>      Specify the python version to install; the default python version is installed if not specified.
      @REM |
      @REM |      --bootstrap-branch <branch>     Specify the branch of the PythonBootstrapper repository to use when downloading BootstrapImpl; "main" is used if not specified.
      @REM |
      @REM ----------------------------------------------------------------------
      @setlocal EnableDelayedExpansion
      @pushd %~dp0
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Parse and Process Arguments
      @REM |
      @REM ----------------------------------------------------------------------
      @set _BOOTSTRAP_BRANCH=main
      @set _COMMAND_LINE_ARGS=
      
      :ParseArgs
      @if '%1' EQU '' @goto :ParseArgs_End
      
      @set ARG=%1
      @set ARG=%ARG:"=%
      
      @if "%ARG%" NEQ "--bootstrap-branch" @goto :ParseArgs_BootstrapBranchEnd
      
      @REM Extract the bootstrap branch
      @shift /1
      
      @set ARG=%1
      @set ARG=%ARG:"=%
      
      @set _BOOTSTRAP_BRANCH=%ARG%
      @goto :ParseArgs_Next
      
      :ParseArgs_BootstrapBranchEnd
      @set _COMMAND_LINE_ARGS=%_COMMAND_LINE_ARGS% %1
      
      :ParseArgs_Next
      @shift /1
      @goto :ParseArgs
      
      :ParseArgs_End
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Download BootstrapImpl.cmd
      @REM |
      @REM ----------------------------------------------------------------------
      @echo Downloading Bootstrap code...
      
      @set _BOOTSTRAPIMPL_URL=https://raw.githubusercontent.com/davidbrownell/PythonBootstrapper/%_BOOTSTRAP_BRANCH%/src/BootstrapImpl.cmd
      
      @call :_CreateTempFileName
      
      @curl --header "Cache-Control: no-cache, no-store" --header "Pragma: no-cache" --location %_BOOTSTRAPIMPL_URL% --output BootstrapImpl.cmd --no-progress-meter --fail-with-body > "%_BOOTSTRAP_TEMP_FILENAME%" 2>&1
      @set _ERRORLEVEL=%ERRORLEVEL%
      
      @if %_ERRORLEVEL% NEQ 0 (
          @echo [1ADownloading Bootstrap code...[31m[1mFAILED[0m ^(%_BOOTSTRAPIMPL_URL%^).
          @echo.
      
          @type "%_BOOTSTRAP_TEMP_FILENAME%"
          @goto :Exit
      )
      
      @call :_DeleteTempFile
      @echo [1ADownloading Bootstrap code...[32m[1mDONE[0m.
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Invoke BootstrapImpl.cmd
      @REM |
      @REM ----------------------------------------------------------------------
      @call BootstrapImpl.cmd %_COMMAND_LINE_ARGS%
      @set _ERRORLEVEL=%ERRORLEVEL%
      
      @REM ----------------------------------------------------------------------
      @REM |
      @REM |  Exit
      @REM |
      @REM ----------------------------------------------------------------------
      :Exit
      @if exist BootstrapImpl.cmd del BootstrapImpl.cmd
      @call :_DeleteTempFile
      
      @popd
      
      @endlocal & @exit /B %_ERRORLEVEL%
      
      @REM ----------------------------------------------------------------------
      @REM ----------------------------------------------------------------------
      @REM ----------------------------------------------------------------------
      :_CreateTempFileName
      @set _BOOTSTRAP_TEMP_FILENAME=%CD%\Bootstrap-!RANDOM!-!Time:~6,5!
      @goto :EOF
      
      @REM ----------------------------------------------------------------------
      :_DeleteTempFile
      @if "%_BOOTSTRAP_TEMP_FILENAME%" NEQ "" (
          @if exist "%_BOOTSTRAP_TEMP_FILENAME%" (
              @del "%_BOOTSTRAP_TEMP_FILENAME%"
          )
      )
      @goto :EOF
  
    ''',
    'Bootstrap.sh': '''
      #!/usr/bin/env bash
      # ----------------------------------------------------------------------
      # |
      # |  This script downloads and invokes BootstrapImpl.sh from the PythonBootstrapper
      # |  repository (https://github.com/davidbrownell/PythonBootstrapper).
      # |
      # |  Arguments:
      # |
      # |      --debug                         Display additional debugging information.
      # |
      # |      --force                         Ensure that a new python environment is installed, even if it already exists.
      # |
      # |      --python-version <version>      Specify the python version to install; the default python version is installed if not specified.
      # |
      # |      --bootstrap-branch <branch>     Specify the branch of the PythonBootstrapper repository to use when downloading BootstrapImpl; "main" is used if not specified.
      # |
      # ----------------------------------------------------------------------
      set +v # Continue on errors
      
      this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
      pushd "${this_dir}" > /dev/null || exit
      
      # ----------------------------------------------------------------------
      # |
      # |  Parse and Process Arguments
      # |
      # ----------------------------------------------------------------------
      bootstrap_branch=main
      command_line_args=()
      
      while [[ $# -gt 0 ]]; do
          if [[ "$1" == "--bootstrap-branch" ]]; then
              bootstrap_branch=$2
              shift
          else
              command_line_args+=("$1")
          fi
      
          shift
      done
      
      # ----------------------------------------------------------------------
      # |
      # |  Download BootstrapImpl.sh
      # |
      # ----------------------------------------------------------------------
      echo "Downloading Bootstrap code..."
      
      bootstrap_url=https://raw.githubusercontent.com/davidbrownell/PythonBootstrapper/${bootstrap_branch}/src/BootstrapImpl.sh
      
      temp_script_name=$(mktemp Bootstrap.XXXXXX)
      
      curl --header "Cache-Control: no-cache, no-store" --header "Pragma: no-cache" --location ${bootstrap_url} --output BootstrapImpl.sh --no-progress-meter --fail-with-body > "${temp_script_name}" 2>&1
      error=$?
      
      if [[ ${error} != 0 ]]; then
          echo "[1ADownloading Bootstrap code...[31m[1mFAILED[0m (${bootstrap_url})."
          echo ""
      
          cat "${temp_script_name}"
          rm "${temp_script_name}"
      
          exit ${error}
      fi
      
      chmod u+x BootstrapImpl.sh
      echo "[1ADownloading Bootstrap code...[32m[1mDONE[0m."
      
      # ----------------------------------------------------------------------
      # |
      # |  Invoke BootstrapImpl.sh
      # |
      # ----------------------------------------------------------------------
      ./BootstrapImpl.sh "${command_line_args[@]}"
      error=$?
      
      # ----------------------------------------------------------------------
      # |
      # |  Exit
      # |
      # ----------------------------------------------------------------------
      rm "BootstrapImpl.sh"
      rm "${temp_script_name}"
      
      exit ${error}
  
    ''',
    'BootstrapEpilog.py': '''
      # pylint: disable=missing-module-docstring
      
      import subprocess
      import sys
      
      from pathlib import Path
      
      
      # Parse the arguments
      no_cache = False
      
      display_flags: list[str] = []
      
      # First arg is the script name, second arg is the name of the shell script to write to
      for arg in sys.argv[2:]:
          if arg == "--no-cache":
              no_cache = True
          else:
              raise Exception("'{}' is not a recognized argument.".format(arg))
      
      subprocess.run(
          "pip install --disable-pip-version-check {} --requirement requirements.txt".format(
              "--no-cache-dir" if no_cache else "",
          ),
          check=True,
          shell=True,
          cwd=Path(__file__).parent,
      )
  
    ''',
    'requirements.txt': '''
      # TODO: Add your custom package requirements here
  
    ''',
  })
# ---
